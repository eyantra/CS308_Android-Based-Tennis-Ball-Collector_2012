
Tennisball.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800200  00004b94  00004c28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004b94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800308  00800308  00004d30  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00004d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000407  00000000  00000000  00004d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010f1  00000000  00000000  00005157  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000218  00000000  00000000  00006248  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000019d7  00000000  00000000  00006460  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000300  00000000  00000000  00007e38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000446  00000000  00000000  00008138  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 99 0c 	jmp	0x1932	; 0x1932 <__vector_5>
      18:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <__vector_6>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d3 0a 	jmp	0x15a6	; 0x15a6 <__vector_54>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <__vector_56>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <lcd_set_4bit+0x7b4>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	13 e0       	ldi	r17, 0x03	; 3
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	e4 e9       	ldi	r30, 0x94	; 148
     17e:	fb e4       	ldi	r31, 0x4B	; 75
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a8 30       	cpi	r26, 0x08	; 8
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	13 e0       	ldi	r17, 0x03	; 3
     192:	a8 e0       	ldi	r26, 0x08	; 8
     194:	b3 e0       	ldi	r27, 0x03	; 3
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	aa 32       	cpi	r26, 0x2A	; 42
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <main>
     1a4:	0c 94 c8 25 	jmp	0x4b90	; 0x4b90 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <lcd_set_4bit>:
int i;


/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
     1ac:	0f 93       	push	r16
     1ae:	1f 93       	push	r17
     1b0:	df 93       	push	r29
     1b2:	cf 93       	push	r28
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	c0 57       	subi	r28, 0x70	; 112
     1ba:	d0 40       	sbci	r29, 0x00	; 0
     1bc:	0f b6       	in	r0, 0x3f	; 63
     1be:	f8 94       	cli
     1c0:	de bf       	out	0x3e, r29	; 62
     1c2:	0f be       	out	0x3f, r0	; 63
     1c4:	cd bf       	out	0x3d, r28	; 61
     1c6:	fe 01       	movw	r30, r28
     1c8:	e3 59       	subi	r30, 0x93	; 147
     1ca:	ff 4f       	sbci	r31, 0xFF	; 255
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	a0 e8       	ldi	r26, 0x80	; 128
     1d2:	bf e3       	ldi	r27, 0x3F	; 63
     1d4:	80 83       	st	Z, r24
     1d6:	91 83       	std	Z+1, r25	; 0x01
     1d8:	a2 83       	std	Z+2, r26	; 0x02
     1da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     1dc:	8e 01       	movw	r16, r28
     1de:	07 59       	subi	r16, 0x97	; 151
     1e0:	1f 4f       	sbci	r17, 0xFF	; 255
     1e2:	fe 01       	movw	r30, r28
     1e4:	e3 59       	subi	r30, 0x93	; 147
     1e6:	ff 4f       	sbci	r31, 0xFF	; 255
     1e8:	60 81       	ld	r22, Z
     1ea:	71 81       	ldd	r23, Z+1	; 0x01
     1ec:	82 81       	ldd	r24, Z+2	; 0x02
     1ee:	93 81       	ldd	r25, Z+3	; 0x03
     1f0:	2d ec       	ldi	r18, 0xCD	; 205
     1f2:	3c ec       	ldi	r19, 0xCC	; 204
     1f4:	4c e2       	ldi	r20, 0x2C	; 44
     1f6:	55 e4       	ldi	r21, 0x45	; 69
     1f8:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
     1fc:	dc 01       	movw	r26, r24
     1fe:	cb 01       	movw	r24, r22
     200:	f8 01       	movw	r30, r16
     202:	80 83       	st	Z, r24
     204:	91 83       	std	Z+1, r25	; 0x01
     206:	a2 83       	std	Z+2, r26	; 0x02
     208:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     20a:	fe 01       	movw	r30, r28
     20c:	e7 59       	subi	r30, 0x97	; 151
     20e:	ff 4f       	sbci	r31, 0xFF	; 255
     210:	60 81       	ld	r22, Z
     212:	71 81       	ldd	r23, Z+1	; 0x01
     214:	82 81       	ldd	r24, Z+2	; 0x02
     216:	93 81       	ldd	r25, Z+3	; 0x03
     218:	20 e0       	ldi	r18, 0x00	; 0
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	40 e8       	ldi	r20, 0x80	; 128
     21e:	5f e3       	ldi	r21, 0x3F	; 63
     220:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__ltsf2>
     224:	88 23       	and	r24, r24
     226:	44 f4       	brge	.+16     	; 0x238 <lcd_set_4bit+0x8c>
		__ticks = 1;
     228:	fe 01       	movw	r30, r28
     22a:	e9 59       	subi	r30, 0x99	; 153
     22c:	ff 4f       	sbci	r31, 0xFF	; 255
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	91 83       	std	Z+1, r25	; 0x01
     234:	80 83       	st	Z, r24
     236:	64 c0       	rjmp	.+200    	; 0x300 <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     238:	fe 01       	movw	r30, r28
     23a:	e7 59       	subi	r30, 0x97	; 151
     23c:	ff 4f       	sbci	r31, 0xFF	; 255
     23e:	60 81       	ld	r22, Z
     240:	71 81       	ldd	r23, Z+1	; 0x01
     242:	82 81       	ldd	r24, Z+2	; 0x02
     244:	93 81       	ldd	r25, Z+3	; 0x03
     246:	20 e0       	ldi	r18, 0x00	; 0
     248:	3f ef       	ldi	r19, 0xFF	; 255
     24a:	4f e7       	ldi	r20, 0x7F	; 127
     24c:	57 e4       	ldi	r21, 0x47	; 71
     24e:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__gtsf2>
     252:	18 16       	cp	r1, r24
     254:	0c f0       	brlt	.+2      	; 0x258 <lcd_set_4bit+0xac>
     256:	43 c0       	rjmp	.+134    	; 0x2de <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     258:	fe 01       	movw	r30, r28
     25a:	e3 59       	subi	r30, 0x93	; 147
     25c:	ff 4f       	sbci	r31, 0xFF	; 255
     25e:	60 81       	ld	r22, Z
     260:	71 81       	ldd	r23, Z+1	; 0x01
     262:	82 81       	ldd	r24, Z+2	; 0x02
     264:	93 81       	ldd	r25, Z+3	; 0x03
     266:	20 e0       	ldi	r18, 0x00	; 0
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	40 e2       	ldi	r20, 0x20	; 32
     26c:	51 e4       	ldi	r21, 0x41	; 65
     26e:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
     272:	dc 01       	movw	r26, r24
     274:	cb 01       	movw	r24, r22
     276:	8e 01       	movw	r16, r28
     278:	09 59       	subi	r16, 0x99	; 153
     27a:	1f 4f       	sbci	r17, 0xFF	; 255
     27c:	bc 01       	movw	r22, r24
     27e:	cd 01       	movw	r24, r26
     280:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
     284:	dc 01       	movw	r26, r24
     286:	cb 01       	movw	r24, r22
     288:	f8 01       	movw	r30, r16
     28a:	91 83       	std	Z+1, r25	; 0x01
     28c:	80 83       	st	Z, r24
     28e:	1f c0       	rjmp	.+62     	; 0x2ce <lcd_set_4bit+0x122>
     290:	fe 01       	movw	r30, r28
     292:	eb 59       	subi	r30, 0x9B	; 155
     294:	ff 4f       	sbci	r31, 0xFF	; 255
     296:	84 e1       	ldi	r24, 0x14	; 20
     298:	91 e0       	ldi	r25, 0x01	; 1
     29a:	91 83       	std	Z+1, r25	; 0x01
     29c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     29e:	fe 01       	movw	r30, r28
     2a0:	eb 59       	subi	r30, 0x9B	; 155
     2a2:	ff 4f       	sbci	r31, 0xFF	; 255
     2a4:	80 81       	ld	r24, Z
     2a6:	91 81       	ldd	r25, Z+1	; 0x01
     2a8:	01 97       	sbiw	r24, 0x01	; 1
     2aa:	f1 f7       	brne	.-4      	; 0x2a8 <lcd_set_4bit+0xfc>
     2ac:	fe 01       	movw	r30, r28
     2ae:	eb 59       	subi	r30, 0x9B	; 155
     2b0:	ff 4f       	sbci	r31, 0xFF	; 255
     2b2:	91 83       	std	Z+1, r25	; 0x01
     2b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2b6:	de 01       	movw	r26, r28
     2b8:	a9 59       	subi	r26, 0x99	; 153
     2ba:	bf 4f       	sbci	r27, 0xFF	; 255
     2bc:	fe 01       	movw	r30, r28
     2be:	e9 59       	subi	r30, 0x99	; 153
     2c0:	ff 4f       	sbci	r31, 0xFF	; 255
     2c2:	80 81       	ld	r24, Z
     2c4:	91 81       	ldd	r25, Z+1	; 0x01
     2c6:	01 97       	sbiw	r24, 0x01	; 1
     2c8:	11 96       	adiw	r26, 0x01	; 1
     2ca:	9c 93       	st	X, r25
     2cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2ce:	fe 01       	movw	r30, r28
     2d0:	e9 59       	subi	r30, 0x99	; 153
     2d2:	ff 4f       	sbci	r31, 0xFF	; 255
     2d4:	80 81       	ld	r24, Z
     2d6:	91 81       	ldd	r25, Z+1	; 0x01
     2d8:	00 97       	sbiw	r24, 0x00	; 0
     2da:	d1 f6       	brne	.-76     	; 0x290 <lcd_set_4bit+0xe4>
     2dc:	27 c0       	rjmp	.+78     	; 0x32c <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2de:	8e 01       	movw	r16, r28
     2e0:	09 59       	subi	r16, 0x99	; 153
     2e2:	1f 4f       	sbci	r17, 0xFF	; 255
     2e4:	fe 01       	movw	r30, r28
     2e6:	e7 59       	subi	r30, 0x97	; 151
     2e8:	ff 4f       	sbci	r31, 0xFF	; 255
     2ea:	60 81       	ld	r22, Z
     2ec:	71 81       	ldd	r23, Z+1	; 0x01
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
     2f6:	dc 01       	movw	r26, r24
     2f8:	cb 01       	movw	r24, r22
     2fa:	f8 01       	movw	r30, r16
     2fc:	91 83       	std	Z+1, r25	; 0x01
     2fe:	80 83       	st	Z, r24
     300:	de 01       	movw	r26, r28
     302:	ad 59       	subi	r26, 0x9D	; 157
     304:	bf 4f       	sbci	r27, 0xFF	; 255
     306:	fe 01       	movw	r30, r28
     308:	e9 59       	subi	r30, 0x99	; 153
     30a:	ff 4f       	sbci	r31, 0xFF	; 255
     30c:	80 81       	ld	r24, Z
     30e:	91 81       	ldd	r25, Z+1	; 0x01
     310:	8d 93       	st	X+, r24
     312:	9c 93       	st	X, r25
     314:	fe 01       	movw	r30, r28
     316:	ed 59       	subi	r30, 0x9D	; 157
     318:	ff 4f       	sbci	r31, 0xFF	; 255
     31a:	80 81       	ld	r24, Z
     31c:	91 81       	ldd	r25, Z+1	; 0x01
     31e:	01 97       	sbiw	r24, 0x01	; 1
     320:	f1 f7       	brne	.-4      	; 0x31e <lcd_set_4bit+0x172>
     322:	fe 01       	movw	r30, r28
     324:	ed 59       	subi	r30, 0x9D	; 157
     326:	ff 4f       	sbci	r31, 0xFF	; 255
     328:	91 83       	std	Z+1, r25	; 0x01
     32a:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     32c:	a8 e2       	ldi	r26, 0x28	; 40
     32e:	b0 e0       	ldi	r27, 0x00	; 0
     330:	e8 e2       	ldi	r30, 0x28	; 40
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	80 81       	ld	r24, Z
     336:	8e 7f       	andi	r24, 0xFE	; 254
     338:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     33a:	a8 e2       	ldi	r26, 0x28	; 40
     33c:	b0 e0       	ldi	r27, 0x00	; 0
     33e:	e8 e2       	ldi	r30, 0x28	; 40
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	80 81       	ld	r24, Z
     344:	8d 7f       	andi	r24, 0xFD	; 253
     346:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     348:	e8 e2       	ldi	r30, 0x28	; 40
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	80 e3       	ldi	r24, 0x30	; 48
     34e:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     350:	a8 e2       	ldi	r26, 0x28	; 40
     352:	b0 e0       	ldi	r27, 0x00	; 0
     354:	e8 e2       	ldi	r30, 0x28	; 40
     356:	f0 e0       	ldi	r31, 0x00	; 0
     358:	80 81       	ld	r24, Z
     35a:	84 60       	ori	r24, 0x04	; 4
     35c:	8c 93       	st	X, r24
     35e:	fe 01       	movw	r30, r28
     360:	e1 5a       	subi	r30, 0xA1	; 161
     362:	ff 4f       	sbci	r31, 0xFF	; 255
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	a0 ea       	ldi	r26, 0xA0	; 160
     36a:	b0 e4       	ldi	r27, 0x40	; 64
     36c:	80 83       	st	Z, r24
     36e:	91 83       	std	Z+1, r25	; 0x01
     370:	a2 83       	std	Z+2, r26	; 0x02
     372:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     374:	8e 01       	movw	r16, r28
     376:	05 5a       	subi	r16, 0xA5	; 165
     378:	1f 4f       	sbci	r17, 0xFF	; 255
     37a:	fe 01       	movw	r30, r28
     37c:	e1 5a       	subi	r30, 0xA1	; 161
     37e:	ff 4f       	sbci	r31, 0xFF	; 255
     380:	60 81       	ld	r22, Z
     382:	71 81       	ldd	r23, Z+1	; 0x01
     384:	82 81       	ldd	r24, Z+2	; 0x02
     386:	93 81       	ldd	r25, Z+3	; 0x03
     388:	2d ec       	ldi	r18, 0xCD	; 205
     38a:	3c ec       	ldi	r19, 0xCC	; 204
     38c:	4c e2       	ldi	r20, 0x2C	; 44
     38e:	55 e4       	ldi	r21, 0x45	; 69
     390:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
     394:	dc 01       	movw	r26, r24
     396:	cb 01       	movw	r24, r22
     398:	f8 01       	movw	r30, r16
     39a:	80 83       	st	Z, r24
     39c:	91 83       	std	Z+1, r25	; 0x01
     39e:	a2 83       	std	Z+2, r26	; 0x02
     3a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     3a2:	fe 01       	movw	r30, r28
     3a4:	e5 5a       	subi	r30, 0xA5	; 165
     3a6:	ff 4f       	sbci	r31, 0xFF	; 255
     3a8:	60 81       	ld	r22, Z
     3aa:	71 81       	ldd	r23, Z+1	; 0x01
     3ac:	82 81       	ldd	r24, Z+2	; 0x02
     3ae:	93 81       	ldd	r25, Z+3	; 0x03
     3b0:	20 e0       	ldi	r18, 0x00	; 0
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	40 e8       	ldi	r20, 0x80	; 128
     3b6:	5f e3       	ldi	r21, 0x3F	; 63
     3b8:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__ltsf2>
     3bc:	88 23       	and	r24, r24
     3be:	44 f4       	brge	.+16     	; 0x3d0 <lcd_set_4bit+0x224>
		__ticks = 1;
     3c0:	fe 01       	movw	r30, r28
     3c2:	e7 5a       	subi	r30, 0xA7	; 167
     3c4:	ff 4f       	sbci	r31, 0xFF	; 255
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	91 83       	std	Z+1, r25	; 0x01
     3cc:	80 83       	st	Z, r24
     3ce:	64 c0       	rjmp	.+200    	; 0x498 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     3d0:	fe 01       	movw	r30, r28
     3d2:	e5 5a       	subi	r30, 0xA5	; 165
     3d4:	ff 4f       	sbci	r31, 0xFF	; 255
     3d6:	60 81       	ld	r22, Z
     3d8:	71 81       	ldd	r23, Z+1	; 0x01
     3da:	82 81       	ldd	r24, Z+2	; 0x02
     3dc:	93 81       	ldd	r25, Z+3	; 0x03
     3de:	20 e0       	ldi	r18, 0x00	; 0
     3e0:	3f ef       	ldi	r19, 0xFF	; 255
     3e2:	4f e7       	ldi	r20, 0x7F	; 127
     3e4:	57 e4       	ldi	r21, 0x47	; 71
     3e6:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__gtsf2>
     3ea:	18 16       	cp	r1, r24
     3ec:	0c f0       	brlt	.+2      	; 0x3f0 <lcd_set_4bit+0x244>
     3ee:	43 c0       	rjmp	.+134    	; 0x476 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3f0:	fe 01       	movw	r30, r28
     3f2:	e1 5a       	subi	r30, 0xA1	; 161
     3f4:	ff 4f       	sbci	r31, 0xFF	; 255
     3f6:	60 81       	ld	r22, Z
     3f8:	71 81       	ldd	r23, Z+1	; 0x01
     3fa:	82 81       	ldd	r24, Z+2	; 0x02
     3fc:	93 81       	ldd	r25, Z+3	; 0x03
     3fe:	20 e0       	ldi	r18, 0x00	; 0
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	40 e2       	ldi	r20, 0x20	; 32
     404:	51 e4       	ldi	r21, 0x41	; 65
     406:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
     40a:	dc 01       	movw	r26, r24
     40c:	cb 01       	movw	r24, r22
     40e:	8e 01       	movw	r16, r28
     410:	07 5a       	subi	r16, 0xA7	; 167
     412:	1f 4f       	sbci	r17, 0xFF	; 255
     414:	bc 01       	movw	r22, r24
     416:	cd 01       	movw	r24, r26
     418:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
     41c:	dc 01       	movw	r26, r24
     41e:	cb 01       	movw	r24, r22
     420:	f8 01       	movw	r30, r16
     422:	91 83       	std	Z+1, r25	; 0x01
     424:	80 83       	st	Z, r24
     426:	1f c0       	rjmp	.+62     	; 0x466 <lcd_set_4bit+0x2ba>
     428:	fe 01       	movw	r30, r28
     42a:	e9 5a       	subi	r30, 0xA9	; 169
     42c:	ff 4f       	sbci	r31, 0xFF	; 255
     42e:	84 e1       	ldi	r24, 0x14	; 20
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	91 83       	std	Z+1, r25	; 0x01
     434:	80 83       	st	Z, r24
     436:	fe 01       	movw	r30, r28
     438:	e9 5a       	subi	r30, 0xA9	; 169
     43a:	ff 4f       	sbci	r31, 0xFF	; 255
     43c:	80 81       	ld	r24, Z
     43e:	91 81       	ldd	r25, Z+1	; 0x01
     440:	01 97       	sbiw	r24, 0x01	; 1
     442:	f1 f7       	brne	.-4      	; 0x440 <lcd_set_4bit+0x294>
     444:	fe 01       	movw	r30, r28
     446:	e9 5a       	subi	r30, 0xA9	; 169
     448:	ff 4f       	sbci	r31, 0xFF	; 255
     44a:	91 83       	std	Z+1, r25	; 0x01
     44c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     44e:	de 01       	movw	r26, r28
     450:	a7 5a       	subi	r26, 0xA7	; 167
     452:	bf 4f       	sbci	r27, 0xFF	; 255
     454:	fe 01       	movw	r30, r28
     456:	e7 5a       	subi	r30, 0xA7	; 167
     458:	ff 4f       	sbci	r31, 0xFF	; 255
     45a:	80 81       	ld	r24, Z
     45c:	91 81       	ldd	r25, Z+1	; 0x01
     45e:	01 97       	sbiw	r24, 0x01	; 1
     460:	11 96       	adiw	r26, 0x01	; 1
     462:	9c 93       	st	X, r25
     464:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     466:	fe 01       	movw	r30, r28
     468:	e7 5a       	subi	r30, 0xA7	; 167
     46a:	ff 4f       	sbci	r31, 0xFF	; 255
     46c:	80 81       	ld	r24, Z
     46e:	91 81       	ldd	r25, Z+1	; 0x01
     470:	00 97       	sbiw	r24, 0x00	; 0
     472:	d1 f6       	brne	.-76     	; 0x428 <lcd_set_4bit+0x27c>
     474:	27 c0       	rjmp	.+78     	; 0x4c4 <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     476:	8e 01       	movw	r16, r28
     478:	07 5a       	subi	r16, 0xA7	; 167
     47a:	1f 4f       	sbci	r17, 0xFF	; 255
     47c:	fe 01       	movw	r30, r28
     47e:	e5 5a       	subi	r30, 0xA5	; 165
     480:	ff 4f       	sbci	r31, 0xFF	; 255
     482:	60 81       	ld	r22, Z
     484:	71 81       	ldd	r23, Z+1	; 0x01
     486:	82 81       	ldd	r24, Z+2	; 0x02
     488:	93 81       	ldd	r25, Z+3	; 0x03
     48a:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
     48e:	dc 01       	movw	r26, r24
     490:	cb 01       	movw	r24, r22
     492:	f8 01       	movw	r30, r16
     494:	91 83       	std	Z+1, r25	; 0x01
     496:	80 83       	st	Z, r24
     498:	de 01       	movw	r26, r28
     49a:	ab 5a       	subi	r26, 0xAB	; 171
     49c:	bf 4f       	sbci	r27, 0xFF	; 255
     49e:	fe 01       	movw	r30, r28
     4a0:	e7 5a       	subi	r30, 0xA7	; 167
     4a2:	ff 4f       	sbci	r31, 0xFF	; 255
     4a4:	80 81       	ld	r24, Z
     4a6:	91 81       	ldd	r25, Z+1	; 0x01
     4a8:	8d 93       	st	X+, r24
     4aa:	9c 93       	st	X, r25
     4ac:	fe 01       	movw	r30, r28
     4ae:	eb 5a       	subi	r30, 0xAB	; 171
     4b0:	ff 4f       	sbci	r31, 0xFF	; 255
     4b2:	80 81       	ld	r24, Z
     4b4:	91 81       	ldd	r25, Z+1	; 0x01
     4b6:	01 97       	sbiw	r24, 0x01	; 1
     4b8:	f1 f7       	brne	.-4      	; 0x4b6 <lcd_set_4bit+0x30a>
     4ba:	fe 01       	movw	r30, r28
     4bc:	eb 5a       	subi	r30, 0xAB	; 171
     4be:	ff 4f       	sbci	r31, 0xFF	; 255
     4c0:	91 83       	std	Z+1, r25	; 0x01
     4c2:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     4c4:	a8 e2       	ldi	r26, 0x28	; 40
     4c6:	b0 e0       	ldi	r27, 0x00	; 0
     4c8:	e8 e2       	ldi	r30, 0x28	; 40
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	80 81       	ld	r24, Z
     4ce:	8b 7f       	andi	r24, 0xFB	; 251
     4d0:	8c 93       	st	X, r24
     4d2:	fe 01       	movw	r30, r28
     4d4:	ef 5a       	subi	r30, 0xAF	; 175
     4d6:	ff 4f       	sbci	r31, 0xFF	; 255
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	a0 e8       	ldi	r26, 0x80	; 128
     4de:	bf e3       	ldi	r27, 0x3F	; 63
     4e0:	80 83       	st	Z, r24
     4e2:	91 83       	std	Z+1, r25	; 0x01
     4e4:	a2 83       	std	Z+2, r26	; 0x02
     4e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     4e8:	8e 01       	movw	r16, r28
     4ea:	03 5b       	subi	r16, 0xB3	; 179
     4ec:	1f 4f       	sbci	r17, 0xFF	; 255
     4ee:	fe 01       	movw	r30, r28
     4f0:	ef 5a       	subi	r30, 0xAF	; 175
     4f2:	ff 4f       	sbci	r31, 0xFF	; 255
     4f4:	60 81       	ld	r22, Z
     4f6:	71 81       	ldd	r23, Z+1	; 0x01
     4f8:	82 81       	ldd	r24, Z+2	; 0x02
     4fa:	93 81       	ldd	r25, Z+3	; 0x03
     4fc:	2d ec       	ldi	r18, 0xCD	; 205
     4fe:	3c ec       	ldi	r19, 0xCC	; 204
     500:	4c e2       	ldi	r20, 0x2C	; 44
     502:	55 e4       	ldi	r21, 0x45	; 69
     504:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
     508:	dc 01       	movw	r26, r24
     50a:	cb 01       	movw	r24, r22
     50c:	f8 01       	movw	r30, r16
     50e:	80 83       	st	Z, r24
     510:	91 83       	std	Z+1, r25	; 0x01
     512:	a2 83       	std	Z+2, r26	; 0x02
     514:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     516:	fe 01       	movw	r30, r28
     518:	e3 5b       	subi	r30, 0xB3	; 179
     51a:	ff 4f       	sbci	r31, 0xFF	; 255
     51c:	60 81       	ld	r22, Z
     51e:	71 81       	ldd	r23, Z+1	; 0x01
     520:	82 81       	ldd	r24, Z+2	; 0x02
     522:	93 81       	ldd	r25, Z+3	; 0x03
     524:	20 e0       	ldi	r18, 0x00	; 0
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	40 e8       	ldi	r20, 0x80	; 128
     52a:	5f e3       	ldi	r21, 0x3F	; 63
     52c:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__ltsf2>
     530:	88 23       	and	r24, r24
     532:	44 f4       	brge	.+16     	; 0x544 <lcd_set_4bit+0x398>
		__ticks = 1;
     534:	fe 01       	movw	r30, r28
     536:	e5 5b       	subi	r30, 0xB5	; 181
     538:	ff 4f       	sbci	r31, 0xFF	; 255
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	91 83       	std	Z+1, r25	; 0x01
     540:	80 83       	st	Z, r24
     542:	64 c0       	rjmp	.+200    	; 0x60c <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     544:	fe 01       	movw	r30, r28
     546:	e3 5b       	subi	r30, 0xB3	; 179
     548:	ff 4f       	sbci	r31, 0xFF	; 255
     54a:	60 81       	ld	r22, Z
     54c:	71 81       	ldd	r23, Z+1	; 0x01
     54e:	82 81       	ldd	r24, Z+2	; 0x02
     550:	93 81       	ldd	r25, Z+3	; 0x03
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	3f ef       	ldi	r19, 0xFF	; 255
     556:	4f e7       	ldi	r20, 0x7F	; 127
     558:	57 e4       	ldi	r21, 0x47	; 71
     55a:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__gtsf2>
     55e:	18 16       	cp	r1, r24
     560:	0c f0       	brlt	.+2      	; 0x564 <lcd_set_4bit+0x3b8>
     562:	43 c0       	rjmp	.+134    	; 0x5ea <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     564:	fe 01       	movw	r30, r28
     566:	ef 5a       	subi	r30, 0xAF	; 175
     568:	ff 4f       	sbci	r31, 0xFF	; 255
     56a:	60 81       	ld	r22, Z
     56c:	71 81       	ldd	r23, Z+1	; 0x01
     56e:	82 81       	ldd	r24, Z+2	; 0x02
     570:	93 81       	ldd	r25, Z+3	; 0x03
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	40 e2       	ldi	r20, 0x20	; 32
     578:	51 e4       	ldi	r21, 0x41	; 65
     57a:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
     57e:	dc 01       	movw	r26, r24
     580:	cb 01       	movw	r24, r22
     582:	8e 01       	movw	r16, r28
     584:	05 5b       	subi	r16, 0xB5	; 181
     586:	1f 4f       	sbci	r17, 0xFF	; 255
     588:	bc 01       	movw	r22, r24
     58a:	cd 01       	movw	r24, r26
     58c:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
     590:	dc 01       	movw	r26, r24
     592:	cb 01       	movw	r24, r22
     594:	f8 01       	movw	r30, r16
     596:	91 83       	std	Z+1, r25	; 0x01
     598:	80 83       	st	Z, r24
     59a:	1f c0       	rjmp	.+62     	; 0x5da <lcd_set_4bit+0x42e>
     59c:	fe 01       	movw	r30, r28
     59e:	e7 5b       	subi	r30, 0xB7	; 183
     5a0:	ff 4f       	sbci	r31, 0xFF	; 255
     5a2:	84 e1       	ldi	r24, 0x14	; 20
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	91 83       	std	Z+1, r25	; 0x01
     5a8:	80 83       	st	Z, r24
     5aa:	fe 01       	movw	r30, r28
     5ac:	e7 5b       	subi	r30, 0xB7	; 183
     5ae:	ff 4f       	sbci	r31, 0xFF	; 255
     5b0:	80 81       	ld	r24, Z
     5b2:	91 81       	ldd	r25, Z+1	; 0x01
     5b4:	01 97       	sbiw	r24, 0x01	; 1
     5b6:	f1 f7       	brne	.-4      	; 0x5b4 <lcd_set_4bit+0x408>
     5b8:	fe 01       	movw	r30, r28
     5ba:	e7 5b       	subi	r30, 0xB7	; 183
     5bc:	ff 4f       	sbci	r31, 0xFF	; 255
     5be:	91 83       	std	Z+1, r25	; 0x01
     5c0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5c2:	de 01       	movw	r26, r28
     5c4:	a5 5b       	subi	r26, 0xB5	; 181
     5c6:	bf 4f       	sbci	r27, 0xFF	; 255
     5c8:	fe 01       	movw	r30, r28
     5ca:	e5 5b       	subi	r30, 0xB5	; 181
     5cc:	ff 4f       	sbci	r31, 0xFF	; 255
     5ce:	80 81       	ld	r24, Z
     5d0:	91 81       	ldd	r25, Z+1	; 0x01
     5d2:	01 97       	sbiw	r24, 0x01	; 1
     5d4:	11 96       	adiw	r26, 0x01	; 1
     5d6:	9c 93       	st	X, r25
     5d8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5da:	fe 01       	movw	r30, r28
     5dc:	e5 5b       	subi	r30, 0xB5	; 181
     5de:	ff 4f       	sbci	r31, 0xFF	; 255
     5e0:	80 81       	ld	r24, Z
     5e2:	91 81       	ldd	r25, Z+1	; 0x01
     5e4:	00 97       	sbiw	r24, 0x00	; 0
     5e6:	d1 f6       	brne	.-76     	; 0x59c <lcd_set_4bit+0x3f0>
     5e8:	27 c0       	rjmp	.+78     	; 0x638 <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5ea:	8e 01       	movw	r16, r28
     5ec:	05 5b       	subi	r16, 0xB5	; 181
     5ee:	1f 4f       	sbci	r17, 0xFF	; 255
     5f0:	fe 01       	movw	r30, r28
     5f2:	e3 5b       	subi	r30, 0xB3	; 179
     5f4:	ff 4f       	sbci	r31, 0xFF	; 255
     5f6:	60 81       	ld	r22, Z
     5f8:	71 81       	ldd	r23, Z+1	; 0x01
     5fa:	82 81       	ldd	r24, Z+2	; 0x02
     5fc:	93 81       	ldd	r25, Z+3	; 0x03
     5fe:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
     602:	dc 01       	movw	r26, r24
     604:	cb 01       	movw	r24, r22
     606:	f8 01       	movw	r30, r16
     608:	91 83       	std	Z+1, r25	; 0x01
     60a:	80 83       	st	Z, r24
     60c:	de 01       	movw	r26, r28
     60e:	a9 5b       	subi	r26, 0xB9	; 185
     610:	bf 4f       	sbci	r27, 0xFF	; 255
     612:	fe 01       	movw	r30, r28
     614:	e5 5b       	subi	r30, 0xB5	; 181
     616:	ff 4f       	sbci	r31, 0xFF	; 255
     618:	80 81       	ld	r24, Z
     61a:	91 81       	ldd	r25, Z+1	; 0x01
     61c:	8d 93       	st	X+, r24
     61e:	9c 93       	st	X, r25
     620:	fe 01       	movw	r30, r28
     622:	e9 5b       	subi	r30, 0xB9	; 185
     624:	ff 4f       	sbci	r31, 0xFF	; 255
     626:	80 81       	ld	r24, Z
     628:	91 81       	ldd	r25, Z+1	; 0x01
     62a:	01 97       	sbiw	r24, 0x01	; 1
     62c:	f1 f7       	brne	.-4      	; 0x62a <lcd_set_4bit+0x47e>
     62e:	fe 01       	movw	r30, r28
     630:	e9 5b       	subi	r30, 0xB9	; 185
     632:	ff 4f       	sbci	r31, 0xFF	; 255
     634:	91 83       	std	Z+1, r25	; 0x01
     636:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     638:	a8 e2       	ldi	r26, 0x28	; 40
     63a:	b0 e0       	ldi	r27, 0x00	; 0
     63c:	e8 e2       	ldi	r30, 0x28	; 40
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	80 81       	ld	r24, Z
     642:	8e 7f       	andi	r24, 0xFE	; 254
     644:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     646:	a8 e2       	ldi	r26, 0x28	; 40
     648:	b0 e0       	ldi	r27, 0x00	; 0
     64a:	e8 e2       	ldi	r30, 0x28	; 40
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	80 81       	ld	r24, Z
     650:	8d 7f       	andi	r24, 0xFD	; 253
     652:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     654:	e8 e2       	ldi	r30, 0x28	; 40
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	80 e3       	ldi	r24, 0x30	; 48
     65a:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     65c:	a8 e2       	ldi	r26, 0x28	; 40
     65e:	b0 e0       	ldi	r27, 0x00	; 0
     660:	e8 e2       	ldi	r30, 0x28	; 40
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	80 81       	ld	r24, Z
     666:	84 60       	ori	r24, 0x04	; 4
     668:	8c 93       	st	X, r24
     66a:	fe 01       	movw	r30, r28
     66c:	ed 5b       	subi	r30, 0xBD	; 189
     66e:	ff 4f       	sbci	r31, 0xFF	; 255
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	a0 ea       	ldi	r26, 0xA0	; 160
     676:	b0 e4       	ldi	r27, 0x40	; 64
     678:	80 83       	st	Z, r24
     67a:	91 83       	std	Z+1, r25	; 0x01
     67c:	a2 83       	std	Z+2, r26	; 0x02
     67e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     680:	8e 01       	movw	r16, r28
     682:	01 5c       	subi	r16, 0xC1	; 193
     684:	1f 4f       	sbci	r17, 0xFF	; 255
     686:	fe 01       	movw	r30, r28
     688:	ed 5b       	subi	r30, 0xBD	; 189
     68a:	ff 4f       	sbci	r31, 0xFF	; 255
     68c:	60 81       	ld	r22, Z
     68e:	71 81       	ldd	r23, Z+1	; 0x01
     690:	82 81       	ldd	r24, Z+2	; 0x02
     692:	93 81       	ldd	r25, Z+3	; 0x03
     694:	2d ec       	ldi	r18, 0xCD	; 205
     696:	3c ec       	ldi	r19, 0xCC	; 204
     698:	4c e2       	ldi	r20, 0x2C	; 44
     69a:	55 e4       	ldi	r21, 0x45	; 69
     69c:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
     6a0:	dc 01       	movw	r26, r24
     6a2:	cb 01       	movw	r24, r22
     6a4:	f8 01       	movw	r30, r16
     6a6:	80 83       	st	Z, r24
     6a8:	91 83       	std	Z+1, r25	; 0x01
     6aa:	a2 83       	std	Z+2, r26	; 0x02
     6ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     6ae:	fe 01       	movw	r30, r28
     6b0:	ff 96       	adiw	r30, 0x3f	; 63
     6b2:	60 81       	ld	r22, Z
     6b4:	71 81       	ldd	r23, Z+1	; 0x01
     6b6:	82 81       	ldd	r24, Z+2	; 0x02
     6b8:	93 81       	ldd	r25, Z+3	; 0x03
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	40 e8       	ldi	r20, 0x80	; 128
     6c0:	5f e3       	ldi	r21, 0x3F	; 63
     6c2:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__ltsf2>
     6c6:	88 23       	and	r24, r24
     6c8:	2c f4       	brge	.+10     	; 0x6d4 <lcd_set_4bit+0x528>
		__ticks = 1;
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	9e af       	std	Y+62, r25	; 0x3e
     6d0:	8d af       	std	Y+61, r24	; 0x3d
     6d2:	46 c0       	rjmp	.+140    	; 0x760 <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     6d4:	fe 01       	movw	r30, r28
     6d6:	ff 96       	adiw	r30, 0x3f	; 63
     6d8:	60 81       	ld	r22, Z
     6da:	71 81       	ldd	r23, Z+1	; 0x01
     6dc:	82 81       	ldd	r24, Z+2	; 0x02
     6de:	93 81       	ldd	r25, Z+3	; 0x03
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	3f ef       	ldi	r19, 0xFF	; 255
     6e4:	4f e7       	ldi	r20, 0x7F	; 127
     6e6:	57 e4       	ldi	r21, 0x47	; 71
     6e8:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__gtsf2>
     6ec:	18 16       	cp	r1, r24
     6ee:	64 f5       	brge	.+88     	; 0x748 <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6f0:	fe 01       	movw	r30, r28
     6f2:	ed 5b       	subi	r30, 0xBD	; 189
     6f4:	ff 4f       	sbci	r31, 0xFF	; 255
     6f6:	60 81       	ld	r22, Z
     6f8:	71 81       	ldd	r23, Z+1	; 0x01
     6fa:	82 81       	ldd	r24, Z+2	; 0x02
     6fc:	93 81       	ldd	r25, Z+3	; 0x03
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	40 e2       	ldi	r20, 0x20	; 32
     704:	51 e4       	ldi	r21, 0x41	; 65
     706:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
     70a:	dc 01       	movw	r26, r24
     70c:	cb 01       	movw	r24, r22
     70e:	bc 01       	movw	r22, r24
     710:	cd 01       	movw	r24, r26
     712:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
     716:	dc 01       	movw	r26, r24
     718:	cb 01       	movw	r24, r22
     71a:	9e af       	std	Y+62, r25	; 0x3e
     71c:	8d af       	std	Y+61, r24	; 0x3d
     71e:	0f c0       	rjmp	.+30     	; 0x73e <lcd_set_4bit+0x592>
     720:	84 e1       	ldi	r24, 0x14	; 20
     722:	91 e0       	ldi	r25, 0x01	; 1
     724:	9c af       	std	Y+60, r25	; 0x3c
     726:	8b af       	std	Y+59, r24	; 0x3b
     728:	8b ad       	ldd	r24, Y+59	; 0x3b
     72a:	9c ad       	ldd	r25, Y+60	; 0x3c
     72c:	01 97       	sbiw	r24, 0x01	; 1
     72e:	f1 f7       	brne	.-4      	; 0x72c <lcd_set_4bit+0x580>
     730:	9c af       	std	Y+60, r25	; 0x3c
     732:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     734:	8d ad       	ldd	r24, Y+61	; 0x3d
     736:	9e ad       	ldd	r25, Y+62	; 0x3e
     738:	01 97       	sbiw	r24, 0x01	; 1
     73a:	9e af       	std	Y+62, r25	; 0x3e
     73c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     73e:	8d ad       	ldd	r24, Y+61	; 0x3d
     740:	9e ad       	ldd	r25, Y+62	; 0x3e
     742:	00 97       	sbiw	r24, 0x00	; 0
     744:	69 f7       	brne	.-38     	; 0x720 <lcd_set_4bit+0x574>
     746:	16 c0       	rjmp	.+44     	; 0x774 <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     748:	fe 01       	movw	r30, r28
     74a:	ff 96       	adiw	r30, 0x3f	; 63
     74c:	60 81       	ld	r22, Z
     74e:	71 81       	ldd	r23, Z+1	; 0x01
     750:	82 81       	ldd	r24, Z+2	; 0x02
     752:	93 81       	ldd	r25, Z+3	; 0x03
     754:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
     758:	dc 01       	movw	r26, r24
     75a:	cb 01       	movw	r24, r22
     75c:	9e af       	std	Y+62, r25	; 0x3e
     75e:	8d af       	std	Y+61, r24	; 0x3d
     760:	8d ad       	ldd	r24, Y+61	; 0x3d
     762:	9e ad       	ldd	r25, Y+62	; 0x3e
     764:	9a af       	std	Y+58, r25	; 0x3a
     766:	89 af       	std	Y+57, r24	; 0x39
     768:	89 ad       	ldd	r24, Y+57	; 0x39
     76a:	9a ad       	ldd	r25, Y+58	; 0x3a
     76c:	01 97       	sbiw	r24, 0x01	; 1
     76e:	f1 f7       	brne	.-4      	; 0x76c <lcd_set_4bit+0x5c0>
     770:	9a af       	std	Y+58, r25	; 0x3a
     772:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     774:	a8 e2       	ldi	r26, 0x28	; 40
     776:	b0 e0       	ldi	r27, 0x00	; 0
     778:	e8 e2       	ldi	r30, 0x28	; 40
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	80 81       	ld	r24, Z
     77e:	8b 7f       	andi	r24, 0xFB	; 251
     780:	8c 93       	st	X, r24
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	a0 e8       	ldi	r26, 0x80	; 128
     788:	bf e3       	ldi	r27, 0x3F	; 63
     78a:	8d ab       	std	Y+53, r24	; 0x35
     78c:	9e ab       	std	Y+54, r25	; 0x36
     78e:	af ab       	std	Y+55, r26	; 0x37
     790:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     792:	6d a9       	ldd	r22, Y+53	; 0x35
     794:	7e a9       	ldd	r23, Y+54	; 0x36
     796:	8f a9       	ldd	r24, Y+55	; 0x37
     798:	98 ad       	ldd	r25, Y+56	; 0x38
     79a:	2d ec       	ldi	r18, 0xCD	; 205
     79c:	3c ec       	ldi	r19, 0xCC	; 204
     79e:	4c e2       	ldi	r20, 0x2C	; 44
     7a0:	55 e4       	ldi	r21, 0x45	; 69
     7a2:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
     7a6:	dc 01       	movw	r26, r24
     7a8:	cb 01       	movw	r24, r22
     7aa:	89 ab       	std	Y+49, r24	; 0x31
     7ac:	9a ab       	std	Y+50, r25	; 0x32
     7ae:	ab ab       	std	Y+51, r26	; 0x33
     7b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     7b2:	69 a9       	ldd	r22, Y+49	; 0x31
     7b4:	7a a9       	ldd	r23, Y+50	; 0x32
     7b6:	8b a9       	ldd	r24, Y+51	; 0x33
     7b8:	9c a9       	ldd	r25, Y+52	; 0x34
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	40 e8       	ldi	r20, 0x80	; 128
     7c0:	5f e3       	ldi	r21, 0x3F	; 63
     7c2:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__ltsf2>
     7c6:	88 23       	and	r24, r24
     7c8:	2c f4       	brge	.+10     	; 0x7d4 <lcd_set_4bit+0x628>
		__ticks = 1;
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	98 ab       	std	Y+48, r25	; 0x30
     7d0:	8f a7       	std	Y+47, r24	; 0x2f
     7d2:	3f c0       	rjmp	.+126    	; 0x852 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     7d4:	69 a9       	ldd	r22, Y+49	; 0x31
     7d6:	7a a9       	ldd	r23, Y+50	; 0x32
     7d8:	8b a9       	ldd	r24, Y+51	; 0x33
     7da:	9c a9       	ldd	r25, Y+52	; 0x34
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f e7       	ldi	r20, 0x7F	; 127
     7e2:	57 e4       	ldi	r21, 0x47	; 71
     7e4:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__gtsf2>
     7e8:	18 16       	cp	r1, r24
     7ea:	4c f5       	brge	.+82     	; 0x83e <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7ec:	6d a9       	ldd	r22, Y+53	; 0x35
     7ee:	7e a9       	ldd	r23, Y+54	; 0x36
     7f0:	8f a9       	ldd	r24, Y+55	; 0x37
     7f2:	98 ad       	ldd	r25, Y+56	; 0x38
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	40 e2       	ldi	r20, 0x20	; 32
     7fa:	51 e4       	ldi	r21, 0x41	; 65
     7fc:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
     800:	dc 01       	movw	r26, r24
     802:	cb 01       	movw	r24, r22
     804:	bc 01       	movw	r22, r24
     806:	cd 01       	movw	r24, r26
     808:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
     80c:	dc 01       	movw	r26, r24
     80e:	cb 01       	movw	r24, r22
     810:	98 ab       	std	Y+48, r25	; 0x30
     812:	8f a7       	std	Y+47, r24	; 0x2f
     814:	0f c0       	rjmp	.+30     	; 0x834 <lcd_set_4bit+0x688>
     816:	84 e1       	ldi	r24, 0x14	; 20
     818:	91 e0       	ldi	r25, 0x01	; 1
     81a:	9e a7       	std	Y+46, r25	; 0x2e
     81c:	8d a7       	std	Y+45, r24	; 0x2d
     81e:	8d a5       	ldd	r24, Y+45	; 0x2d
     820:	9e a5       	ldd	r25, Y+46	; 0x2e
     822:	01 97       	sbiw	r24, 0x01	; 1
     824:	f1 f7       	brne	.-4      	; 0x822 <lcd_set_4bit+0x676>
     826:	9e a7       	std	Y+46, r25	; 0x2e
     828:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     82a:	8f a5       	ldd	r24, Y+47	; 0x2f
     82c:	98 a9       	ldd	r25, Y+48	; 0x30
     82e:	01 97       	sbiw	r24, 0x01	; 1
     830:	98 ab       	std	Y+48, r25	; 0x30
     832:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     834:	8f a5       	ldd	r24, Y+47	; 0x2f
     836:	98 a9       	ldd	r25, Y+48	; 0x30
     838:	00 97       	sbiw	r24, 0x00	; 0
     83a:	69 f7       	brne	.-38     	; 0x816 <lcd_set_4bit+0x66a>
     83c:	14 c0       	rjmp	.+40     	; 0x866 <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     83e:	69 a9       	ldd	r22, Y+49	; 0x31
     840:	7a a9       	ldd	r23, Y+50	; 0x32
     842:	8b a9       	ldd	r24, Y+51	; 0x33
     844:	9c a9       	ldd	r25, Y+52	; 0x34
     846:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
     84a:	dc 01       	movw	r26, r24
     84c:	cb 01       	movw	r24, r22
     84e:	98 ab       	std	Y+48, r25	; 0x30
     850:	8f a7       	std	Y+47, r24	; 0x2f
     852:	8f a5       	ldd	r24, Y+47	; 0x2f
     854:	98 a9       	ldd	r25, Y+48	; 0x30
     856:	9c a7       	std	Y+44, r25	; 0x2c
     858:	8b a7       	std	Y+43, r24	; 0x2b
     85a:	8b a5       	ldd	r24, Y+43	; 0x2b
     85c:	9c a5       	ldd	r25, Y+44	; 0x2c
     85e:	01 97       	sbiw	r24, 0x01	; 1
     860:	f1 f7       	brne	.-4      	; 0x85e <lcd_set_4bit+0x6b2>
     862:	9c a7       	std	Y+44, r25	; 0x2c
     864:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     866:	a8 e2       	ldi	r26, 0x28	; 40
     868:	b0 e0       	ldi	r27, 0x00	; 0
     86a:	e8 e2       	ldi	r30, 0x28	; 40
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	80 81       	ld	r24, Z
     870:	8e 7f       	andi	r24, 0xFE	; 254
     872:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     874:	a8 e2       	ldi	r26, 0x28	; 40
     876:	b0 e0       	ldi	r27, 0x00	; 0
     878:	e8 e2       	ldi	r30, 0x28	; 40
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	80 81       	ld	r24, Z
     87e:	8d 7f       	andi	r24, 0xFD	; 253
     880:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     882:	e8 e2       	ldi	r30, 0x28	; 40
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	80 e3       	ldi	r24, 0x30	; 48
     888:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     88a:	a8 e2       	ldi	r26, 0x28	; 40
     88c:	b0 e0       	ldi	r27, 0x00	; 0
     88e:	e8 e2       	ldi	r30, 0x28	; 40
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	80 81       	ld	r24, Z
     894:	84 60       	ori	r24, 0x04	; 4
     896:	8c 93       	st	X, r24
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	a0 ea       	ldi	r26, 0xA0	; 160
     89e:	b0 e4       	ldi	r27, 0x40	; 64
     8a0:	8f a3       	std	Y+39, r24	; 0x27
     8a2:	98 a7       	std	Y+40, r25	; 0x28
     8a4:	a9 a7       	std	Y+41, r26	; 0x29
     8a6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8a8:	6f a1       	ldd	r22, Y+39	; 0x27
     8aa:	78 a5       	ldd	r23, Y+40	; 0x28
     8ac:	89 a5       	ldd	r24, Y+41	; 0x29
     8ae:	9a a5       	ldd	r25, Y+42	; 0x2a
     8b0:	2d ec       	ldi	r18, 0xCD	; 205
     8b2:	3c ec       	ldi	r19, 0xCC	; 204
     8b4:	4c e2       	ldi	r20, 0x2C	; 44
     8b6:	55 e4       	ldi	r21, 0x45	; 69
     8b8:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
     8bc:	dc 01       	movw	r26, r24
     8be:	cb 01       	movw	r24, r22
     8c0:	8b a3       	std	Y+35, r24	; 0x23
     8c2:	9c a3       	std	Y+36, r25	; 0x24
     8c4:	ad a3       	std	Y+37, r26	; 0x25
     8c6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     8c8:	6b a1       	ldd	r22, Y+35	; 0x23
     8ca:	7c a1       	ldd	r23, Y+36	; 0x24
     8cc:	8d a1       	ldd	r24, Y+37	; 0x25
     8ce:	9e a1       	ldd	r25, Y+38	; 0x26
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	40 e8       	ldi	r20, 0x80	; 128
     8d6:	5f e3       	ldi	r21, 0x3F	; 63
     8d8:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__ltsf2>
     8dc:	88 23       	and	r24, r24
     8de:	2c f4       	brge	.+10     	; 0x8ea <lcd_set_4bit+0x73e>
		__ticks = 1;
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	9a a3       	std	Y+34, r25	; 0x22
     8e6:	89 a3       	std	Y+33, r24	; 0x21
     8e8:	3f c0       	rjmp	.+126    	; 0x968 <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     8ea:	6b a1       	ldd	r22, Y+35	; 0x23
     8ec:	7c a1       	ldd	r23, Y+36	; 0x24
     8ee:	8d a1       	ldd	r24, Y+37	; 0x25
     8f0:	9e a1       	ldd	r25, Y+38	; 0x26
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	3f ef       	ldi	r19, 0xFF	; 255
     8f6:	4f e7       	ldi	r20, 0x7F	; 127
     8f8:	57 e4       	ldi	r21, 0x47	; 71
     8fa:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__gtsf2>
     8fe:	18 16       	cp	r1, r24
     900:	4c f5       	brge	.+82     	; 0x954 <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     902:	6f a1       	ldd	r22, Y+39	; 0x27
     904:	78 a5       	ldd	r23, Y+40	; 0x28
     906:	89 a5       	ldd	r24, Y+41	; 0x29
     908:	9a a5       	ldd	r25, Y+42	; 0x2a
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 e2       	ldi	r20, 0x20	; 32
     910:	51 e4       	ldi	r21, 0x41	; 65
     912:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
     916:	dc 01       	movw	r26, r24
     918:	cb 01       	movw	r24, r22
     91a:	bc 01       	movw	r22, r24
     91c:	cd 01       	movw	r24, r26
     91e:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
     922:	dc 01       	movw	r26, r24
     924:	cb 01       	movw	r24, r22
     926:	9a a3       	std	Y+34, r25	; 0x22
     928:	89 a3       	std	Y+33, r24	; 0x21
     92a:	0f c0       	rjmp	.+30     	; 0x94a <lcd_set_4bit+0x79e>
     92c:	84 e1       	ldi	r24, 0x14	; 20
     92e:	91 e0       	ldi	r25, 0x01	; 1
     930:	98 a3       	std	Y+32, r25	; 0x20
     932:	8f 8f       	std	Y+31, r24	; 0x1f
     934:	8f 8d       	ldd	r24, Y+31	; 0x1f
     936:	98 a1       	ldd	r25, Y+32	; 0x20
     938:	01 97       	sbiw	r24, 0x01	; 1
     93a:	f1 f7       	brne	.-4      	; 0x938 <lcd_set_4bit+0x78c>
     93c:	98 a3       	std	Y+32, r25	; 0x20
     93e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     940:	89 a1       	ldd	r24, Y+33	; 0x21
     942:	9a a1       	ldd	r25, Y+34	; 0x22
     944:	01 97       	sbiw	r24, 0x01	; 1
     946:	9a a3       	std	Y+34, r25	; 0x22
     948:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     94a:	89 a1       	ldd	r24, Y+33	; 0x21
     94c:	9a a1       	ldd	r25, Y+34	; 0x22
     94e:	00 97       	sbiw	r24, 0x00	; 0
     950:	69 f7       	brne	.-38     	; 0x92c <lcd_set_4bit+0x780>
     952:	14 c0       	rjmp	.+40     	; 0x97c <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     954:	6b a1       	ldd	r22, Y+35	; 0x23
     956:	7c a1       	ldd	r23, Y+36	; 0x24
     958:	8d a1       	ldd	r24, Y+37	; 0x25
     95a:	9e a1       	ldd	r25, Y+38	; 0x26
     95c:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
     960:	dc 01       	movw	r26, r24
     962:	cb 01       	movw	r24, r22
     964:	9a a3       	std	Y+34, r25	; 0x22
     966:	89 a3       	std	Y+33, r24	; 0x21
     968:	89 a1       	ldd	r24, Y+33	; 0x21
     96a:	9a a1       	ldd	r25, Y+34	; 0x22
     96c:	9e 8f       	std	Y+30, r25	; 0x1e
     96e:	8d 8f       	std	Y+29, r24	; 0x1d
     970:	8d 8d       	ldd	r24, Y+29	; 0x1d
     972:	9e 8d       	ldd	r25, Y+30	; 0x1e
     974:	01 97       	sbiw	r24, 0x01	; 1
     976:	f1 f7       	brne	.-4      	; 0x974 <lcd_set_4bit+0x7c8>
     978:	9e 8f       	std	Y+30, r25	; 0x1e
     97a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     97c:	a8 e2       	ldi	r26, 0x28	; 40
     97e:	b0 e0       	ldi	r27, 0x00	; 0
     980:	e8 e2       	ldi	r30, 0x28	; 40
     982:	f0 e0       	ldi	r31, 0x00	; 0
     984:	80 81       	ld	r24, Z
     986:	8b 7f       	andi	r24, 0xFB	; 251
     988:	8c 93       	st	X, r24
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	a0 e8       	ldi	r26, 0x80	; 128
     990:	bf e3       	ldi	r27, 0x3F	; 63
     992:	89 8f       	std	Y+25, r24	; 0x19
     994:	9a 8f       	std	Y+26, r25	; 0x1a
     996:	ab 8f       	std	Y+27, r26	; 0x1b
     998:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     99a:	69 8d       	ldd	r22, Y+25	; 0x19
     99c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     99e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9a2:	2d ec       	ldi	r18, 0xCD	; 205
     9a4:	3c ec       	ldi	r19, 0xCC	; 204
     9a6:	4c e2       	ldi	r20, 0x2C	; 44
     9a8:	55 e4       	ldi	r21, 0x45	; 69
     9aa:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
     9ae:	dc 01       	movw	r26, r24
     9b0:	cb 01       	movw	r24, r22
     9b2:	8d 8b       	std	Y+21, r24	; 0x15
     9b4:	9e 8b       	std	Y+22, r25	; 0x16
     9b6:	af 8b       	std	Y+23, r26	; 0x17
     9b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     9ba:	6d 89       	ldd	r22, Y+21	; 0x15
     9bc:	7e 89       	ldd	r23, Y+22	; 0x16
     9be:	8f 89       	ldd	r24, Y+23	; 0x17
     9c0:	98 8d       	ldd	r25, Y+24	; 0x18
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	40 e8       	ldi	r20, 0x80	; 128
     9c8:	5f e3       	ldi	r21, 0x3F	; 63
     9ca:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__ltsf2>
     9ce:	88 23       	and	r24, r24
     9d0:	2c f4       	brge	.+10     	; 0x9dc <lcd_set_4bit+0x830>
		__ticks = 1;
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	9c 8b       	std	Y+20, r25	; 0x14
     9d8:	8b 8b       	std	Y+19, r24	; 0x13
     9da:	3f c0       	rjmp	.+126    	; 0xa5a <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     9dc:	6d 89       	ldd	r22, Y+21	; 0x15
     9de:	7e 89       	ldd	r23, Y+22	; 0x16
     9e0:	8f 89       	ldd	r24, Y+23	; 0x17
     9e2:	98 8d       	ldd	r25, Y+24	; 0x18
     9e4:	20 e0       	ldi	r18, 0x00	; 0
     9e6:	3f ef       	ldi	r19, 0xFF	; 255
     9e8:	4f e7       	ldi	r20, 0x7F	; 127
     9ea:	57 e4       	ldi	r21, 0x47	; 71
     9ec:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__gtsf2>
     9f0:	18 16       	cp	r1, r24
     9f2:	4c f5       	brge	.+82     	; 0xa46 <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9f4:	69 8d       	ldd	r22, Y+25	; 0x19
     9f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     9f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	40 e2       	ldi	r20, 0x20	; 32
     a02:	51 e4       	ldi	r21, 0x41	; 65
     a04:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
     a08:	dc 01       	movw	r26, r24
     a0a:	cb 01       	movw	r24, r22
     a0c:	bc 01       	movw	r22, r24
     a0e:	cd 01       	movw	r24, r26
     a10:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
     a14:	dc 01       	movw	r26, r24
     a16:	cb 01       	movw	r24, r22
     a18:	9c 8b       	std	Y+20, r25	; 0x14
     a1a:	8b 8b       	std	Y+19, r24	; 0x13
     a1c:	0f c0       	rjmp	.+30     	; 0xa3c <lcd_set_4bit+0x890>
     a1e:	84 e1       	ldi	r24, 0x14	; 20
     a20:	91 e0       	ldi	r25, 0x01	; 1
     a22:	9a 8b       	std	Y+18, r25	; 0x12
     a24:	89 8b       	std	Y+17, r24	; 0x11
     a26:	89 89       	ldd	r24, Y+17	; 0x11
     a28:	9a 89       	ldd	r25, Y+18	; 0x12
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	f1 f7       	brne	.-4      	; 0xa2a <lcd_set_4bit+0x87e>
     a2e:	9a 8b       	std	Y+18, r25	; 0x12
     a30:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a32:	8b 89       	ldd	r24, Y+19	; 0x13
     a34:	9c 89       	ldd	r25, Y+20	; 0x14
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	9c 8b       	std	Y+20, r25	; 0x14
     a3a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a3c:	8b 89       	ldd	r24, Y+19	; 0x13
     a3e:	9c 89       	ldd	r25, Y+20	; 0x14
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	69 f7       	brne	.-38     	; 0xa1e <lcd_set_4bit+0x872>
     a44:	14 c0       	rjmp	.+40     	; 0xa6e <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a46:	6d 89       	ldd	r22, Y+21	; 0x15
     a48:	7e 89       	ldd	r23, Y+22	; 0x16
     a4a:	8f 89       	ldd	r24, Y+23	; 0x17
     a4c:	98 8d       	ldd	r25, Y+24	; 0x18
     a4e:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
     a52:	dc 01       	movw	r26, r24
     a54:	cb 01       	movw	r24, r22
     a56:	9c 8b       	std	Y+20, r25	; 0x14
     a58:	8b 8b       	std	Y+19, r24	; 0x13
     a5a:	8b 89       	ldd	r24, Y+19	; 0x13
     a5c:	9c 89       	ldd	r25, Y+20	; 0x14
     a5e:	98 8b       	std	Y+16, r25	; 0x10
     a60:	8f 87       	std	Y+15, r24	; 0x0f
     a62:	8f 85       	ldd	r24, Y+15	; 0x0f
     a64:	98 89       	ldd	r25, Y+16	; 0x10
     a66:	01 97       	sbiw	r24, 0x01	; 1
     a68:	f1 f7       	brne	.-4      	; 0xa66 <lcd_set_4bit+0x8ba>
     a6a:	98 8b       	std	Y+16, r25	; 0x10
     a6c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     a6e:	a8 e2       	ldi	r26, 0x28	; 40
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	e8 e2       	ldi	r30, 0x28	; 40
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	80 81       	ld	r24, Z
     a78:	8e 7f       	andi	r24, 0xFE	; 254
     a7a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     a7c:	a8 e2       	ldi	r26, 0x28	; 40
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	e8 e2       	ldi	r30, 0x28	; 40
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	80 81       	ld	r24, Z
     a86:	8d 7f       	andi	r24, 0xFD	; 253
     a88:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     a8a:	e8 e2       	ldi	r30, 0x28	; 40
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	80 e2       	ldi	r24, 0x20	; 32
     a90:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     a92:	a8 e2       	ldi	r26, 0x28	; 40
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	e8 e2       	ldi	r30, 0x28	; 40
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	80 81       	ld	r24, Z
     a9c:	84 60       	ori	r24, 0x04	; 4
     a9e:	8c 93       	st	X, r24
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 ea       	ldi	r26, 0xA0	; 160
     aa6:	b0 e4       	ldi	r27, 0x40	; 64
     aa8:	8b 87       	std	Y+11, r24	; 0x0b
     aaa:	9c 87       	std	Y+12, r25	; 0x0c
     aac:	ad 87       	std	Y+13, r26	; 0x0d
     aae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ab0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ab2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ab4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ab6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ab8:	2d ec       	ldi	r18, 0xCD	; 205
     aba:	3c ec       	ldi	r19, 0xCC	; 204
     abc:	4c e2       	ldi	r20, 0x2C	; 44
     abe:	55 e4       	ldi	r21, 0x45	; 69
     ac0:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
     ac4:	dc 01       	movw	r26, r24
     ac6:	cb 01       	movw	r24, r22
     ac8:	8f 83       	std	Y+7, r24	; 0x07
     aca:	98 87       	std	Y+8, r25	; 0x08
     acc:	a9 87       	std	Y+9, r26	; 0x09
     ace:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ad0:	6f 81       	ldd	r22, Y+7	; 0x07
     ad2:	78 85       	ldd	r23, Y+8	; 0x08
     ad4:	89 85       	ldd	r24, Y+9	; 0x09
     ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ad8:	20 e0       	ldi	r18, 0x00	; 0
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	40 e8       	ldi	r20, 0x80	; 128
     ade:	5f e3       	ldi	r21, 0x3F	; 63
     ae0:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__ltsf2>
     ae4:	88 23       	and	r24, r24
     ae6:	2c f4       	brge	.+10     	; 0xaf2 <lcd_set_4bit+0x946>
		__ticks = 1;
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	9e 83       	std	Y+6, r25	; 0x06
     aee:	8d 83       	std	Y+5, r24	; 0x05
     af0:	3f c0       	rjmp	.+126    	; 0xb70 <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
     af2:	6f 81       	ldd	r22, Y+7	; 0x07
     af4:	78 85       	ldd	r23, Y+8	; 0x08
     af6:	89 85       	ldd	r24, Y+9	; 0x09
     af8:	9a 85       	ldd	r25, Y+10	; 0x0a
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	3f ef       	ldi	r19, 0xFF	; 255
     afe:	4f e7       	ldi	r20, 0x7F	; 127
     b00:	57 e4       	ldi	r21, 0x47	; 71
     b02:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__gtsf2>
     b06:	18 16       	cp	r1, r24
     b08:	4c f5       	brge	.+82     	; 0xb5c <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b0a:	6b 85       	ldd	r22, Y+11	; 0x0b
     b0c:	7c 85       	ldd	r23, Y+12	; 0x0c
     b0e:	8d 85       	ldd	r24, Y+13	; 0x0d
     b10:	9e 85       	ldd	r25, Y+14	; 0x0e
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	40 e2       	ldi	r20, 0x20	; 32
     b18:	51 e4       	ldi	r21, 0x41	; 65
     b1a:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
     b1e:	dc 01       	movw	r26, r24
     b20:	cb 01       	movw	r24, r22
     b22:	bc 01       	movw	r22, r24
     b24:	cd 01       	movw	r24, r26
     b26:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
     b2a:	dc 01       	movw	r26, r24
     b2c:	cb 01       	movw	r24, r22
     b2e:	9e 83       	std	Y+6, r25	; 0x06
     b30:	8d 83       	std	Y+5, r24	; 0x05
     b32:	0f c0       	rjmp	.+30     	; 0xb52 <lcd_set_4bit+0x9a6>
     b34:	84 e1       	ldi	r24, 0x14	; 20
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	9c 83       	std	Y+4, r25	; 0x04
     b3a:	8b 83       	std	Y+3, r24	; 0x03
     b3c:	8b 81       	ldd	r24, Y+3	; 0x03
     b3e:	9c 81       	ldd	r25, Y+4	; 0x04
     b40:	01 97       	sbiw	r24, 0x01	; 1
     b42:	f1 f7       	brne	.-4      	; 0xb40 <lcd_set_4bit+0x994>
     b44:	9c 83       	std	Y+4, r25	; 0x04
     b46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b48:	8d 81       	ldd	r24, Y+5	; 0x05
     b4a:	9e 81       	ldd	r25, Y+6	; 0x06
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	9e 83       	std	Y+6, r25	; 0x06
     b50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b52:	8d 81       	ldd	r24, Y+5	; 0x05
     b54:	9e 81       	ldd	r25, Y+6	; 0x06
     b56:	00 97       	sbiw	r24, 0x00	; 0
     b58:	69 f7       	brne	.-38     	; 0xb34 <lcd_set_4bit+0x988>
     b5a:	14 c0       	rjmp	.+40     	; 0xb84 <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b5c:	6f 81       	ldd	r22, Y+7	; 0x07
     b5e:	78 85       	ldd	r23, Y+8	; 0x08
     b60:	89 85       	ldd	r24, Y+9	; 0x09
     b62:	9a 85       	ldd	r25, Y+10	; 0x0a
     b64:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
     b68:	dc 01       	movw	r26, r24
     b6a:	cb 01       	movw	r24, r22
     b6c:	9e 83       	std	Y+6, r25	; 0x06
     b6e:	8d 83       	std	Y+5, r24	; 0x05
     b70:	8d 81       	ldd	r24, Y+5	; 0x05
     b72:	9e 81       	ldd	r25, Y+6	; 0x06
     b74:	9a 83       	std	Y+2, r25	; 0x02
     b76:	89 83       	std	Y+1, r24	; 0x01
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	9a 81       	ldd	r25, Y+2	; 0x02
     b7c:	01 97       	sbiw	r24, 0x01	; 1
     b7e:	f1 f7       	brne	.-4      	; 0xb7c <lcd_set_4bit+0x9d0>
     b80:	9a 83       	std	Y+2, r25	; 0x02
     b82:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     b84:	a8 e2       	ldi	r26, 0x28	; 40
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	e8 e2       	ldi	r30, 0x28	; 40
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	8b 7f       	andi	r24, 0xFB	; 251
     b90:	8c 93       	st	X, r24

	
}
     b92:	c0 59       	subi	r28, 0x90	; 144
     b94:	df 4f       	sbci	r29, 0xFF	; 255
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	cf 91       	pop	r28
     ba2:	df 91       	pop	r29
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
     ba8:	08 95       	ret

00000baa <lcd_init>:

/*****Function to Initialize LCD*****/
void lcd_init()
{
     baa:	df 93       	push	r29
     bac:	cf 93       	push	r28
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	2e 97       	sbiw	r28, 0x0e	; 14
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	cd bf       	out	0x3d, r28	; 61
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	a0 e8       	ldi	r26, 0x80	; 128
     bc4:	bf e3       	ldi	r27, 0x3F	; 63
     bc6:	8b 87       	std	Y+11, r24	; 0x0b
     bc8:	9c 87       	std	Y+12, r25	; 0x0c
     bca:	ad 87       	std	Y+13, r26	; 0x0d
     bcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bce:	6b 85       	ldd	r22, Y+11	; 0x0b
     bd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd6:	2d ec       	ldi	r18, 0xCD	; 205
     bd8:	3c ec       	ldi	r19, 0xCC	; 204
     bda:	4c e2       	ldi	r20, 0x2C	; 44
     bdc:	55 e4       	ldi	r21, 0x45	; 69
     bde:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
     be2:	dc 01       	movw	r26, r24
     be4:	cb 01       	movw	r24, r22
     be6:	8f 83       	std	Y+7, r24	; 0x07
     be8:	98 87       	std	Y+8, r25	; 0x08
     bea:	a9 87       	std	Y+9, r26	; 0x09
     bec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bee:	6f 81       	ldd	r22, Y+7	; 0x07
     bf0:	78 85       	ldd	r23, Y+8	; 0x08
     bf2:	89 85       	ldd	r24, Y+9	; 0x09
     bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf6:	20 e0       	ldi	r18, 0x00	; 0
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	40 e8       	ldi	r20, 0x80	; 128
     bfc:	5f e3       	ldi	r21, 0x3F	; 63
     bfe:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__ltsf2>
     c02:	88 23       	and	r24, r24
     c04:	2c f4       	brge	.+10     	; 0xc10 <lcd_init+0x66>
		__ticks = 1;
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	9e 83       	std	Y+6, r25	; 0x06
     c0c:	8d 83       	std	Y+5, r24	; 0x05
     c0e:	3f c0       	rjmp	.+126    	; 0xc8e <lcd_init+0xe4>
	else if (__tmp > 65535)
     c10:	6f 81       	ldd	r22, Y+7	; 0x07
     c12:	78 85       	ldd	r23, Y+8	; 0x08
     c14:	89 85       	ldd	r24, Y+9	; 0x09
     c16:	9a 85       	ldd	r25, Y+10	; 0x0a
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	3f ef       	ldi	r19, 0xFF	; 255
     c1c:	4f e7       	ldi	r20, 0x7F	; 127
     c1e:	57 e4       	ldi	r21, 0x47	; 71
     c20:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__gtsf2>
     c24:	18 16       	cp	r1, r24
     c26:	4c f5       	brge	.+82     	; 0xc7a <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c28:	6b 85       	ldd	r22, Y+11	; 0x0b
     c2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     c2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	40 e2       	ldi	r20, 0x20	; 32
     c36:	51 e4       	ldi	r21, 0x41	; 65
     c38:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
     c3c:	dc 01       	movw	r26, r24
     c3e:	cb 01       	movw	r24, r22
     c40:	bc 01       	movw	r22, r24
     c42:	cd 01       	movw	r24, r26
     c44:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
     c48:	dc 01       	movw	r26, r24
     c4a:	cb 01       	movw	r24, r22
     c4c:	9e 83       	std	Y+6, r25	; 0x06
     c4e:	8d 83       	std	Y+5, r24	; 0x05
     c50:	0f c0       	rjmp	.+30     	; 0xc70 <lcd_init+0xc6>
     c52:	84 e1       	ldi	r24, 0x14	; 20
     c54:	91 e0       	ldi	r25, 0x01	; 1
     c56:	9c 83       	std	Y+4, r25	; 0x04
     c58:	8b 83       	std	Y+3, r24	; 0x03
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
     c5c:	9c 81       	ldd	r25, Y+4	; 0x04
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <lcd_init+0xb4>
     c62:	9c 83       	std	Y+4, r25	; 0x04
     c64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c66:	8d 81       	ldd	r24, Y+5	; 0x05
     c68:	9e 81       	ldd	r25, Y+6	; 0x06
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	9e 83       	std	Y+6, r25	; 0x06
     c6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c70:	8d 81       	ldd	r24, Y+5	; 0x05
     c72:	9e 81       	ldd	r25, Y+6	; 0x06
     c74:	00 97       	sbiw	r24, 0x00	; 0
     c76:	69 f7       	brne	.-38     	; 0xc52 <lcd_init+0xa8>
     c78:	14 c0       	rjmp	.+40     	; 0xca2 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c7a:	6f 81       	ldd	r22, Y+7	; 0x07
     c7c:	78 85       	ldd	r23, Y+8	; 0x08
     c7e:	89 85       	ldd	r24, Y+9	; 0x09
     c80:	9a 85       	ldd	r25, Y+10	; 0x0a
     c82:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
     c86:	dc 01       	movw	r26, r24
     c88:	cb 01       	movw	r24, r22
     c8a:	9e 83       	std	Y+6, r25	; 0x06
     c8c:	8d 83       	std	Y+5, r24	; 0x05
     c8e:	8d 81       	ldd	r24, Y+5	; 0x05
     c90:	9e 81       	ldd	r25, Y+6	; 0x06
     c92:	9a 83       	std	Y+2, r25	; 0x02
     c94:	89 83       	std	Y+1, r24	; 0x01
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	9a 81       	ldd	r25, Y+2	; 0x02
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	f1 f7       	brne	.-4      	; 0xc9a <lcd_init+0xf0>
     c9e:	9a 83       	std	Y+2, r25	; 0x02
     ca0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     ca2:	88 e2       	ldi	r24, 0x28	; 40
     ca4:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
	lcd_wr_command(0x01);
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
	lcd_wr_command(0x06);
     cae:	86 e0       	ldi	r24, 0x06	; 6
     cb0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
	lcd_wr_command(0x0E);
     cb4:	8e e0       	ldi	r24, 0x0E	; 14
     cb6:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
	lcd_wr_command(0x80);
     cba:	80 e8       	ldi	r24, 0x80	; 128
     cbc:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
		
}
     cc0:	2e 96       	adiw	r28, 0x0e	; 14
     cc2:	0f b6       	in	r0, 0x3f	; 63
     cc4:	f8 94       	cli
     cc6:	de bf       	out	0x3e, r29	; 62
     cc8:	0f be       	out	0x3f, r0	; 63
     cca:	cd bf       	out	0x3d, r28	; 61
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <lcd_wr_command>:

	 
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
     cda:	6e 97       	sbiw	r28, 0x1e	; 30
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	cd bf       	out	0x3d, r28	; 61
     ce6:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     ce8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cea:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
     cec:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cee:	80 7f       	andi	r24, 0xF0	; 240
     cf0:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     cf2:	a8 e2       	ldi	r26, 0x28	; 40
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e8 e2       	ldi	r30, 0x28	; 40
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	8f 70       	andi	r24, 0x0F	; 15
     cfe:	8c 93       	st	X, r24
	lcd_port |= temp;
     d00:	a8 e2       	ldi	r26, 0x28	; 40
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e8 e2       	ldi	r30, 0x28	; 40
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	90 81       	ld	r25, Z
     d0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d0c:	89 2b       	or	r24, r25
     d0e:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     d10:	a8 e2       	ldi	r26, 0x28	; 40
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e8 e2       	ldi	r30, 0x28	; 40
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	8e 7f       	andi	r24, 0xFE	; 254
     d1c:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     d1e:	a8 e2       	ldi	r26, 0x28	; 40
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e8 e2       	ldi	r30, 0x28	; 40
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	8d 7f       	andi	r24, 0xFD	; 253
     d2a:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     d2c:	a8 e2       	ldi	r26, 0x28	; 40
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e8 e2       	ldi	r30, 0x28	; 40
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	84 60       	ori	r24, 0x04	; 4
     d38:	8c 93       	st	X, r24
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	a0 ea       	ldi	r26, 0xA0	; 160
     d40:	b0 e4       	ldi	r27, 0x40	; 64
     d42:	89 8f       	std	Y+25, r24	; 0x19
     d44:	9a 8f       	std	Y+26, r25	; 0x1a
     d46:	ab 8f       	std	Y+27, r26	; 0x1b
     d48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d4a:	69 8d       	ldd	r22, Y+25	; 0x19
     d4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d50:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d52:	2d ec       	ldi	r18, 0xCD	; 205
     d54:	3c ec       	ldi	r19, 0xCC	; 204
     d56:	4c e2       	ldi	r20, 0x2C	; 44
     d58:	55 e4       	ldi	r21, 0x45	; 69
     d5a:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
     d5e:	dc 01       	movw	r26, r24
     d60:	cb 01       	movw	r24, r22
     d62:	8d 8b       	std	Y+21, r24	; 0x15
     d64:	9e 8b       	std	Y+22, r25	; 0x16
     d66:	af 8b       	std	Y+23, r26	; 0x17
     d68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d6a:	6d 89       	ldd	r22, Y+21	; 0x15
     d6c:	7e 89       	ldd	r23, Y+22	; 0x16
     d6e:	8f 89       	ldd	r24, Y+23	; 0x17
     d70:	98 8d       	ldd	r25, Y+24	; 0x18
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	40 e8       	ldi	r20, 0x80	; 128
     d78:	5f e3       	ldi	r21, 0x3F	; 63
     d7a:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__ltsf2>
     d7e:	88 23       	and	r24, r24
     d80:	2c f4       	brge	.+10     	; 0xd8c <lcd_wr_command+0xba>
		__ticks = 1;
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	9c 8b       	std	Y+20, r25	; 0x14
     d88:	8b 8b       	std	Y+19, r24	; 0x13
     d8a:	3f c0       	rjmp	.+126    	; 0xe0a <lcd_wr_command+0x138>
	else if (__tmp > 65535)
     d8c:	6d 89       	ldd	r22, Y+21	; 0x15
     d8e:	7e 89       	ldd	r23, Y+22	; 0x16
     d90:	8f 89       	ldd	r24, Y+23	; 0x17
     d92:	98 8d       	ldd	r25, Y+24	; 0x18
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	3f ef       	ldi	r19, 0xFF	; 255
     d98:	4f e7       	ldi	r20, 0x7F	; 127
     d9a:	57 e4       	ldi	r21, 0x47	; 71
     d9c:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__gtsf2>
     da0:	18 16       	cp	r1, r24
     da2:	4c f5       	brge	.+82     	; 0xdf6 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     da4:	69 8d       	ldd	r22, Y+25	; 0x19
     da6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     da8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     daa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dac:	20 e0       	ldi	r18, 0x00	; 0
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	40 e2       	ldi	r20, 0x20	; 32
     db2:	51 e4       	ldi	r21, 0x41	; 65
     db4:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
     db8:	dc 01       	movw	r26, r24
     dba:	cb 01       	movw	r24, r22
     dbc:	bc 01       	movw	r22, r24
     dbe:	cd 01       	movw	r24, r26
     dc0:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
     dc4:	dc 01       	movw	r26, r24
     dc6:	cb 01       	movw	r24, r22
     dc8:	9c 8b       	std	Y+20, r25	; 0x14
     dca:	8b 8b       	std	Y+19, r24	; 0x13
     dcc:	0f c0       	rjmp	.+30     	; 0xdec <lcd_wr_command+0x11a>
     dce:	84 e1       	ldi	r24, 0x14	; 20
     dd0:	91 e0       	ldi	r25, 0x01	; 1
     dd2:	9a 8b       	std	Y+18, r25	; 0x12
     dd4:	89 8b       	std	Y+17, r24	; 0x11
     dd6:	89 89       	ldd	r24, Y+17	; 0x11
     dd8:	9a 89       	ldd	r25, Y+18	; 0x12
     dda:	01 97       	sbiw	r24, 0x01	; 1
     ddc:	f1 f7       	brne	.-4      	; 0xdda <lcd_wr_command+0x108>
     dde:	9a 8b       	std	Y+18, r25	; 0x12
     de0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     de2:	8b 89       	ldd	r24, Y+19	; 0x13
     de4:	9c 89       	ldd	r25, Y+20	; 0x14
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	9c 8b       	std	Y+20, r25	; 0x14
     dea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dec:	8b 89       	ldd	r24, Y+19	; 0x13
     dee:	9c 89       	ldd	r25, Y+20	; 0x14
     df0:	00 97       	sbiw	r24, 0x00	; 0
     df2:	69 f7       	brne	.-38     	; 0xdce <lcd_wr_command+0xfc>
     df4:	14 c0       	rjmp	.+40     	; 0xe1e <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     df6:	6d 89       	ldd	r22, Y+21	; 0x15
     df8:	7e 89       	ldd	r23, Y+22	; 0x16
     dfa:	8f 89       	ldd	r24, Y+23	; 0x17
     dfc:	98 8d       	ldd	r25, Y+24	; 0x18
     dfe:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
     e02:	dc 01       	movw	r26, r24
     e04:	cb 01       	movw	r24, r22
     e06:	9c 8b       	std	Y+20, r25	; 0x14
     e08:	8b 8b       	std	Y+19, r24	; 0x13
     e0a:	8b 89       	ldd	r24, Y+19	; 0x13
     e0c:	9c 89       	ldd	r25, Y+20	; 0x14
     e0e:	98 8b       	std	Y+16, r25	; 0x10
     e10:	8f 87       	std	Y+15, r24	; 0x0f
     e12:	8f 85       	ldd	r24, Y+15	; 0x0f
     e14:	98 89       	ldd	r25, Y+16	; 0x10
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	f1 f7       	brne	.-4      	; 0xe16 <lcd_wr_command+0x144>
     e1a:	98 8b       	std	Y+16, r25	; 0x10
     e1c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
     e1e:	a8 e2       	ldi	r26, 0x28	; 40
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e8 e2       	ldi	r30, 0x28	; 40
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	8b 7f       	andi	r24, 0xFB	; 251
     e2a:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
     e2c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e2e:	8f 70       	andi	r24, 0x0F	; 15
     e30:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
     e32:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e34:	82 95       	swap	r24
     e36:	80 7f       	andi	r24, 0xF0	; 240
     e38:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
     e3a:	a8 e2       	ldi	r26, 0x28	; 40
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e8 e2       	ldi	r30, 0x28	; 40
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	8f 70       	andi	r24, 0x0F	; 15
     e46:	8c 93       	st	X, r24
	lcd_port |= cmd;
     e48:	a8 e2       	ldi	r26, 0x28	; 40
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e8 e2       	ldi	r30, 0x28	; 40
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	90 81       	ld	r25, Z
     e52:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e54:	89 2b       	or	r24, r25
     e56:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     e58:	a8 e2       	ldi	r26, 0x28	; 40
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e8 e2       	ldi	r30, 0x28	; 40
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	8e 7f       	andi	r24, 0xFE	; 254
     e64:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     e66:	a8 e2       	ldi	r26, 0x28	; 40
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e8 e2       	ldi	r30, 0x28	; 40
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	8d 7f       	andi	r24, 0xFD	; 253
     e72:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     e74:	a8 e2       	ldi	r26, 0x28	; 40
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e8 e2       	ldi	r30, 0x28	; 40
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	84 60       	ori	r24, 0x04	; 4
     e80:	8c 93       	st	X, r24
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	a0 ea       	ldi	r26, 0xA0	; 160
     e88:	b0 e4       	ldi	r27, 0x40	; 64
     e8a:	8b 87       	std	Y+11, r24	; 0x0b
     e8c:	9c 87       	std	Y+12, r25	; 0x0c
     e8e:	ad 87       	std	Y+13, r26	; 0x0d
     e90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e92:	6b 85       	ldd	r22, Y+11	; 0x0b
     e94:	7c 85       	ldd	r23, Y+12	; 0x0c
     e96:	8d 85       	ldd	r24, Y+13	; 0x0d
     e98:	9e 85       	ldd	r25, Y+14	; 0x0e
     e9a:	2d ec       	ldi	r18, 0xCD	; 205
     e9c:	3c ec       	ldi	r19, 0xCC	; 204
     e9e:	4c e2       	ldi	r20, 0x2C	; 44
     ea0:	55 e4       	ldi	r21, 0x45	; 69
     ea2:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
     ea6:	dc 01       	movw	r26, r24
     ea8:	cb 01       	movw	r24, r22
     eaa:	8f 83       	std	Y+7, r24	; 0x07
     eac:	98 87       	std	Y+8, r25	; 0x08
     eae:	a9 87       	std	Y+9, r26	; 0x09
     eb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     eb2:	6f 81       	ldd	r22, Y+7	; 0x07
     eb4:	78 85       	ldd	r23, Y+8	; 0x08
     eb6:	89 85       	ldd	r24, Y+9	; 0x09
     eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	40 e8       	ldi	r20, 0x80	; 128
     ec0:	5f e3       	ldi	r21, 0x3F	; 63
     ec2:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__ltsf2>
     ec6:	88 23       	and	r24, r24
     ec8:	2c f4       	brge	.+10     	; 0xed4 <lcd_wr_command+0x202>
		__ticks = 1;
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	9e 83       	std	Y+6, r25	; 0x06
     ed0:	8d 83       	std	Y+5, r24	; 0x05
     ed2:	3f c0       	rjmp	.+126    	; 0xf52 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
     ed4:	6f 81       	ldd	r22, Y+7	; 0x07
     ed6:	78 85       	ldd	r23, Y+8	; 0x08
     ed8:	89 85       	ldd	r24, Y+9	; 0x09
     eda:	9a 85       	ldd	r25, Y+10	; 0x0a
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	3f ef       	ldi	r19, 0xFF	; 255
     ee0:	4f e7       	ldi	r20, 0x7F	; 127
     ee2:	57 e4       	ldi	r21, 0x47	; 71
     ee4:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__gtsf2>
     ee8:	18 16       	cp	r1, r24
     eea:	4c f5       	brge	.+82     	; 0xf3e <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eec:	6b 85       	ldd	r22, Y+11	; 0x0b
     eee:	7c 85       	ldd	r23, Y+12	; 0x0c
     ef0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ef2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 e2       	ldi	r20, 0x20	; 32
     efa:	51 e4       	ldi	r21, 0x41	; 65
     efc:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	bc 01       	movw	r22, r24
     f06:	cd 01       	movw	r24, r26
     f08:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
     f0c:	dc 01       	movw	r26, r24
     f0e:	cb 01       	movw	r24, r22
     f10:	9e 83       	std	Y+6, r25	; 0x06
     f12:	8d 83       	std	Y+5, r24	; 0x05
     f14:	0f c0       	rjmp	.+30     	; 0xf34 <lcd_wr_command+0x262>
     f16:	84 e1       	ldi	r24, 0x14	; 20
     f18:	91 e0       	ldi	r25, 0x01	; 1
     f1a:	9c 83       	std	Y+4, r25	; 0x04
     f1c:	8b 83       	std	Y+3, r24	; 0x03
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
     f20:	9c 81       	ldd	r25, Y+4	; 0x04
     f22:	01 97       	sbiw	r24, 0x01	; 1
     f24:	f1 f7       	brne	.-4      	; 0xf22 <lcd_wr_command+0x250>
     f26:	9c 83       	std	Y+4, r25	; 0x04
     f28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f2a:	8d 81       	ldd	r24, Y+5	; 0x05
     f2c:	9e 81       	ldd	r25, Y+6	; 0x06
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	9e 83       	std	Y+6, r25	; 0x06
     f32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f34:	8d 81       	ldd	r24, Y+5	; 0x05
     f36:	9e 81       	ldd	r25, Y+6	; 0x06
     f38:	00 97       	sbiw	r24, 0x00	; 0
     f3a:	69 f7       	brne	.-38     	; 0xf16 <lcd_wr_command+0x244>
     f3c:	14 c0       	rjmp	.+40     	; 0xf66 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f3e:	6f 81       	ldd	r22, Y+7	; 0x07
     f40:	78 85       	ldd	r23, Y+8	; 0x08
     f42:	89 85       	ldd	r24, Y+9	; 0x09
     f44:	9a 85       	ldd	r25, Y+10	; 0x0a
     f46:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	9e 83       	std	Y+6, r25	; 0x06
     f50:	8d 83       	std	Y+5, r24	; 0x05
     f52:	8d 81       	ldd	r24, Y+5	; 0x05
     f54:	9e 81       	ldd	r25, Y+6	; 0x06
     f56:	9a 83       	std	Y+2, r25	; 0x02
     f58:	89 83       	std	Y+1, r24	; 0x01
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	9a 81       	ldd	r25, Y+2	; 0x02
     f5e:	01 97       	sbiw	r24, 0x01	; 1
     f60:	f1 f7       	brne	.-4      	; 0xf5e <lcd_wr_command+0x28c>
     f62:	9a 83       	std	Y+2, r25	; 0x02
     f64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
     f66:	a8 e2       	ldi	r26, 0x28	; 40
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e8 e2       	ldi	r30, 0x28	; 40
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	8b 7f       	andi	r24, 0xFB	; 251
     f72:	8c 93       	st	X, r24
}
     f74:	6e 96       	adiw	r28, 0x1e	; 30
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	f8 94       	cli
     f7a:	de bf       	out	0x3e, r29	; 62
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	cd bf       	out	0x3d, r28	; 61
     f80:	cf 91       	pop	r28
     f82:	df 91       	pop	r29
     f84:	08 95       	ret

00000f86 <lcd_wr_char>:

/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
     f86:	df 93       	push	r29
     f88:	cf 93       	push	r28
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	6e 97       	sbiw	r28, 0x1e	; 30
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	cd bf       	out	0x3d, r28	; 61
     f9a:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
     f9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f9e:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
     fa0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fa2:	80 7f       	andi	r24, 0xF0	; 240
     fa4:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     fa6:	a8 e2       	ldi	r26, 0x28	; 40
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e8 e2       	ldi	r30, 0x28	; 40
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	8f 70       	andi	r24, 0x0F	; 15
     fb2:	8c 93       	st	X, r24
	lcd_port |= temp;
     fb4:	a8 e2       	ldi	r26, 0x28	; 40
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e8 e2       	ldi	r30, 0x28	; 40
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	90 81       	ld	r25, Z
     fbe:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fc0:	89 2b       	or	r24, r25
     fc2:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
     fc4:	a8 e2       	ldi	r26, 0x28	; 40
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e8 e2       	ldi	r30, 0x28	; 40
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	81 60       	ori	r24, 0x01	; 1
     fd0:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     fd2:	a8 e2       	ldi	r26, 0x28	; 40
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e8 e2       	ldi	r30, 0x28	; 40
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	8d 7f       	andi	r24, 0xFD	; 253
     fde:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     fe0:	a8 e2       	ldi	r26, 0x28	; 40
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e8 e2       	ldi	r30, 0x28	; 40
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	84 60       	ori	r24, 0x04	; 4
     fec:	8c 93       	st	X, r24
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	a0 ea       	ldi	r26, 0xA0	; 160
     ff4:	b0 e4       	ldi	r27, 0x40	; 64
     ff6:	89 8f       	std	Y+25, r24	; 0x19
     ff8:	9a 8f       	std	Y+26, r25	; 0x1a
     ffa:	ab 8f       	std	Y+27, r26	; 0x1b
     ffc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ffe:	69 8d       	ldd	r22, Y+25	; 0x19
    1000:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1002:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1004:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1006:	2d ec       	ldi	r18, 0xCD	; 205
    1008:	3c ec       	ldi	r19, 0xCC	; 204
    100a:	4c e2       	ldi	r20, 0x2C	; 44
    100c:	55 e4       	ldi	r21, 0x45	; 69
    100e:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	8d 8b       	std	Y+21, r24	; 0x15
    1018:	9e 8b       	std	Y+22, r25	; 0x16
    101a:	af 8b       	std	Y+23, r26	; 0x17
    101c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    101e:	6d 89       	ldd	r22, Y+21	; 0x15
    1020:	7e 89       	ldd	r23, Y+22	; 0x16
    1022:	8f 89       	ldd	r24, Y+23	; 0x17
    1024:	98 8d       	ldd	r25, Y+24	; 0x18
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	40 e8       	ldi	r20, 0x80	; 128
    102c:	5f e3       	ldi	r21, 0x3F	; 63
    102e:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__ltsf2>
    1032:	88 23       	and	r24, r24
    1034:	2c f4       	brge	.+10     	; 0x1040 <lcd_wr_char+0xba>
		__ticks = 1;
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	9c 8b       	std	Y+20, r25	; 0x14
    103c:	8b 8b       	std	Y+19, r24	; 0x13
    103e:	3f c0       	rjmp	.+126    	; 0x10be <lcd_wr_char+0x138>
	else if (__tmp > 65535)
    1040:	6d 89       	ldd	r22, Y+21	; 0x15
    1042:	7e 89       	ldd	r23, Y+22	; 0x16
    1044:	8f 89       	ldd	r24, Y+23	; 0x17
    1046:	98 8d       	ldd	r25, Y+24	; 0x18
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	3f ef       	ldi	r19, 0xFF	; 255
    104c:	4f e7       	ldi	r20, 0x7F	; 127
    104e:	57 e4       	ldi	r21, 0x47	; 71
    1050:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__gtsf2>
    1054:	18 16       	cp	r1, r24
    1056:	4c f5       	brge	.+82     	; 0x10aa <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1058:	69 8d       	ldd	r22, Y+25	; 0x19
    105a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    105c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    105e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	40 e2       	ldi	r20, 0x20	; 32
    1066:	51 e4       	ldi	r21, 0x41	; 65
    1068:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	bc 01       	movw	r22, r24
    1072:	cd 01       	movw	r24, r26
    1074:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    1078:	dc 01       	movw	r26, r24
    107a:	cb 01       	movw	r24, r22
    107c:	9c 8b       	std	Y+20, r25	; 0x14
    107e:	8b 8b       	std	Y+19, r24	; 0x13
    1080:	0f c0       	rjmp	.+30     	; 0x10a0 <lcd_wr_char+0x11a>
    1082:	84 e1       	ldi	r24, 0x14	; 20
    1084:	91 e0       	ldi	r25, 0x01	; 1
    1086:	9a 8b       	std	Y+18, r25	; 0x12
    1088:	89 8b       	std	Y+17, r24	; 0x11
    108a:	89 89       	ldd	r24, Y+17	; 0x11
    108c:	9a 89       	ldd	r25, Y+18	; 0x12
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	f1 f7       	brne	.-4      	; 0x108e <lcd_wr_char+0x108>
    1092:	9a 8b       	std	Y+18, r25	; 0x12
    1094:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1096:	8b 89       	ldd	r24, Y+19	; 0x13
    1098:	9c 89       	ldd	r25, Y+20	; 0x14
    109a:	01 97       	sbiw	r24, 0x01	; 1
    109c:	9c 8b       	std	Y+20, r25	; 0x14
    109e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10a0:	8b 89       	ldd	r24, Y+19	; 0x13
    10a2:	9c 89       	ldd	r25, Y+20	; 0x14
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	69 f7       	brne	.-38     	; 0x1082 <lcd_wr_char+0xfc>
    10a8:	14 c0       	rjmp	.+40     	; 0x10d2 <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10aa:	6d 89       	ldd	r22, Y+21	; 0x15
    10ac:	7e 89       	ldd	r23, Y+22	; 0x16
    10ae:	8f 89       	ldd	r24, Y+23	; 0x17
    10b0:	98 8d       	ldd	r25, Y+24	; 0x18
    10b2:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	9c 8b       	std	Y+20, r25	; 0x14
    10bc:	8b 8b       	std	Y+19, r24	; 0x13
    10be:	8b 89       	ldd	r24, Y+19	; 0x13
    10c0:	9c 89       	ldd	r25, Y+20	; 0x14
    10c2:	98 8b       	std	Y+16, r25	; 0x10
    10c4:	8f 87       	std	Y+15, r24	; 0x0f
    10c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    10c8:	98 89       	ldd	r25, Y+16	; 0x10
    10ca:	01 97       	sbiw	r24, 0x01	; 1
    10cc:	f1 f7       	brne	.-4      	; 0x10ca <lcd_wr_char+0x144>
    10ce:	98 8b       	std	Y+16, r25	; 0x10
    10d0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    10d2:	a8 e2       	ldi	r26, 0x28	; 40
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e8 e2       	ldi	r30, 0x28	; 40
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	8b 7f       	andi	r24, 0xFB	; 251
    10de:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    10e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10e2:	8f 70       	andi	r24, 0x0F	; 15
    10e4:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    10e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10e8:	82 95       	swap	r24
    10ea:	80 7f       	andi	r24, 0xF0	; 240
    10ec:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    10ee:	a8 e2       	ldi	r26, 0x28	; 40
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e8 e2       	ldi	r30, 0x28	; 40
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	8f 70       	andi	r24, 0x0F	; 15
    10fa:	8c 93       	st	X, r24
	lcd_port |= letter;
    10fc:	a8 e2       	ldi	r26, 0x28	; 40
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e8 e2       	ldi	r30, 0x28	; 40
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	90 81       	ld	r25, Z
    1106:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1108:	89 2b       	or	r24, r25
    110a:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    110c:	a8 e2       	ldi	r26, 0x28	; 40
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e8 e2       	ldi	r30, 0x28	; 40
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	81 60       	ori	r24, 0x01	; 1
    1118:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    111a:	a8 e2       	ldi	r26, 0x28	; 40
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e8 e2       	ldi	r30, 0x28	; 40
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	8d 7f       	andi	r24, 0xFD	; 253
    1126:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1128:	a8 e2       	ldi	r26, 0x28	; 40
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e8 e2       	ldi	r30, 0x28	; 40
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	84 60       	ori	r24, 0x04	; 4
    1134:	8c 93       	st	X, r24
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	a0 ea       	ldi	r26, 0xA0	; 160
    113c:	b0 e4       	ldi	r27, 0x40	; 64
    113e:	8b 87       	std	Y+11, r24	; 0x0b
    1140:	9c 87       	std	Y+12, r25	; 0x0c
    1142:	ad 87       	std	Y+13, r26	; 0x0d
    1144:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1146:	6b 85       	ldd	r22, Y+11	; 0x0b
    1148:	7c 85       	ldd	r23, Y+12	; 0x0c
    114a:	8d 85       	ldd	r24, Y+13	; 0x0d
    114c:	9e 85       	ldd	r25, Y+14	; 0x0e
    114e:	2d ec       	ldi	r18, 0xCD	; 205
    1150:	3c ec       	ldi	r19, 0xCC	; 204
    1152:	4c e2       	ldi	r20, 0x2C	; 44
    1154:	55 e4       	ldi	r21, 0x45	; 69
    1156:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	8f 83       	std	Y+7, r24	; 0x07
    1160:	98 87       	std	Y+8, r25	; 0x08
    1162:	a9 87       	std	Y+9, r26	; 0x09
    1164:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1166:	6f 81       	ldd	r22, Y+7	; 0x07
    1168:	78 85       	ldd	r23, Y+8	; 0x08
    116a:	89 85       	ldd	r24, Y+9	; 0x09
    116c:	9a 85       	ldd	r25, Y+10	; 0x0a
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	40 e8       	ldi	r20, 0x80	; 128
    1174:	5f e3       	ldi	r21, 0x3F	; 63
    1176:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__ltsf2>
    117a:	88 23       	and	r24, r24
    117c:	2c f4       	brge	.+10     	; 0x1188 <lcd_wr_char+0x202>
		__ticks = 1;
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	9e 83       	std	Y+6, r25	; 0x06
    1184:	8d 83       	std	Y+5, r24	; 0x05
    1186:	3f c0       	rjmp	.+126    	; 0x1206 <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    1188:	6f 81       	ldd	r22, Y+7	; 0x07
    118a:	78 85       	ldd	r23, Y+8	; 0x08
    118c:	89 85       	ldd	r24, Y+9	; 0x09
    118e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	3f ef       	ldi	r19, 0xFF	; 255
    1194:	4f e7       	ldi	r20, 0x7F	; 127
    1196:	57 e4       	ldi	r21, 0x47	; 71
    1198:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__gtsf2>
    119c:	18 16       	cp	r1, r24
    119e:	4c f5       	brge	.+82     	; 0x11f2 <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    11a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    11a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	40 e2       	ldi	r20, 0x20	; 32
    11ae:	51 e4       	ldi	r21, 0x41	; 65
    11b0:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	bc 01       	movw	r22, r24
    11ba:	cd 01       	movw	r24, r26
    11bc:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    11c0:	dc 01       	movw	r26, r24
    11c2:	cb 01       	movw	r24, r22
    11c4:	9e 83       	std	Y+6, r25	; 0x06
    11c6:	8d 83       	std	Y+5, r24	; 0x05
    11c8:	0f c0       	rjmp	.+30     	; 0x11e8 <lcd_wr_char+0x262>
    11ca:	84 e1       	ldi	r24, 0x14	; 20
    11cc:	91 e0       	ldi	r25, 0x01	; 1
    11ce:	9c 83       	std	Y+4, r25	; 0x04
    11d0:	8b 83       	std	Y+3, r24	; 0x03
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	9c 81       	ldd	r25, Y+4	; 0x04
    11d6:	01 97       	sbiw	r24, 0x01	; 1
    11d8:	f1 f7       	brne	.-4      	; 0x11d6 <lcd_wr_char+0x250>
    11da:	9c 83       	std	Y+4, r25	; 0x04
    11dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11de:	8d 81       	ldd	r24, Y+5	; 0x05
    11e0:	9e 81       	ldd	r25, Y+6	; 0x06
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	9e 83       	std	Y+6, r25	; 0x06
    11e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ea:	9e 81       	ldd	r25, Y+6	; 0x06
    11ec:	00 97       	sbiw	r24, 0x00	; 0
    11ee:	69 f7       	brne	.-38     	; 0x11ca <lcd_wr_char+0x244>
    11f0:	14 c0       	rjmp	.+40     	; 0x121a <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11f2:	6f 81       	ldd	r22, Y+7	; 0x07
    11f4:	78 85       	ldd	r23, Y+8	; 0x08
    11f6:	89 85       	ldd	r24, Y+9	; 0x09
    11f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11fa:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    11fe:	dc 01       	movw	r26, r24
    1200:	cb 01       	movw	r24, r22
    1202:	9e 83       	std	Y+6, r25	; 0x06
    1204:	8d 83       	std	Y+5, r24	; 0x05
    1206:	8d 81       	ldd	r24, Y+5	; 0x05
    1208:	9e 81       	ldd	r25, Y+6	; 0x06
    120a:	9a 83       	std	Y+2, r25	; 0x02
    120c:	89 83       	std	Y+1, r24	; 0x01
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	9a 81       	ldd	r25, Y+2	; 0x02
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	f1 f7       	brne	.-4      	; 0x1212 <lcd_wr_char+0x28c>
    1216:	9a 83       	std	Y+2, r25	; 0x02
    1218:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    121a:	a8 e2       	ldi	r26, 0x28	; 40
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e8 e2       	ldi	r30, 0x28	; 40
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	8b 7f       	andi	r24, 0xFB	; 251
    1226:	8c 93       	st	X, r24
}
    1228:	6e 96       	adiw	r28, 0x1e	; 30
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <lcd_home>:


void lcd_home()
{
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    1242:	80 e8       	ldi	r24, 0x80	; 128
    1244:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
}
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	0f 92       	push	r0
    1254:	0f 92       	push	r0
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	9a 83       	std	Y+2, r25	; 0x02
    125c:	89 83       	std	Y+1, r24	; 0x01
    125e:	0a c0       	rjmp	.+20     	; 0x1274 <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    1260:	e9 81       	ldd	r30, Y+1	; 0x01
    1262:	fa 81       	ldd	r31, Y+2	; 0x02
    1264:	80 81       	ld	r24, Z
    1266:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
		str++;
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	9a 81       	ldd	r25, Y+2	; 0x02
    126e:	01 96       	adiw	r24, 0x01	; 1
    1270:	9a 83       	std	Y+2, r25	; 0x02
    1272:	89 83       	std	Y+1, r24	; 0x01


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
    1274:	e9 81       	ldd	r30, Y+1	; 0x01
    1276:	fa 81       	ldd	r31, Y+2	; 0x02
    1278:	80 81       	ld	r24, Z
    127a:	88 23       	and	r24, r24
    127c:	89 f7       	brne	.-30     	; 0x1260 <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret

00001288 <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	00 d0       	rcall	.+0      	; 0x128e <lcd_cursor+0x6>
    128e:	0f 92       	push	r0
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
    1294:	89 83       	std	Y+1, r24	; 0x01
    1296:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	3c 83       	std	Y+4, r19	; 0x04
    12a0:	2b 83       	std	Y+3, r18	; 0x03
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	9c 81       	ldd	r25, Y+4	; 0x04
    12a6:	82 30       	cpi	r24, 0x02	; 2
    12a8:	91 05       	cpc	r25, r1
    12aa:	d9 f0       	breq	.+54     	; 0x12e2 <lcd_cursor+0x5a>
    12ac:	2b 81       	ldd	r18, Y+3	; 0x03
    12ae:	3c 81       	ldd	r19, Y+4	; 0x04
    12b0:	23 30       	cpi	r18, 0x03	; 3
    12b2:	31 05       	cpc	r19, r1
    12b4:	34 f4       	brge	.+12     	; 0x12c2 <lcd_cursor+0x3a>
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ba:	81 30       	cpi	r24, 0x01	; 1
    12bc:	91 05       	cpc	r25, r1
    12be:	61 f0       	breq	.+24     	; 0x12d8 <lcd_cursor+0x50>
    12c0:	1e c0       	rjmp	.+60     	; 0x12fe <lcd_cursor+0x76>
    12c2:	2b 81       	ldd	r18, Y+3	; 0x03
    12c4:	3c 81       	ldd	r19, Y+4	; 0x04
    12c6:	23 30       	cpi	r18, 0x03	; 3
    12c8:	31 05       	cpc	r19, r1
    12ca:	81 f0       	breq	.+32     	; 0x12ec <lcd_cursor+0x64>
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	9c 81       	ldd	r25, Y+4	; 0x04
    12d0:	84 30       	cpi	r24, 0x04	; 4
    12d2:	91 05       	cpc	r25, r1
    12d4:	81 f0       	breq	.+32     	; 0x12f6 <lcd_cursor+0x6e>
    12d6:	13 c0       	rjmp	.+38     	; 0x12fe <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	81 58       	subi	r24, 0x81	; 129
    12dc:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
    12e0:	0e c0       	rjmp	.+28     	; 0x12fe <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	81 54       	subi	r24, 0x41	; 65
    12e6:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
    12ea:	09 c0       	rjmp	.+18     	; 0x12fe <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	8d 56       	subi	r24, 0x6D	; 109
    12f0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
    12f4:	04 c0       	rjmp	.+8      	; 0x12fe <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	8d 52       	subi	r24, 0x2D	; 45
    12fa:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
		default: break;
	}
}
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <lcd_print>:

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
    1314:	27 97       	sbiw	r28, 0x07	; 7
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
    131a:	de bf       	out	0x3e, r29	; 62
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	cd bf       	out	0x3d, r28	; 61
    1320:	8a 83       	std	Y+2, r24	; 0x02
    1322:	6b 83       	std	Y+3, r22	; 0x03
    1324:	5d 83       	std	Y+5, r21	; 0x05
    1326:	4c 83       	std	Y+4, r20	; 0x04
    1328:	3f 83       	std	Y+7, r19	; 0x07
    132a:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    132c:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	88 23       	and	r24, r24
    1332:	19 f0       	breq	.+6      	; 0x133a <lcd_print+0x2e>
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	88 23       	and	r24, r24
    1338:	19 f4       	brne	.+6      	; 0x1340 <lcd_print+0x34>
	{
		lcd_home();
    133a:	0e 94 1d 09 	call	0x123a	; 0x123a <lcd_home>
    133e:	04 c0       	rjmp	.+8      	; 0x1348 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	6b 81       	ldd	r22, Y+3	; 0x03
    1344:	0e 94 44 09 	call	0x1288	; 0x1288 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    1348:	8e 81       	ldd	r24, Y+6	; 0x06
    134a:	9f 81       	ldd	r25, Y+7	; 0x07
    134c:	85 30       	cpi	r24, 0x05	; 5
    134e:	91 05       	cpc	r25, r1
    1350:	19 f0       	breq	.+6      	; 0x1358 <lcd_print+0x4c>
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	a9 f4       	brne	.+42     	; 0x1382 <lcd_print+0x76>
	{
		million=value/10000+48;
    1358:	8c 81       	ldd	r24, Y+4	; 0x04
    135a:	9d 81       	ldd	r25, Y+5	; 0x05
    135c:	20 e1       	ldi	r18, 0x10	; 16
    135e:	37 e2       	ldi	r19, 0x27	; 39
    1360:	b9 01       	movw	r22, r18
    1362:	0e 94 06 23 	call	0x460c	; 0x460c <__udivmodhi4>
    1366:	cb 01       	movw	r24, r22
    1368:	c0 96       	adiw	r24, 0x30	; 48
    136a:	90 93 09 03 	sts	0x0309, r25
    136e:	80 93 08 03 	sts	0x0308, r24
		lcd_wr_char(million);
    1372:	80 91 08 03 	lds	r24, 0x0308
    1376:	90 91 09 03 	lds	r25, 0x0309
    137a:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
		flag=1;
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    1382:	8e 81       	ldd	r24, Y+6	; 0x06
    1384:	9f 81       	ldd	r25, Y+7	; 0x07
    1386:	84 30       	cpi	r24, 0x04	; 4
    1388:	91 05       	cpc	r25, r1
    138a:	19 f0       	breq	.+6      	; 0x1392 <lcd_print+0x86>
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	11 f5       	brne	.+68     	; 0x13d6 <lcd_print+0xca>
	{
		temp = value/1000;
    1392:	8c 81       	ldd	r24, Y+4	; 0x04
    1394:	9d 81       	ldd	r25, Y+5	; 0x05
    1396:	28 ee       	ldi	r18, 0xE8	; 232
    1398:	33 e0       	ldi	r19, 0x03	; 3
    139a:	b9 01       	movw	r22, r18
    139c:	0e 94 06 23 	call	0x460c	; 0x460c <__udivmodhi4>
    13a0:	cb 01       	movw	r24, r22
    13a2:	90 93 12 03 	sts	0x0312, r25
    13a6:	80 93 11 03 	sts	0x0311, r24
		thousand = temp%10 + 48;
    13aa:	80 91 11 03 	lds	r24, 0x0311
    13ae:	90 91 12 03 	lds	r25, 0x0312
    13b2:	2a e0       	ldi	r18, 0x0A	; 10
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	b9 01       	movw	r22, r18
    13b8:	0e 94 06 23 	call	0x460c	; 0x460c <__udivmodhi4>
    13bc:	c0 96       	adiw	r24, 0x30	; 48
    13be:	90 93 27 03 	sts	0x0327, r25
    13c2:	80 93 26 03 	sts	0x0326, r24
		lcd_wr_char(thousand);
    13c6:	80 91 26 03 	lds	r24, 0x0326
    13ca:	90 91 27 03 	lds	r25, 0x0327
    13ce:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
		flag=1;
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    13d6:	8e 81       	ldd	r24, Y+6	; 0x06
    13d8:	9f 81       	ldd	r25, Y+7	; 0x07
    13da:	83 30       	cpi	r24, 0x03	; 3
    13dc:	91 05       	cpc	r25, r1
    13de:	19 f0       	breq	.+6      	; 0x13e6 <lcd_print+0xda>
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	81 30       	cpi	r24, 0x01	; 1
    13e4:	11 f5       	brne	.+68     	; 0x142a <lcd_print+0x11e>
	{
		temp = value/100;
    13e6:	8c 81       	ldd	r24, Y+4	; 0x04
    13e8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ea:	24 e6       	ldi	r18, 0x64	; 100
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	b9 01       	movw	r22, r18
    13f0:	0e 94 06 23 	call	0x460c	; 0x460c <__udivmodhi4>
    13f4:	cb 01       	movw	r24, r22
    13f6:	90 93 12 03 	sts	0x0312, r25
    13fa:	80 93 11 03 	sts	0x0311, r24
		hundred = temp%10 + 48;
    13fe:	80 91 11 03 	lds	r24, 0x0311
    1402:	90 91 12 03 	lds	r25, 0x0312
    1406:	2a e0       	ldi	r18, 0x0A	; 10
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	b9 01       	movw	r22, r18
    140c:	0e 94 06 23 	call	0x460c	; 0x460c <__udivmodhi4>
    1410:	c0 96       	adiw	r24, 0x30	; 48
    1412:	90 93 20 03 	sts	0x0320, r25
    1416:	80 93 1f 03 	sts	0x031F, r24
		lcd_wr_char(hundred);
    141a:	80 91 1f 03 	lds	r24, 0x031F
    141e:	90 91 20 03 	lds	r25, 0x0320
    1422:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
		flag=1;
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    142a:	8e 81       	ldd	r24, Y+6	; 0x06
    142c:	9f 81       	ldd	r25, Y+7	; 0x07
    142e:	82 30       	cpi	r24, 0x02	; 2
    1430:	91 05       	cpc	r25, r1
    1432:	19 f0       	breq	.+6      	; 0x143a <lcd_print+0x12e>
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	81 30       	cpi	r24, 0x01	; 1
    1438:	11 f5       	brne	.+68     	; 0x147e <lcd_print+0x172>
	{
		temp = value/10;
    143a:	8c 81       	ldd	r24, Y+4	; 0x04
    143c:	9d 81       	ldd	r25, Y+5	; 0x05
    143e:	2a e0       	ldi	r18, 0x0A	; 10
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	b9 01       	movw	r22, r18
    1444:	0e 94 06 23 	call	0x460c	; 0x460c <__udivmodhi4>
    1448:	cb 01       	movw	r24, r22
    144a:	90 93 12 03 	sts	0x0312, r25
    144e:	80 93 11 03 	sts	0x0311, r24
		tens = temp%10 + 48;
    1452:	80 91 11 03 	lds	r24, 0x0311
    1456:	90 91 12 03 	lds	r25, 0x0312
    145a:	2a e0       	ldi	r18, 0x0A	; 10
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	b9 01       	movw	r22, r18
    1460:	0e 94 06 23 	call	0x460c	; 0x460c <__udivmodhi4>
    1464:	c0 96       	adiw	r24, 0x30	; 48
    1466:	90 93 1d 03 	sts	0x031D, r25
    146a:	80 93 1c 03 	sts	0x031C, r24
		lcd_wr_char(tens);
    146e:	80 91 1c 03 	lds	r24, 0x031C
    1472:	90 91 1d 03 	lds	r25, 0x031D
    1476:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
		flag=1;
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    147e:	8e 81       	ldd	r24, Y+6	; 0x06
    1480:	9f 81       	ldd	r25, Y+7	; 0x07
    1482:	81 30       	cpi	r24, 0x01	; 1
    1484:	91 05       	cpc	r25, r1
    1486:	19 f0       	breq	.+6      	; 0x148e <lcd_print+0x182>
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	81 30       	cpi	r24, 0x01	; 1
    148c:	91 f4       	brne	.+36     	; 0x14b2 <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    148e:	8c 81       	ldd	r24, Y+4	; 0x04
    1490:	9d 81       	ldd	r25, Y+5	; 0x05
    1492:	2a e0       	ldi	r18, 0x0A	; 10
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	b9 01       	movw	r22, r18
    1498:	0e 94 06 23 	call	0x460c	; 0x460c <__udivmodhi4>
    149c:	c0 96       	adiw	r24, 0x30	; 48
    149e:	90 93 25 03 	sts	0x0325, r25
    14a2:	80 93 24 03 	sts	0x0324, r24
		lcd_wr_char(unit);
    14a6:	80 91 24 03 	lds	r24, 0x0324
    14aa:	90 91 25 03 	lds	r25, 0x0325
    14ae:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
	}
	if(digits>5)
    14b2:	8e 81       	ldd	r24, Y+6	; 0x06
    14b4:	9f 81       	ldd	r25, Y+7	; 0x07
    14b6:	86 30       	cpi	r24, 0x06	; 6
    14b8:	91 05       	cpc	r25, r1
    14ba:	1c f0       	brlt	.+6      	; 0x14c2 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    14bc:	85 e4       	ldi	r24, 0x45	; 69
    14be:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
	}
	
}
    14c2:	27 96       	adiw	r28, 0x07	; 7
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	de bf       	out	0x3e, r29	; 62
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	cd bf       	out	0x3d, r28	; 61
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	08 95       	ret

000014d4 <INIT_PORTS>:
//unsigned char data;

int scr,scl;

void INIT_PORTS()
{
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
	DDRA=0x0F;
    14dc:	e1 e2       	ldi	r30, 0x21	; 33
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	8f e0       	ldi	r24, 0x0F	; 15
    14e2:	80 83       	st	Z, r24
	PORTA=0x00;				//INITIALIZE
    14e4:	e2 e2       	ldi	r30, 0x22	; 34
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	10 82       	st	Z, r1
	DDRE=0xCF;
    14ea:	ed e2       	ldi	r30, 0x2D	; 45
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	8f ec       	ldi	r24, 0xCF	; 207
    14f0:	80 83       	st	Z, r24
	PORTE=0xFF;	
    14f2:	ee e2       	ldi	r30, 0x2E	; 46
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	8f ef       	ldi	r24, 0xFF	; 255
    14f8:	80 83       	st	Z, r24
	DDRL=0x18;
    14fa:	ea e0       	ldi	r30, 0x0A	; 10
    14fc:	f1 e0       	ldi	r31, 0x01	; 1
    14fe:	88 e1       	ldi	r24, 0x18	; 24
    1500:	80 83       	st	Z, r24
	PORTL=0x18;
    1502:	eb e0       	ldi	r30, 0x0B	; 11
    1504:	f1 e0       	ldi	r31, 0x01	; 1
    1506:	88 e1       	ldi	r24, 0x18	; 24
    1508:	80 83       	st	Z, r24
	DDRC=0x00; 				// buzzer off
    150a:	e7 e2       	ldi	r30, 0x27	; 39
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	10 82       	st	Z, r1
	PORTC =0x00;
    1510:	e8 e2       	ldi	r30, 0x28	; 40
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	10 82       	st	Z, r1
	TCCR5B =0x00;
    1516:	e1 e2       	ldi	r30, 0x21	; 33
    1518:	f1 e0       	ldi	r31, 0x01	; 1
    151a:	10 82       	st	Z, r1
	TCCR5A = 0xA1;
    151c:	e0 e2       	ldi	r30, 0x20	; 32
    151e:	f1 e0       	ldi	r31, 0x01	; 1
    1520:	81 ea       	ldi	r24, 0xA1	; 161
    1522:	80 83       	st	Z, r24
	TCCR5B=0x0B;
    1524:	e1 e2       	ldi	r30, 0x21	; 33
    1526:	f1 e0       	ldi	r31, 0x01	; 1
    1528:	8b e0       	ldi	r24, 0x0B	; 11
    152a:	80 83       	st	Z, r24

}
    152c:	cf 91       	pop	r28
    152e:	df 91       	pop	r29
    1530:	08 95       	ret

00001532 <INIT_PORTS_ROTATE>:


void INIT_PORTS_ROTATE()
{
    1532:	df 93       	push	r29
    1534:	cf 93       	push	r28
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
	DDRA=0x0F;
    153a:	e1 e2       	ldi	r30, 0x21	; 33
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	8f e0       	ldi	r24, 0x0F	; 15
    1540:	80 83       	st	Z, r24
	PORTA=0x00;				//INITIALIZE
    1542:	e2 e2       	ldi	r30, 0x22	; 34
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	10 82       	st	Z, r1
	DDRE=0xCF;
    1548:	ed e2       	ldi	r30, 0x2D	; 45
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	8f ec       	ldi	r24, 0xCF	; 207
    154e:	80 83       	st	Z, r24
	PORTE=0xFF;	
    1550:	ee e2       	ldi	r30, 0x2E	; 46
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	8f ef       	ldi	r24, 0xFF	; 255
    1556:	80 83       	st	Z, r24
	DDRL=0x18;
    1558:	ea e0       	ldi	r30, 0x0A	; 10
    155a:	f1 e0       	ldi	r31, 0x01	; 1
    155c:	88 e1       	ldi	r24, 0x18	; 24
    155e:	80 83       	st	Z, r24
	PORTL=0x18;
    1560:	eb e0       	ldi	r30, 0x0B	; 11
    1562:	f1 e0       	ldi	r31, 0x01	; 1
    1564:	88 e1       	ldi	r24, 0x18	; 24
    1566:	80 83       	st	Z, r24

}
    1568:	cf 91       	pop	r28
    156a:	df 91       	pop	r29
    156c:	08 95       	ret

0000156e <uart3_init>:
// actual baud rate:9600 (0.0%)
// char size: 8 bit
// parity: Disabled

void uart3_init(void)
{
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
 	UCSR3B = 0x00; 			//disable while setting baud rate
    1576:	e1 e3       	ldi	r30, 0x31	; 49
    1578:	f1 e0       	ldi	r31, 0x01	; 1
    157a:	10 82       	st	Z, r1
 	UCSR3A = 0x00;
    157c:	e0 e3       	ldi	r30, 0x30	; 48
    157e:	f1 e0       	ldi	r31, 0x01	; 1
    1580:	10 82       	st	Z, r1
 	UCSR3C = 0x06;
    1582:	e2 e3       	ldi	r30, 0x32	; 50
    1584:	f1 e0       	ldi	r31, 0x01	; 1
    1586:	86 e0       	ldi	r24, 0x06	; 6
    1588:	80 83       	st	Z, r24
 	UBRR3L = 0x5F; 			//set baud rate lo
    158a:	e4 e3       	ldi	r30, 0x34	; 52
    158c:	f1 e0       	ldi	r31, 0x01	; 1
    158e:	8f e5       	ldi	r24, 0x5F	; 95
    1590:	80 83       	st	Z, r24
 	UBRR3H = 0x00; 			//set baud rate hi
    1592:	e5 e3       	ldi	r30, 0x35	; 53
    1594:	f1 e0       	ldi	r31, 0x01	; 1
    1596:	10 82       	st	Z, r1
 	UCSR3B = 0x98;
    1598:	e1 e3       	ldi	r30, 0x31	; 49
    159a:	f1 e0       	ldi	r31, 0x01	; 1
    159c:	88 e9       	ldi	r24, 0x98	; 152
    159e:	80 83       	st	Z, r24
}
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	08 95       	ret

000015a6 <__vector_54>:


SIGNAL(SIG_USART3_RECV)
{
    15a6:	1f 92       	push	r1
    15a8:	0f 92       	push	r0
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	0f 92       	push	r0
    15ae:	00 90 5b 00 	lds	r0, 0x005B
    15b2:	0f 92       	push	r0
    15b4:	11 24       	eor	r1, r1
    15b6:	8f 93       	push	r24
    15b8:	ef 93       	push	r30
    15ba:	ff 93       	push	r31
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62

	data = UDR3; 			//making copy of data from UDR3 in data variable
    15c4:	e6 e3       	ldi	r30, 0x36	; 54
    15c6:	f1 e0       	ldi	r31, 0x01	; 1
    15c8:	80 81       	ld	r24, Z
    15ca:	80 93 1e 03 	sts	0x031E, r24
	
}
    15ce:	cf 91       	pop	r28
    15d0:	df 91       	pop	r29
    15d2:	ff 91       	pop	r31
    15d4:	ef 91       	pop	r30
    15d6:	8f 91       	pop	r24
    15d8:	0f 90       	pop	r0
    15da:	00 92 5b 00 	sts	0x005B, r0
    15de:	0f 90       	pop	r0
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	0f 90       	pop	r0
    15e4:	1f 90       	pop	r1
    15e6:	18 95       	reti

000015e8 <__vector_56>:
SIGNAL(SIG_USART3_TRANS)
{
    15e8:	1f 92       	push	r1
    15ea:	0f 92       	push	r0
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	0f 92       	push	r0
    15f0:	11 24       	eor	r1, r1
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
}
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	0f 90       	pop	r0
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	0f 90       	pop	r0
    1604:	1f 90       	pop	r1
    1606:	18 95       	reti

00001608 <timer5_init>:

void timer5_init()
{
    1608:	df 93       	push	r29
    160a:	cf 93       	push	r28
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;
    1610:	e1 e2       	ldi	r30, 0x21	; 33
    1612:	f1 e0       	ldi	r31, 0x01	; 1
    1614:	10 82       	st	Z, r1
	TCCR5A = 0xA1;
    1616:	e0 e2       	ldi	r30, 0x20	; 32
    1618:	f1 e0       	ldi	r31, 0x01	; 1
    161a:	81 ea       	ldi	r24, 0xA1	; 161
    161c:	80 83       	st	Z, r24
	TCCR5B = 0x0B;
    161e:	e1 e2       	ldi	r30, 0x21	; 33
    1620:	f1 e0       	ldi	r31, 0x01	; 1
    1622:	8b e0       	ldi	r24, 0x0B	; 11
    1624:	80 83       	st	Z, r24
}
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	08 95       	ret

0000162c <forward>:

void forward()
{
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
	PORTA=0x06;
    1634:	e2 e2       	ldi	r30, 0x22	; 34
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	86 e0       	ldi	r24, 0x06	; 6
    163a:	80 83       	st	Z, r24
}
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	08 95       	ret

00001642 <right>:

void right() 				//function for moving right 
{
    1642:	df 93       	push	r29
    1644:	cf 93       	push	r28
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
	PORTA=0x0A;     				// Hard right
    164a:	e2 e2       	ldi	r30, 0x22	; 34
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	8a e0       	ldi	r24, 0x0A	; 10
    1650:	80 83       	st	Z, r24
}
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	08 95       	ret

00001658 <left>:
void left() 				//function for moving left
{
    1658:	df 93       	push	r29
    165a:	cf 93       	push	r28
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
	PORTA=0x05;     				// Hard left
    1660:	e2 e2       	ldi	r30, 0x22	; 34
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	85 e0       	ldi	r24, 0x05	; 5
    1666:	80 83       	st	Z, r24
}
    1668:	cf 91       	pop	r28
    166a:	df 91       	pop	r29
    166c:	08 95       	ret

0000166e <back>:
void back() 				//function for moving backward
{
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
	PORTA=0x09;     				// move back
    1676:	e2 e2       	ldi	r30, 0x22	; 34
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	89 e0       	ldi	r24, 0x09	; 9
    167c:	80 83       	st	Z, r24
}
    167e:	cf 91       	pop	r28
    1680:	df 91       	pop	r29
    1682:	08 95       	ret

00001684 <stop>:
void stop() 				//function for moving stop
{
    1684:	df 93       	push	r29
    1686:	cf 93       	push	r28
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
	PORTA=0x00;						// Stop
    168c:	e2 e2       	ldi	r30, 0x22	; 34
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	10 82       	st	Z, r1
}
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	08 95       	ret

00001698 <velocity>:


//Velocity control function of wheels
void velocity (unsigned char t1,unsigned char t2)
{
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	0f 92       	push	r0
    169e:	0f 92       	push	r0
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
    16a4:	89 83       	std	Y+1, r24	; 0x01
    16a6:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = t1;                  
    16a8:	e8 e2       	ldi	r30, 0x28	; 40
    16aa:	f1 e0       	ldi	r31, 0x01	; 1
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	80 83       	st	Z, r24
	OCR5BL = t2;
    16b0:	ea e2       	ldi	r30, 0x2A	; 42
    16b2:	f1 e0       	ldi	r31, 0x01	; 1
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	80 83       	st	Z, r24
}
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	cf 91       	pop	r28
    16be:	df 91       	pop	r29
    16c0:	08 95       	ret

000016c2 <left_position_encoder_interrupt_init>:


//initialization function of left wheel encoder

void left_position_encoder_interrupt_init(void)
{
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
	cli();
    16ca:	f8 94       	cli
	EICRB=EICRB|0x02;
    16cc:	aa e6       	ldi	r26, 0x6A	; 106
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	ea e6       	ldi	r30, 0x6A	; 106
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	82 60       	ori	r24, 0x02	; 2
    16d8:	8c 93       	st	X, r24
	EIMSK=EIMSK|0x10;
    16da:	ad e3       	ldi	r26, 0x3D	; 61
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	ed e3       	ldi	r30, 0x3D	; 61
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	80 61       	ori	r24, 0x10	; 16
    16e6:	8c 93       	st	X, r24
	sei();
    16e8:	78 94       	sei
}
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	08 95       	ret

000016f0 <right_position_encoder_interrupt_init>:

//initialization function of right wheel encoder
void right_position_encoder_interrupt_init(void)
{
    16f0:	df 93       	push	r29
    16f2:	cf 93       	push	r28
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
	cli();
    16f8:	f8 94       	cli
	EICRB=EICRB|0x08;
    16fa:	aa e6       	ldi	r26, 0x6A	; 106
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	ea e6       	ldi	r30, 0x6A	; 106
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	88 60       	ori	r24, 0x08	; 8
    1706:	8c 93       	st	X, r24
	EIMSK=EIMSK|0x20;
    1708:	ad e3       	ldi	r26, 0x3D	; 61
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	ed e3       	ldi	r30, 0x3D	; 61
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	80 62       	ori	r24, 0x20	; 32
    1714:	8c 93       	st	X, r24
	sei();
    1716:	78 94       	sei
}
    1718:	cf 91       	pop	r28
    171a:	df 91       	pop	r29
    171c:	08 95       	ret

0000171e <angle_rotate_right>:
wheel which rotates) and scr or scl is incremented.This scl or scr value is compared with the
required count.If it is less then again rotation continues or the loop will break
*/

void angle_rotate_right(unsigned int Degrees)
{
    171e:	df 93       	push	r29
    1720:	cf 93       	push	r28
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
    1726:	2c 97       	sbiw	r28, 0x0c	; 12
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	f8 94       	cli
    172c:	de bf       	out	0x3e, r29	; 62
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	cd bf       	out	0x3d, r28	; 61
    1732:	9a 87       	std	Y+10, r25	; 0x0a
    1734:	89 87       	std	Y+9, r24	; 0x09

    float ReqdShaftCount = 0;
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	a0 e0       	ldi	r26, 0x00	; 0
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	8d 83       	std	Y+5, r24	; 0x05
    1740:	9e 83       	std	Y+6, r25	; 0x06
    1742:	af 83       	std	Y+7, r26	; 0x07
    1744:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
    1746:	19 82       	std	Y+1, r1	; 0x01
    1748:	1a 82       	std	Y+2, r1	; 0x02
    174a:	1b 82       	std	Y+3, r1	; 0x03
    174c:	1c 82       	std	Y+4, r1	; 0x04
	ReqdShaftCount = (float) Degrees/ 2.045; // division by resolution to get shaft count
    174e:	89 85       	ldd	r24, Y+9	; 0x09
    1750:	9a 85       	ldd	r25, Y+10	; 0x0a
    1752:	cc 01       	movw	r24, r24
    1754:	a0 e0       	ldi	r26, 0x00	; 0
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	bc 01       	movw	r22, r24
    175a:	cd 01       	movw	r24, r26
    175c:	0e 94 98 20 	call	0x4130	; 0x4130 <__floatunsisf>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	bc 01       	movw	r22, r24
    1766:	cd 01       	movw	r24, r26
    1768:	28 e4       	ldi	r18, 0x48	; 72
    176a:	31 ee       	ldi	r19, 0xE1	; 225
    176c:	42 e0       	ldi	r20, 0x02	; 2
    176e:	50 e4       	ldi	r21, 0x40	; 64
    1770:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <__divsf3>
    1774:	dc 01       	movw	r26, r24
    1776:	cb 01       	movw	r24, r22
    1778:	8d 83       	std	Y+5, r24	; 0x05
    177a:	9e 83       	std	Y+6, r25	; 0x06
    177c:	af 83       	std	Y+7, r26	; 0x07
    177e:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;    
    1780:	6d 81       	ldd	r22, Y+5	; 0x05
    1782:	7e 81       	ldd	r23, Y+6	; 0x06
    1784:	8f 81       	ldd	r24, Y+7	; 0x07
    1786:	98 85       	ldd	r25, Y+8	; 0x08
    1788:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	cc 01       	movw	r24, r24
    1792:	a0 e0       	ldi	r26, 0x00	; 0
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	89 83       	std	Y+1, r24	; 0x01
    1798:	9a 83       	std	Y+2, r25	; 0x02
    179a:	ab 83       	std	Y+3, r26	; 0x03
    179c:	bc 83       	std	Y+4, r27	; 0x04
	scr = 0; 
    179e:	10 92 0b 03 	sts	0x030B, r1
    17a2:	10 92 0a 03 	sts	0x030A, r1
	scl = 0; 
    17a6:	10 92 22 03 	sts	0x0322, r1
    17aa:	10 92 21 03 	sts	0x0321, r1
	while (1)
	{
		if((scr>= ReqdShaftCountInt) | (scl >= ReqdShaftCountInt))
    17ae:	80 91 0a 03 	lds	r24, 0x030A
    17b2:	90 91 0b 03 	lds	r25, 0x030B
    17b6:	9c 01       	movw	r18, r24
    17b8:	44 27       	eor	r20, r20
    17ba:	37 fd       	sbrc	r19, 7
    17bc:	40 95       	com	r20
    17be:	54 2f       	mov	r21, r20
    17c0:	1c 86       	std	Y+12, r1	; 0x0c
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	9a 81       	ldd	r25, Y+2	; 0x02
    17c6:	ab 81       	ldd	r26, Y+3	; 0x03
    17c8:	bc 81       	ldd	r27, Y+4	; 0x04
    17ca:	28 17       	cp	r18, r24
    17cc:	39 07       	cpc	r19, r25
    17ce:	4a 07       	cpc	r20, r26
    17d0:	5b 07       	cpc	r21, r27
    17d2:	10 f0       	brcs	.+4      	; 0x17d8 <angle_rotate_right+0xba>
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	8c 87       	std	Y+12, r24	; 0x0c
    17d8:	80 91 21 03 	lds	r24, 0x0321
    17dc:	90 91 22 03 	lds	r25, 0x0322
    17e0:	9c 01       	movw	r18, r24
    17e2:	44 27       	eor	r20, r20
    17e4:	37 fd       	sbrc	r19, 7
    17e6:	40 95       	com	r20
    17e8:	54 2f       	mov	r21, r20
    17ea:	1b 86       	std	Y+11, r1	; 0x0b
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	9a 81       	ldd	r25, Y+2	; 0x02
    17f0:	ab 81       	ldd	r26, Y+3	; 0x03
    17f2:	bc 81       	ldd	r27, Y+4	; 0x04
    17f4:	28 17       	cp	r18, r24
    17f6:	39 07       	cpc	r19, r25
    17f8:	4a 07       	cpc	r20, r26
    17fa:	5b 07       	cpc	r21, r27
    17fc:	10 f0       	brcs	.+4      	; 0x1802 <angle_rotate_right+0xe4>
    17fe:	91 e0       	ldi	r25, 0x01	; 1
    1800:	9b 87       	std	Y+11, r25	; 0x0b
    1802:	8c 85       	ldd	r24, Y+12	; 0x0c
    1804:	9b 85       	ldd	r25, Y+11	; 0x0b
    1806:	89 2b       	or	r24, r25
    1808:	88 23       	and	r24, r24
    180a:	19 f4       	brne	.+6      	; 0x1812 <angle_rotate_right+0xf4>
			break;
		}
		else
		{
						
			right();
    180c:	0e 94 21 0b 	call	0x1642	; 0x1642 <right>
    1810:	ce cf       	rjmp	.-100    	; 0x17ae <angle_rotate_right+0x90>
		}
	}
   	stop(); 
    1812:	0e 94 42 0b 	call	0x1684	; 0x1684 <stop>
}
    1816:	2c 96       	adiw	r28, 0x0c	; 12
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	de bf       	out	0x3e, r29	; 62
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	cd bf       	out	0x3d, r28	; 61
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	08 95       	ret

00001828 <angle_rotate_left>:

/*Angle rotation function for hard left rotation 
Same as above but rotation function is hard left.
*/
void angle_rotate_left(unsigned int Degrees)
{
    1828:	df 93       	push	r29
    182a:	cf 93       	push	r28
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
    1830:	2c 97       	sbiw	r28, 0x0c	; 12
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	f8 94       	cli
    1836:	de bf       	out	0x3e, r29	; 62
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	cd bf       	out	0x3d, r28	; 61
    183c:	9a 87       	std	Y+10, r25	; 0x0a
    183e:	89 87       	std	Y+9, r24	; 0x09

    float ReqdShaftCount = 0;
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	a0 e0       	ldi	r26, 0x00	; 0
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	8d 83       	std	Y+5, r24	; 0x05
    184a:	9e 83       	std	Y+6, r25	; 0x06
    184c:	af 83       	std	Y+7, r26	; 0x07
    184e:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
    1850:	19 82       	std	Y+1, r1	; 0x01
    1852:	1a 82       	std	Y+2, r1	; 0x02
    1854:	1b 82       	std	Y+3, r1	; 0x03
    1856:	1c 82       	std	Y+4, r1	; 0x04
	ReqdShaftCount = (float) Degrees/ 2.045; // division by resolution to get shaft count
    1858:	89 85       	ldd	r24, Y+9	; 0x09
    185a:	9a 85       	ldd	r25, Y+10	; 0x0a
    185c:	cc 01       	movw	r24, r24
    185e:	a0 e0       	ldi	r26, 0x00	; 0
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	bc 01       	movw	r22, r24
    1864:	cd 01       	movw	r24, r26
    1866:	0e 94 98 20 	call	0x4130	; 0x4130 <__floatunsisf>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	bc 01       	movw	r22, r24
    1870:	cd 01       	movw	r24, r26
    1872:	28 e4       	ldi	r18, 0x48	; 72
    1874:	31 ee       	ldi	r19, 0xE1	; 225
    1876:	42 e0       	ldi	r20, 0x02	; 2
    1878:	50 e4       	ldi	r21, 0x40	; 64
    187a:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <__divsf3>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	8d 83       	std	Y+5, r24	; 0x05
    1884:	9e 83       	std	Y+6, r25	; 0x06
    1886:	af 83       	std	Y+7, r26	; 0x07
    1888:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;    
    188a:	6d 81       	ldd	r22, Y+5	; 0x05
    188c:	7e 81       	ldd	r23, Y+6	; 0x06
    188e:	8f 81       	ldd	r24, Y+7	; 0x07
    1890:	98 85       	ldd	r25, Y+8	; 0x08
    1892:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	cc 01       	movw	r24, r24
    189c:	a0 e0       	ldi	r26, 0x00	; 0
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	89 83       	std	Y+1, r24	; 0x01
    18a2:	9a 83       	std	Y+2, r25	; 0x02
    18a4:	ab 83       	std	Y+3, r26	; 0x03
    18a6:	bc 83       	std	Y+4, r27	; 0x04
	scr = 0; 
    18a8:	10 92 0b 03 	sts	0x030B, r1
    18ac:	10 92 0a 03 	sts	0x030A, r1
	scl = 0; 
    18b0:	10 92 22 03 	sts	0x0322, r1
    18b4:	10 92 21 03 	sts	0x0321, r1
	while (1)
	{
		if((scr>= ReqdShaftCountInt) | (scl >= ReqdShaftCountInt))
    18b8:	80 91 0a 03 	lds	r24, 0x030A
    18bc:	90 91 0b 03 	lds	r25, 0x030B
    18c0:	9c 01       	movw	r18, r24
    18c2:	44 27       	eor	r20, r20
    18c4:	37 fd       	sbrc	r19, 7
    18c6:	40 95       	com	r20
    18c8:	54 2f       	mov	r21, r20
    18ca:	1c 86       	std	Y+12, r1	; 0x0c
    18cc:	89 81       	ldd	r24, Y+1	; 0x01
    18ce:	9a 81       	ldd	r25, Y+2	; 0x02
    18d0:	ab 81       	ldd	r26, Y+3	; 0x03
    18d2:	bc 81       	ldd	r27, Y+4	; 0x04
    18d4:	28 17       	cp	r18, r24
    18d6:	39 07       	cpc	r19, r25
    18d8:	4a 07       	cpc	r20, r26
    18da:	5b 07       	cpc	r21, r27
    18dc:	10 f0       	brcs	.+4      	; 0x18e2 <angle_rotate_left+0xba>
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	8c 87       	std	Y+12, r24	; 0x0c
    18e2:	80 91 21 03 	lds	r24, 0x0321
    18e6:	90 91 22 03 	lds	r25, 0x0322
    18ea:	9c 01       	movw	r18, r24
    18ec:	44 27       	eor	r20, r20
    18ee:	37 fd       	sbrc	r19, 7
    18f0:	40 95       	com	r20
    18f2:	54 2f       	mov	r21, r20
    18f4:	1b 86       	std	Y+11, r1	; 0x0b
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
    18f8:	9a 81       	ldd	r25, Y+2	; 0x02
    18fa:	ab 81       	ldd	r26, Y+3	; 0x03
    18fc:	bc 81       	ldd	r27, Y+4	; 0x04
    18fe:	28 17       	cp	r18, r24
    1900:	39 07       	cpc	r19, r25
    1902:	4a 07       	cpc	r20, r26
    1904:	5b 07       	cpc	r21, r27
    1906:	10 f0       	brcs	.+4      	; 0x190c <angle_rotate_left+0xe4>
    1908:	91 e0       	ldi	r25, 0x01	; 1
    190a:	9b 87       	std	Y+11, r25	; 0x0b
    190c:	8c 85       	ldd	r24, Y+12	; 0x0c
    190e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1910:	89 2b       	or	r24, r25
    1912:	88 23       	and	r24, r24
    1914:	19 f4       	brne	.+6      	; 0x191c <angle_rotate_left+0xf4>
			break;
		}
		else
		{
						
			left();
    1916:	0e 94 2c 0b 	call	0x1658	; 0x1658 <left>
    191a:	ce cf       	rjmp	.-100    	; 0x18b8 <angle_rotate_left+0x90>

		}

	}

   	stop(); 
    191c:	0e 94 42 0b 	call	0x1684	; 0x1684 <stop>

}
    1920:	2c 96       	adiw	r28, 0x0c	; 12
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	f8 94       	cli
    1926:	de bf       	out	0x3e, r29	; 62
    1928:	0f be       	out	0x3f, r0	; 63
    192a:	cd bf       	out	0x3d, r28	; 61
    192c:	cf 91       	pop	r28
    192e:	df 91       	pop	r29
    1930:	08 95       	ret

00001932 <__vector_5>:

//ISR for left wheel shaft encoder

ISR(INT4_vect)
{
    1932:	1f 92       	push	r1
    1934:	0f 92       	push	r0
    1936:	0f b6       	in	r0, 0x3f	; 63
    1938:	0f 92       	push	r0
    193a:	11 24       	eor	r1, r1
    193c:	8f 93       	push	r24
    193e:	9f 93       	push	r25
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62

	scl++;
    1948:	80 91 21 03 	lds	r24, 0x0321
    194c:	90 91 22 03 	lds	r25, 0x0322
    1950:	01 96       	adiw	r24, 0x01	; 1
    1952:	90 93 22 03 	sts	0x0322, r25
    1956:	80 93 21 03 	sts	0x0321, r24
}
    195a:	cf 91       	pop	r28
    195c:	df 91       	pop	r29
    195e:	9f 91       	pop	r25
    1960:	8f 91       	pop	r24
    1962:	0f 90       	pop	r0
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	0f 90       	pop	r0
    1968:	1f 90       	pop	r1
    196a:	18 95       	reti

0000196c <__vector_6>:
//ISR for right wheel shaft encoder
ISR(INT5_vect)
{
    196c:	1f 92       	push	r1
    196e:	0f 92       	push	r0
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	0f 92       	push	r0
    1974:	11 24       	eor	r1, r1
    1976:	8f 93       	push	r24
    1978:	9f 93       	push	r25
    197a:	df 93       	push	r29
    197c:	cf 93       	push	r28
    197e:	cd b7       	in	r28, 0x3d	; 61
    1980:	de b7       	in	r29, 0x3e	; 62
	scr++;
    1982:	80 91 0a 03 	lds	r24, 0x030A
    1986:	90 91 0b 03 	lds	r25, 0x030B
    198a:	01 96       	adiw	r24, 0x01	; 1
    198c:	90 93 0b 03 	sts	0x030B, r25
    1990:	80 93 0a 03 	sts	0x030A, r24

}
    1994:	cf 91       	pop	r28
    1996:	df 91       	pop	r29
    1998:	9f 91       	pop	r25
    199a:	8f 91       	pop	r24
    199c:	0f 90       	pop	r0
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	0f 90       	pop	r0
    19a2:	1f 90       	pop	r1
    19a4:	18 95       	reti

000019a6 <linear_distance_mm>:
and if that value is reached, the loop breaks else the function for forward movement is 
executed 
*/

void linear_distance_mm(unsigned int DistanceInMM)
{ 	
    19a6:	df 93       	push	r29
    19a8:	cf 93       	push	r28
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	2a 97       	sbiw	r28, 0x0a	; 10
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	f8 94       	cli
    19b4:	de bf       	out	0x3e, r29	; 62
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	cd bf       	out	0x3d, r28	; 61
    19ba:	9a 87       	std	Y+10, r25	; 0x0a
    19bc:	89 87       	std	Y+9, r24	; 0x09
	float ReqdShaftCount = 0;
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	a0 e0       	ldi	r26, 0x00	; 0
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	8d 83       	std	Y+5, r24	; 0x05
    19c8:	9e 83       	std	Y+6, r25	; 0x06
    19ca:	af 83       	std	Y+7, r26	; 0x07
    19cc:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
    19ce:	19 82       	std	Y+1, r1	; 0x01
    19d0:	1a 82       	std	Y+2, r1	; 0x02
    19d2:	1b 82       	std	Y+3, r1	; 0x03
    19d4:	1c 82       	std	Y+4, r1	; 0x04
	ReqdShaftCount = DistanceInMM / 5.338; 	// division by resolution to get shaft count
    19d6:	89 85       	ldd	r24, Y+9	; 0x09
    19d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19da:	cc 01       	movw	r24, r24
    19dc:	a0 e0       	ldi	r26, 0x00	; 0
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	bc 01       	movw	r22, r24
    19e2:	cd 01       	movw	r24, r26
    19e4:	0e 94 98 20 	call	0x4130	; 0x4130 <__floatunsisf>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	bc 01       	movw	r22, r24
    19ee:	cd 01       	movw	r24, r26
    19f0:	25 ee       	ldi	r18, 0xE5	; 229
    19f2:	30 ed       	ldi	r19, 0xD0	; 208
    19f4:	4a ea       	ldi	r20, 0xAA	; 170
    19f6:	50 e4       	ldi	r21, 0x40	; 64
    19f8:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <__divsf3>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	8d 83       	std	Y+5, r24	; 0x05
    1a02:	9e 83       	std	Y+6, r25	; 0x06
    1a04:	af 83       	std	Y+7, r26	; 0x07
    1a06:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    1a08:	6d 81       	ldd	r22, Y+5	; 0x05
    1a0a:	7e 81       	ldd	r23, Y+6	; 0x06
    1a0c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a0e:	98 85       	ldd	r25, Y+8	; 0x08
    1a10:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	89 83       	std	Y+1, r24	; 0x01
    1a1a:	9a 83       	std	Y+2, r25	; 0x02
    1a1c:	ab 83       	std	Y+3, r26	; 0x03
    1a1e:	bc 83       	std	Y+4, r27	; 0x04
	scr = 0; 	
    1a20:	10 92 0b 03 	sts	0x030B, r1
    1a24:	10 92 0a 03 	sts	0x030A, r1
	while(1) 	
	{
					  		
		if(scr > ReqdShaftCountInt)
    1a28:	80 91 0a 03 	lds	r24, 0x030A
    1a2c:	90 91 0b 03 	lds	r25, 0x030B
    1a30:	9c 01       	movw	r18, r24
    1a32:	44 27       	eor	r20, r20
    1a34:	37 fd       	sbrc	r19, 7
    1a36:	40 95       	com	r20
    1a38:	54 2f       	mov	r21, r20
    1a3a:	89 81       	ldd	r24, Y+1	; 0x01
    1a3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3e:	ab 81       	ldd	r26, Y+3	; 0x03
    1a40:	bc 81       	ldd	r27, Y+4	; 0x04
    1a42:	82 17       	cp	r24, r18
    1a44:	93 07       	cpc	r25, r19
    1a46:	a4 07       	cpc	r26, r20
    1a48:	b5 07       	cpc	r27, r21
    1a4a:	18 f0       	brcs	.+6      	; 0x1a52 <linear_distance_mm+0xac>
		{
			break;
		}
		else
		{
			forward();
    1a4c:	0e 94 16 0b 	call	0x162c	; 0x162c <forward>
    1a50:	eb cf       	rjmp	.-42     	; 0x1a28 <linear_distance_mm+0x82>
		}	

	} 

	stop(); //Stop action
    1a52:	0e 94 42 0b 	call	0x1684	; 0x1684 <stop>
}
    1a56:	2a 96       	adiw	r28, 0x0a	; 10
    1a58:	0f b6       	in	r0, 0x3f	; 63
    1a5a:	f8 94       	cli
    1a5c:	de bf       	out	0x3e, r29	; 62
    1a5e:	0f be       	out	0x3f, r0	; 63
    1a60:	cd bf       	out	0x3d, r28	; 61
    1a62:	cf 91       	pop	r28
    1a64:	df 91       	pop	r29
    1a66:	08 95       	ret

00001a68 <lcd_port_config>:


/* code for distance calculation using IR sensor  */

void lcd_port_config (void)
{
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
	DDRC = DDRC | 0xF7; 		//all the LCD pin's direction set as output
    1a70:	a7 e2       	ldi	r26, 0x27	; 39
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	e7 e2       	ldi	r30, 0x27	; 39
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	87 6f       	ori	r24, 0xF7	; 247
    1a7c:	8c 93       	st	X, r24
	PORTC = PORTC & 0x80; 		// all the LCD pins are set to logic 0 except PORTC 7
    1a7e:	a8 e2       	ldi	r26, 0x28	; 40
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	e8 e2       	ldi	r30, 0x28	; 40
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	80 78       	andi	r24, 0x80	; 128
    1a8a:	8c 93       	st	X, r24
}
    1a8c:	cf 91       	pop	r28
    1a8e:	df 91       	pop	r29
    1a90:	08 95       	ret

00001a92 <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
    1a92:	df 93       	push	r29
    1a94:	cf 93       	push	r28
    1a96:	cd b7       	in	r28, 0x3d	; 61
    1a98:	de b7       	in	r29, 0x3e	; 62
	DDRF = 0x00; 
    1a9a:	e0 e3       	ldi	r30, 0x30	; 48
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	10 82       	st	Z, r1
	PORTF = 0x00;
    1aa0:	e1 e3       	ldi	r30, 0x31	; 49
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	10 82       	st	Z, r1
	DDRK = 0x00;
    1aa6:	e7 e0       	ldi	r30, 0x07	; 7
    1aa8:	f1 e0       	ldi	r31, 0x01	; 1
    1aaa:	10 82       	st	Z, r1
	PORTK = 0x00;
    1aac:	e8 e0       	ldi	r30, 0x08	; 8
    1aae:	f1 e0       	ldi	r31, 0x01	; 1
    1ab0:	10 82       	st	Z, r1
}
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	08 95       	ret

00001ab8 <port_init>:

void port_init()
{
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
	lcd_port_config();
    1ac0:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <lcd_port_config>
	adc_pin_config();	
    1ac4:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <adc_pin_config>
}
    1ac8:	cf 91       	pop	r28
    1aca:	df 91       	pop	r29
    1acc:	08 95       	ret

00001ace <adc_init>:
	
void adc_init()
{
    1ace:	df 93       	push	r29
    1ad0:	cf 93       	push	r28
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
    1ad6:	ea e7       	ldi	r30, 0x7A	; 122
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	10 82       	st	Z, r1
	ADCSRB = 0x00;				//MUX5 = 0
    1adc:	eb e7       	ldi	r30, 0x7B	; 123
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	10 82       	st	Z, r1
	ADMUX = 0x20;				//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    1ae2:	ec e7       	ldi	r30, 0x7C	; 124
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 e2       	ldi	r24, 0x20	; 32
    1ae8:	80 83       	st	Z, r24
	ACSR = 0x80;
    1aea:	e0 e5       	ldi	r30, 0x50	; 80
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 e8       	ldi	r24, 0x80	; 128
    1af0:	80 83       	st	Z, r24
	ADCSRA = 0x86;				//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    1af2:	ea e7       	ldi	r30, 0x7A	; 122
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	86 e8       	ldi	r24, 0x86	; 134
    1af8:	80 83       	st	Z, r24
}
    1afa:	cf 91       	pop	r28
    1afc:	df 91       	pop	r29
    1afe:	08 95       	ret

00001b00 <init_devices>:

void init_devices (void)
{
    1b00:	df 93       	push	r29
    1b02:	cf 93       	push	r28
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
	cli(); 						//Clears the global interrupts
    1b08:	f8 94       	cli
	port_init();
    1b0a:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <port_init>
	adc_init();
    1b0e:	0e 94 67 0d 	call	0x1ace	; 0x1ace <adc_init>
	sei(); 						//Enables the global interrupts
    1b12:	78 94       	sei
}
    1b14:	cf 91       	pop	r28
    1b16:	df 91       	pop	r29
    1b18:	08 95       	ret

00001b1a <ADC_Conversion>:
	
unsigned char ADC_Conversion(unsigned char Ch)
{
    1b1a:	df 93       	push	r29
    1b1c:	cf 93       	push	r28
    1b1e:	0f 92       	push	r0
    1b20:	0f 92       	push	r0
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
    1b28:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2a:	88 30       	cpi	r24, 0x08	; 8
    1b2c:	20 f0       	brcs	.+8      	; 0x1b36 <ADC_Conversion+0x1c>
	{
		ADCSRB = 0x08;			// select the ch. > 7
    1b2e:	eb e7       	ldi	r30, 0x7B	; 123
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	88 e0       	ldi	r24, 0x08	; 8
    1b34:	80 83       	st	Z, r24
	}
	Ch = Ch & 0x07;  			
    1b36:	8a 81       	ldd	r24, Y+2	; 0x02
    1b38:	87 70       	andi	r24, 0x07	; 7
    1b3a:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;	   		//do not disturb the left adjustment
    1b3c:	ec e7       	ldi	r30, 0x7C	; 124
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	8a 81       	ldd	r24, Y+2	; 0x02
    1b42:	80 62       	ori	r24, 0x20	; 32
    1b44:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
    1b46:	aa e7       	ldi	r26, 0x7A	; 122
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	ea e7       	ldi	r30, 0x7A	; 122
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	80 64       	ori	r24, 0x40	; 64
    1b52:	8c 93       	st	X, r24
	while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
    1b54:	ea e7       	ldi	r30, 0x7A	; 122
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	88 2f       	mov	r24, r24
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	80 71       	andi	r24, 0x10	; 16
    1b60:	90 70       	andi	r25, 0x00	; 0
    1b62:	00 97       	sbiw	r24, 0x00	; 0
    1b64:	b9 f3       	breq	.-18     	; 0x1b54 <ADC_Conversion+0x3a>
	a=ADCH;
    1b66:	e9 e7       	ldi	r30, 0x79	; 121
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10; 		//clear ADIF (ADC Interrupt Flag) by writing 1 to it
    1b6e:	aa e7       	ldi	r26, 0x7A	; 122
    1b70:	b0 e0       	ldi	r27, 0x00	; 0
    1b72:	ea e7       	ldi	r30, 0x7A	; 122
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	80 61       	ori	r24, 0x10	; 16
    1b7a:	8c 93       	st	X, r24
	ADCSRB = 0x00;
    1b7c:	eb e7       	ldi	r30, 0x7B	; 123
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	10 82       	st	Z, r1
	return a;
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	cf 91       	pop	r28
    1b8a:	df 91       	pop	r29
    1b8c:	08 95       	ret

00001b8e <Sharp_GP2D12_estimation>:
	
unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
{
    1b8e:	df 93       	push	r29
    1b90:	cf 93       	push	r28
    1b92:	cd b7       	in	r28, 0x3d	; 61
    1b94:	de b7       	in	r29, 0x3e	; 62
    1b96:	27 97       	sbiw	r28, 0x07	; 7
    1b98:	0f b6       	in	r0, 0x3f	; 63
    1b9a:	f8 94       	cli
    1b9c:	de bf       	out	0x3e, r29	; 62
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	cd bf       	out	0x3d, r28	; 61
    1ba2:	8f 83       	std	Y+7, r24	; 0x07
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
    1ba4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ba6:	88 2f       	mov	r24, r24
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	a0 e0       	ldi	r26, 0x00	; 0
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	bc 01       	movw	r22, r24
    1bb0:	cd 01       	movw	r24, r26
    1bb2:	0e 94 98 20 	call	0x4130	; 0x4130 <__floatunsisf>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	bc 01       	movw	r22, r24
    1bbc:	cd 01       	movw	r24, r26
    1bbe:	2f ee       	ldi	r18, 0xEF	; 239
    1bc0:	39 ec       	ldi	r19, 0xC9	; 201
    1bc2:	43 e9       	ldi	r20, 0x93	; 147
    1bc4:	5f e3       	ldi	r21, 0x3F	; 63
    1bc6:	0e 94 51 23 	call	0x46a2	; 0x46a2 <pow>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	9c 01       	movw	r18, r24
    1bd0:	ad 01       	movw	r20, r26
    1bd2:	60 e0       	ldi	r22, 0x00	; 0
    1bd4:	70 e0       	ldi	r23, 0x00	; 0
    1bd6:	80 e8       	ldi	r24, 0x80	; 128
    1bd8:	9f e3       	ldi	r25, 0x3F	; 63
    1bda:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <__divsf3>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	bc 01       	movw	r22, r24
    1be4:	cd 01       	movw	r24, r26
    1be6:	2a e9       	ldi	r18, 0x9A	; 154
    1be8:	39 ef       	ldi	r19, 0xF9	; 249
    1bea:	4e e2       	ldi	r20, 0x2E	; 46
    1bec:	55 e4       	ldi	r21, 0x45	; 69
    1bee:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	bc 01       	movw	r22, r24
    1bf8:	cd 01       	movw	r24, r26
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	40 e2       	ldi	r20, 0x20	; 32
    1c00:	51 e4       	ldi	r21, 0x41	; 65
    1c02:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	bc 01       	movw	r22, r24
    1c0c:	cd 01       	movw	r24, r26
    1c0e:	0e 94 44 20 	call	0x4088	; 0x4088 <__fixsfsi>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	aa 27       	eor	r26, r26
    1c18:	97 fd       	sbrc	r25, 7
    1c1a:	a0 95       	com	r26
    1c1c:	ba 2f       	mov	r27, r26
    1c1e:	bc 01       	movw	r22, r24
    1c20:	cd 01       	movw	r24, r26
    1c22:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <__floatsisf>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	8b 83       	std	Y+3, r24	; 0x03
    1c2c:	9c 83       	std	Y+4, r25	; 0x04
    1c2e:	ad 83       	std	Y+5, r26	; 0x05
    1c30:	be 83       	std	Y+6, r27	; 0x06
	distanceInt = (int)distance;
    1c32:	6b 81       	ldd	r22, Y+3	; 0x03
    1c34:	7c 81       	ldd	r23, Y+4	; 0x04
    1c36:	8d 81       	ldd	r24, Y+5	; 0x05
    1c38:	9e 81       	ldd	r25, Y+6	; 0x06
    1c3a:	0e 94 44 20 	call	0x4088	; 0x4088 <__fixsfsi>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	9a 83       	std	Y+2, r25	; 0x02
    1c44:	89 83       	std	Y+1, r24	; 0x01
	if(distanceInt>800)
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4a:	23 e0       	ldi	r18, 0x03	; 3
    1c4c:	81 32       	cpi	r24, 0x21	; 33
    1c4e:	92 07       	cpc	r25, r18
    1c50:	20 f0       	brcs	.+8      	; 0x1c5a <Sharp_GP2D12_estimation+0xcc>
	{
		distanceInt=800;
    1c52:	80 e2       	ldi	r24, 0x20	; 32
    1c54:	93 e0       	ldi	r25, 0x03	; 3
    1c56:	9a 83       	std	Y+2, r25	; 0x02
    1c58:	89 83       	std	Y+1, r24	; 0x01
	}
	return distanceInt;
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1c5e:	27 96       	adiw	r28, 0x07	; 7
    1c60:	0f b6       	in	r0, 0x3f	; 63
    1c62:	f8 94       	cli
    1c64:	de bf       	out	0x3e, r29	; 62
    1c66:	0f be       	out	0x3f, r0	; 63
    1c68:	cd bf       	out	0x3d, r28	; 61
    1c6a:	cf 91       	pop	r28
    1c6c:	df 91       	pop	r29
    1c6e:	08 95       	ret

00001c70 <servo1_pin_config>:


// Servo motor control codes

void servo1_pin_config (void)
{
    1c70:	df 93       	push	r29
    1c72:	cf 93       	push	r28
    1c74:	cd b7       	in	r28, 0x3d	; 61
    1c76:	de b7       	in	r29, 0x3e	; 62
 	DDRB  = DDRB | 0x20;  		//making PORTB 5 pin output
    1c78:	a4 e2       	ldi	r26, 0x24	; 36
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	e4 e2       	ldi	r30, 0x24	; 36
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	80 62       	ori	r24, 0x20	; 32
    1c84:	8c 93       	st	X, r24
 	PORTB = PORTB | 0x20; 		//setting PORTB 5 pin to logic 1
    1c86:	a5 e2       	ldi	r26, 0x25	; 37
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	e5 e2       	ldi	r30, 0x25	; 37
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	80 62       	ori	r24, 0x20	; 32
    1c92:	8c 93       	st	X, r24
}
    1c94:	cf 91       	pop	r28
    1c96:	df 91       	pop	r29
    1c98:	08 95       	ret

00001c9a <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
    1c9a:	df 93       	push	r29
    1c9c:	cf 93       	push	r28
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
 	DDRB  = DDRB | 0x40;  		//making PORTB 6 pin output
    1ca2:	a4 e2       	ldi	r26, 0x24	; 36
    1ca4:	b0 e0       	ldi	r27, 0x00	; 0
    1ca6:	e4 e2       	ldi	r30, 0x24	; 36
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	80 64       	ori	r24, 0x40	; 64
    1cae:	8c 93       	st	X, r24
 	PORTB = PORTB | 0x40; 		//setting PORTB 6 pin to logic 1
    1cb0:	a5 e2       	ldi	r26, 0x25	; 37
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	e5 e2       	ldi	r30, 0x25	; 37
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	80 64       	ori	r24, 0x40	; 64
    1cbc:	8c 93       	st	X, r24
}
    1cbe:	cf 91       	pop	r28
    1cc0:	df 91       	pop	r29
    1cc2:	08 95       	ret

00001cc4 <servo3_pin_config>:



//Configure PORTB 7 pin for servo motor 3 operation
void servo3_pin_config (void)
{
    1cc4:	df 93       	push	r29
    1cc6:	cf 93       	push	r28
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
 	DDRB  = DDRB | 0x80;  		//making PORTB 7 pin output
    1ccc:	a4 e2       	ldi	r26, 0x24	; 36
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	e4 e2       	ldi	r30, 0x24	; 36
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	80 68       	ori	r24, 0x80	; 128
    1cd8:	8c 93       	st	X, r24
 	PORTB = PORTB | 0x80; 		//setting PORTB 7 pin to logic 1
    1cda:	a5 e2       	ldi	r26, 0x25	; 37
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	e5 e2       	ldi	r30, 0x25	; 37
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	80 68       	ori	r24, 0x80	; 128
    1ce6:	8c 93       	st	X, r24
}
    1ce8:	cf 91       	pop	r28
    1cea:	df 91       	pop	r29
    1cec:	08 95       	ret

00001cee <port_init_servo>:

//Initialize the ports
void port_init_servo(void)
{ 
    1cee:	df 93       	push	r29
    1cf0:	cf 93       	push	r28
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
	servo1_pin_config(); 		//Configure PORTB 5 pin for servo motor 1 operation
    1cf6:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <servo1_pin_config>
 	servo2_pin_config(); 		//Configure PORTB 6 pin for servo motor 2 operation 
    1cfa:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <servo2_pin_config>
 	servo3_pin_config(); 		//Configure PORTB 7 pin for servo motor 3 operation  
    1cfe:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <servo3_pin_config>
}
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	08 95       	ret

00001d08 <timer1_init>:
//TIMER1 initialization in 10 bit fast PWM mode  
//prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 42.187Hz 
void timer1_init(void)
{
    1d08:	df 93       	push	r29
    1d0a:	cf 93       	push	r28
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
 	TCCR1B = 0x00; 				//stop
    1d10:	e1 e8       	ldi	r30, 0x81	; 129
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	10 82       	st	Z, r1
 	TCNT1H = 0xFC; 				//Counter high value to which OCR1xH value is to be compared with
    1d16:	e5 e8       	ldi	r30, 0x85	; 133
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	8c ef       	ldi	r24, 0xFC	; 252
    1d1c:	80 83       	st	Z, r24
 	TCNT1L = 0x01;				//Counter low value to which OCR1xH value is to be compared with
    1d1e:	e4 e8       	ldi	r30, 0x84	; 132
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	80 83       	st	Z, r24
 	OCR1AH = 0x03;				//Output compare eegister high value for servo 1
    1d26:	e9 e8       	ldi	r30, 0x89	; 137
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	83 e0       	ldi	r24, 0x03	; 3
    1d2c:	80 83       	st	Z, r24
 	OCR1AL = 0xFF;				//Output Compare Register low Value For servo 1
    1d2e:	e8 e8       	ldi	r30, 0x88	; 136
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	8f ef       	ldi	r24, 0xFF	; 255
    1d34:	80 83       	st	Z, r24
 	OCR1BH = 0x03;				//Output compare eegister high value for servo 2
    1d36:	eb e8       	ldi	r30, 0x8B	; 139
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	83 e0       	ldi	r24, 0x03	; 3
    1d3c:	80 83       	st	Z, r24
 	OCR1BL = 0xFF;				//Output Compare Register low Value For servo 2
    1d3e:	ea e8       	ldi	r30, 0x8A	; 138
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	8f ef       	ldi	r24, 0xFF	; 255
    1d44:	80 83       	st	Z, r24
 	OCR1CH = 0x03;				///Output compare eegister high value for servo 3
    1d46:	ed e8       	ldi	r30, 0x8D	; 141
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	83 e0       	ldi	r24, 0x03	; 3
    1d4c:	80 83       	st	Z, r24
 	OCR1CL = 0xFF;				//Output Compare Register low Value For servo 3
    1d4e:	ec e8       	ldi	r30, 0x8C	; 140
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	8f ef       	ldi	r24, 0xFF	; 255
    1d54:	80 83       	st	Z, r24
 	ICR1H  = 0x03;	
    1d56:	e7 e8       	ldi	r30, 0x87	; 135
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	83 e0       	ldi	r24, 0x03	; 3
    1d5c:	80 83       	st	Z, r24
 	ICR1L  = 0xFF;
    1d5e:	e6 e8       	ldi	r30, 0x86	; 134
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	8f ef       	ldi	r24, 0xFF	; 255
    1d64:	80 83       	st	Z, r24
 	TCCR1A = 0xAB; 				/*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
    1d66:	e0 e8       	ldi	r30, 0x80	; 128
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	8b ea       	ldi	r24, 0xAB	; 171
    1d6c:	80 83       	st	Z, r24
 									For Overriding normal port functionalit to OCRnA outputs.
				  				{WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 	TCCR1C = 0x00;
    1d6e:	e2 e8       	ldi	r30, 0x82	; 130
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	10 82       	st	Z, r1
 	TCCR1B = 0x0C; 				//WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
    1d74:	e1 e8       	ldi	r30, 0x81	; 129
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	8c e0       	ldi	r24, 0x0C	; 12
    1d7a:	80 83       	st	Z, r24
}
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <init_devices_servo>:


//Function to initialize all the peripherals
void init_devices_servo(void)
{
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
 	cli(); 						//disable all interrupts
    1d8a:	f8 94       	cli
 	port_init_servo();
    1d8c:	0e 94 77 0e 	call	0x1cee	; 0x1cee <port_init_servo>
 	timer1_init();
    1d90:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <timer1_init>
 	sei(); 						//re-enable interrupts 
    1d94:	78 94       	sei
}
    1d96:	cf 91       	pop	r28
    1d98:	df 91       	pop	r29
    1d9a:	08 95       	ret

00001d9c <servo_1>:


//Function to rotate Servo 1 by a specified angle in the multiples of 2.25 degrees
void servo_1(unsigned char degrees)  
{
    1d9c:	0f 93       	push	r16
    1d9e:	1f 93       	push	r17
    1da0:	df 93       	push	r29
    1da2:	cf 93       	push	r28
    1da4:	00 d0       	rcall	.+0      	; 0x1da6 <servo_1+0xa>
    1da6:	0f 92       	push	r0
    1da8:	0f 92       	push	r0
    1daa:	cd b7       	in	r28, 0x3d	; 61
    1dac:	de b7       	in	r29, 0x3e	; 62
    1dae:	8d 83       	std	Y+5, r24	; 0x05
 	float PositionPanServo = 0;
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	a0 e0       	ldi	r26, 0x00	; 0
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	89 83       	std	Y+1, r24	; 0x01
    1dba:	9a 83       	std	Y+2, r25	; 0x02
    1dbc:	ab 83       	std	Y+3, r26	; 0x03
    1dbe:	bc 83       	std	Y+4, r27	; 0x04
 	PositionPanServo = ((float)degrees / 2.25) + 21.0;
    1dc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc2:	88 2f       	mov	r24, r24
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	a0 e0       	ldi	r26, 0x00	; 0
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	bc 01       	movw	r22, r24
    1dcc:	cd 01       	movw	r24, r26
    1dce:	0e 94 98 20 	call	0x4130	; 0x4130 <__floatunsisf>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	bc 01       	movw	r22, r24
    1dd8:	cd 01       	movw	r24, r26
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	40 e1       	ldi	r20, 0x10	; 16
    1de0:	50 e4       	ldi	r21, 0x40	; 64
    1de2:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <__divsf3>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	bc 01       	movw	r22, r24
    1dec:	cd 01       	movw	r24, r26
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	48 ea       	ldi	r20, 0xA8	; 168
    1df4:	51 e4       	ldi	r21, 0x41	; 65
    1df6:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <__addsf3>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	89 83       	std	Y+1, r24	; 0x01
    1e00:	9a 83       	std	Y+2, r25	; 0x02
    1e02:	ab 83       	std	Y+3, r26	; 0x03
    1e04:	bc 83       	std	Y+4, r27	; 0x04
 	OCR1AH = 0x00;
    1e06:	e9 e8       	ldi	r30, 0x89	; 137
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	10 82       	st	Z, r1
 	OCR1AL = (unsigned char) PositionPanServo;
    1e0c:	08 e8       	ldi	r16, 0x88	; 136
    1e0e:	10 e0       	ldi	r17, 0x00	; 0
    1e10:	69 81       	ldd	r22, Y+1	; 0x01
    1e12:	7a 81       	ldd	r23, Y+2	; 0x02
    1e14:	8b 81       	ldd	r24, Y+3	; 0x03
    1e16:	9c 81       	ldd	r25, Y+4	; 0x04
    1e18:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	f8 01       	movw	r30, r16
    1e22:	80 83       	st	Z, r24
}
    1e24:	0f 90       	pop	r0
    1e26:	0f 90       	pop	r0
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	cf 91       	pop	r28
    1e30:	df 91       	pop	r29
    1e32:	1f 91       	pop	r17
    1e34:	0f 91       	pop	r16
    1e36:	08 95       	ret

00001e38 <servo_2>:


//Function to rotate Servo 2 by a specified angle in the multiples of 2.25 degrees
void servo_2(unsigned char degrees)
{
    1e38:	0f 93       	push	r16
    1e3a:	1f 93       	push	r17
    1e3c:	df 93       	push	r29
    1e3e:	cf 93       	push	r28
    1e40:	00 d0       	rcall	.+0      	; 0x1e42 <servo_2+0xa>
    1e42:	0f 92       	push	r0
    1e44:	0f 92       	push	r0
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62
    1e4a:	8d 83       	std	Y+5, r24	; 0x05
 	float PositionTiltServo = 0;
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	a0 e0       	ldi	r26, 0x00	; 0
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	89 83       	std	Y+1, r24	; 0x01
    1e56:	9a 83       	std	Y+2, r25	; 0x02
    1e58:	ab 83       	std	Y+3, r26	; 0x03
    1e5a:	bc 83       	std	Y+4, r27	; 0x04
 	PositionTiltServo = ((float)degrees / 2.25) + 21.0;
    1e5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5e:	88 2f       	mov	r24, r24
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	a0 e0       	ldi	r26, 0x00	; 0
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	bc 01       	movw	r22, r24
    1e68:	cd 01       	movw	r24, r26
    1e6a:	0e 94 98 20 	call	0x4130	; 0x4130 <__floatunsisf>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	bc 01       	movw	r22, r24
    1e74:	cd 01       	movw	r24, r26
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	40 e1       	ldi	r20, 0x10	; 16
    1e7c:	50 e4       	ldi	r21, 0x40	; 64
    1e7e:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <__divsf3>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	bc 01       	movw	r22, r24
    1e88:	cd 01       	movw	r24, r26
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	48 ea       	ldi	r20, 0xA8	; 168
    1e90:	51 e4       	ldi	r21, 0x41	; 65
    1e92:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <__addsf3>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	89 83       	std	Y+1, r24	; 0x01
    1e9c:	9a 83       	std	Y+2, r25	; 0x02
    1e9e:	ab 83       	std	Y+3, r26	; 0x03
    1ea0:	bc 83       	std	Y+4, r27	; 0x04
 	OCR1BH = 0x00;
    1ea2:	eb e8       	ldi	r30, 0x8B	; 139
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	10 82       	st	Z, r1
 	OCR1BL = (unsigned char) PositionTiltServo;
    1ea8:	0a e8       	ldi	r16, 0x8A	; 138
    1eaa:	10 e0       	ldi	r17, 0x00	; 0
    1eac:	69 81       	ldd	r22, Y+1	; 0x01
    1eae:	7a 81       	ldd	r23, Y+2	; 0x02
    1eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb4:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	f8 01       	movw	r30, r16
    1ebe:	80 83       	st	Z, r24
}
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	cf 91       	pop	r28
    1ecc:	df 91       	pop	r29
    1ece:	1f 91       	pop	r17
    1ed0:	0f 91       	pop	r16
    1ed2:	08 95       	ret

00001ed4 <servo_3>:


//Function to rotate Servo 3 by a specified angle in the multiples of 2.25 degrees
void servo_3(unsigned char degrees)
{
    1ed4:	0f 93       	push	r16
    1ed6:	1f 93       	push	r17
    1ed8:	df 93       	push	r29
    1eda:	cf 93       	push	r28
    1edc:	00 d0       	rcall	.+0      	; 0x1ede <servo_3+0xa>
    1ede:	0f 92       	push	r0
    1ee0:	0f 92       	push	r0
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
    1ee6:	8d 83       	std	Y+5, r24	; 0x05
 	float PositionTiltServo = 0;
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	a0 e0       	ldi	r26, 0x00	; 0
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	89 83       	std	Y+1, r24	; 0x01
    1ef2:	9a 83       	std	Y+2, r25	; 0x02
    1ef4:	ab 83       	std	Y+3, r26	; 0x03
    1ef6:	bc 83       	std	Y+4, r27	; 0x04
 	PositionTiltServo = ((float)degrees / 2.25) + 21.0;
    1ef8:	8d 81       	ldd	r24, Y+5	; 0x05
    1efa:	88 2f       	mov	r24, r24
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	a0 e0       	ldi	r26, 0x00	; 0
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	bc 01       	movw	r22, r24
    1f04:	cd 01       	movw	r24, r26
    1f06:	0e 94 98 20 	call	0x4130	; 0x4130 <__floatunsisf>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	bc 01       	movw	r22, r24
    1f10:	cd 01       	movw	r24, r26
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	40 e1       	ldi	r20, 0x10	; 16
    1f18:	50 e4       	ldi	r21, 0x40	; 64
    1f1a:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <__divsf3>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	bc 01       	movw	r22, r24
    1f24:	cd 01       	movw	r24, r26
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	48 ea       	ldi	r20, 0xA8	; 168
    1f2c:	51 e4       	ldi	r21, 0x41	; 65
    1f2e:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <__addsf3>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	89 83       	std	Y+1, r24	; 0x01
    1f38:	9a 83       	std	Y+2, r25	; 0x02
    1f3a:	ab 83       	std	Y+3, r26	; 0x03
    1f3c:	bc 83       	std	Y+4, r27	; 0x04
 	OCR1CH = 0x00;
    1f3e:	ed e8       	ldi	r30, 0x8D	; 141
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	10 82       	st	Z, r1
 	OCR1CL = (unsigned char) PositionTiltServo;
    1f44:	0c e8       	ldi	r16, 0x8C	; 140
    1f46:	10 e0       	ldi	r17, 0x00	; 0
    1f48:	69 81       	ldd	r22, Y+1	; 0x01
    1f4a:	7a 81       	ldd	r23, Y+2	; 0x02
    1f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f50:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	f8 01       	movw	r30, r16
    1f5a:	80 83       	st	Z, r24
}
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	cf 91       	pop	r28
    1f68:	df 91       	pop	r29
    1f6a:	1f 91       	pop	r17
    1f6c:	0f 91       	pop	r16
    1f6e:	08 95       	ret

00001f70 <servo_1_free>:
//servo_free functions unlocks the servo motors from the any angle 
//and make them free by giving 100% duty cycle at the PWM. This function can be used to 
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) 	//makes servo 1 free rotating
{
    1f70:	df 93       	push	r29
    1f72:	cf 93       	push	r28
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
 	OCR1AH = 0x03; 
    1f78:	e9 e8       	ldi	r30, 0x89	; 137
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	83 e0       	ldi	r24, 0x03	; 3
    1f7e:	80 83       	st	Z, r24
 	OCR1AL = 0xFF; 			//Servo 1 off
    1f80:	e8 e8       	ldi	r30, 0x88	; 136
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	8f ef       	ldi	r24, 0xFF	; 255
    1f86:	80 83       	st	Z, r24
}
    1f88:	cf 91       	pop	r28
    1f8a:	df 91       	pop	r29
    1f8c:	08 95       	ret

00001f8e <servo_2_free>:

void servo_2_free (void) 	//makes servo 2 free rotating
{
    1f8e:	df 93       	push	r29
    1f90:	cf 93       	push	r28
    1f92:	cd b7       	in	r28, 0x3d	; 61
    1f94:	de b7       	in	r29, 0x3e	; 62
 	OCR1BH = 0x03;
    1f96:	eb e8       	ldi	r30, 0x8B	; 139
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	83 e0       	ldi	r24, 0x03	; 3
    1f9c:	80 83       	st	Z, r24
 	OCR1BL = 0xFF; 			//Servo 2 off
    1f9e:	ea e8       	ldi	r30, 0x8A	; 138
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	8f ef       	ldi	r24, 0xFF	; 255
    1fa4:	80 83       	st	Z, r24
}
    1fa6:	cf 91       	pop	r28
    1fa8:	df 91       	pop	r29
    1faa:	08 95       	ret

00001fac <servo_3_free>:

void servo_3_free (void) 	//makes servo 3 free rotating
{
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
 	OCR1CH = 0x03;
    1fb4:	ed e8       	ldi	r30, 0x8D	; 141
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	83 e0       	ldi	r24, 0x03	; 3
    1fba:	80 83       	st	Z, r24
 	OCR1CL = 0xFF; 			//Servo 3 off
    1fbc:	ec e8       	ldi	r30, 0x8C	; 140
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	8f ef       	ldi	r24, 0xFF	; 255
    1fc2:	80 83       	st	Z, r24
} 
    1fc4:	cf 91       	pop	r28
    1fc6:	df 91       	pop	r29
    1fc8:	08 95       	ret

00001fca <main>:


//Main function - Performs the movement according to the data sent by matlab code.

void main()
{
    1fca:	0f 93       	push	r16
    1fcc:	1f 93       	push	r17
    1fce:	df 93       	push	r29
    1fd0:	cf 93       	push	r28
    1fd2:	cd b7       	in	r28, 0x3d	; 61
    1fd4:	de b7       	in	r29, 0x3e	; 62
    1fd6:	c7 5e       	subi	r28, 0xE7	; 231
    1fd8:	d0 40       	sbci	r29, 0x00	; 0
    1fda:	0f b6       	in	r0, 0x3f	; 63
    1fdc:	f8 94       	cli
    1fde:	de bf       	out	0x3e, r29	; 62
    1fe0:	0f be       	out	0x3f, r0	; 63
    1fe2:	cd bf       	out	0x3d, r28	; 61
	unsigned int value,value1,mode;
	//int a=0,b=0;
	cli();
    1fe4:	f8 94       	cli
	INIT_PORTS();										//Initialize ports
    1fe6:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <INIT_PORTS>
	uart3_init();										//Initialize UART3 for bluetooth communication
    1fea:	0e 94 b7 0a 	call	0x156e	; 0x156e <uart3_init>
	timer5_init();
    1fee:	0e 94 04 0b 	call	0x1608	; 0x1608 <timer5_init>
	sei();
    1ff2:	78 94       	sei

	INIT_PORTS_ROTATE();								//Initialize ports 
    1ff4:	0e 94 99 0a 	call	0x1532	; 0x1532 <INIT_PORTS_ROTATE>
	right_position_encoder_interrupt_init();			//Initialize control registers for wheel
    1ff8:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <right_position_encoder_interrupt_init>
	left_position_encoder_interrupt_init();				//           encoders.
    1ffc:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <left_position_encoder_interrupt_init>
			
	init_devices();
    2000:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <init_devices>
	lcd_set_4bit();										//LCD initialization functions.
    2004:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_set_4bit>
	lcd_init();
    2008:	0e 94 d5 05 	call	0xbaa	; 0xbaa <lcd_init>

	mode = 1;
    200c:	fe 01       	movw	r30, r28
    200e:	ee 51       	subi	r30, 0x1E	; 30
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	91 83       	std	Z+1, r25	; 0x01
    2018:	80 83       	st	Z, r24
	unsigned char angle = 0;
    201a:	fe 01       	movw	r30, r28
    201c:	ef 51       	subi	r30, 0x1F	; 31
    201e:	ff 4f       	sbci	r31, 0xFF	; 255
    2020:	10 82       	st	Z, r1
 	init_devices_servo();								//Initialize servo motors.
    2022:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <init_devices_servo>

	
	sharp = ADC_Conversion(11);							//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
    2026:	8b e0       	ldi	r24, 0x0B	; 11
    2028:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <ADC_Conversion>
    202c:	80 93 23 03 	sts	0x0323, r24
	value = Sharp_GP2D12_estimation(sharp);				//Stores Distance calsulated in a variable "value".
    2030:	80 91 23 03 	lds	r24, 0x0323
    2034:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <Sharp_GP2D12_estimation>
    2038:	fe 01       	movw	r30, r28
    203a:	ea 51       	subi	r30, 0x1A	; 26
    203c:	ff 4f       	sbci	r31, 0xFF	; 255
    203e:	91 83       	std	Z+1, r25	; 0x01
    2040:	80 83       	st	Z, r24
	lcd_print(1,1,value,3);
    2042:	fe 01       	movw	r30, r28
    2044:	ea 51       	subi	r30, 0x1A	; 26
    2046:	ff 4f       	sbci	r31, 0xFF	; 255
    2048:	20 81       	ld	r18, Z
    204a:	31 81       	ldd	r19, Z+1	; 0x01
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	61 e0       	ldi	r22, 0x01	; 1
    2050:	a9 01       	movw	r20, r18
    2052:	23 e0       	ldi	r18, 0x03	; 3
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>

	sharp1 = ADC_Conversion(9);						//Stores the Analog value of front sharp connected to ADC channel 10 into variable "sharp"
    205a:	89 e0       	ldi	r24, 0x09	; 9
    205c:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <ADC_Conversion>
    2060:	80 93 1b 03 	sts	0x031B, r24
	value1 = Sharp_GP2D12_estimation(sharp1);			//Stores Distance calsulated in a variable "value".
    2064:	80 91 1b 03 	lds	r24, 0x031B
    2068:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <Sharp_GP2D12_estimation>
    206c:	fe 01       	movw	r30, r28
    206e:	ec 51       	subi	r30, 0x1C	; 28
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	91 83       	std	Z+1, r25	; 0x01
    2074:	80 83       	st	Z, r24
	lcd_print(1,5,value1,3);
    2076:	fe 01       	movw	r30, r28
    2078:	ec 51       	subi	r30, 0x1C	; 28
    207a:	ff 4f       	sbci	r31, 0xFF	; 255
    207c:	20 81       	ld	r18, Z
    207e:	31 81       	ldd	r19, Z+1	; 0x01
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	65 e0       	ldi	r22, 0x05	; 5
    2084:	a9 01       	movw	r20, r18
    2086:	23 e0       	ldi	r18, 0x03	; 3
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
				

	data='0';
    208e:	80 e3       	ldi	r24, 0x30	; 48
    2090:	80 93 1e 03 	sts	0x031E, r24
	lcd_cursor(2,3);
    2094:	82 e0       	ldi	r24, 0x02	; 2
    2096:	63 e0       	ldi	r22, 0x03	; 3
    2098:	0e 94 44 09 	call	0x1288	; 0x1288 <lcd_cursor>
	lcd_wr_char(data);
    209c:	80 91 1e 03 	lds	r24, 0x031E
    20a0:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>

	while(1)
	{
		sharp = ADC_Conversion(11);							//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
    20a4:	8b e0       	ldi	r24, 0x0B	; 11
    20a6:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <ADC_Conversion>
    20aa:	80 93 23 03 	sts	0x0323, r24
		value = Sharp_GP2D12_estimation(sharp);				//Stores Distance calsulated in a variable "value".
    20ae:	80 91 23 03 	lds	r24, 0x0323
    20b2:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <Sharp_GP2D12_estimation>
    20b6:	fe 01       	movw	r30, r28
    20b8:	ea 51       	subi	r30, 0x1A	; 26
    20ba:	ff 4f       	sbci	r31, 0xFF	; 255
    20bc:	91 83       	std	Z+1, r25	; 0x01
    20be:	80 83       	st	Z, r24
		//value=(int)sharp;
		lcd_print(1,1,value,3);
    20c0:	fe 01       	movw	r30, r28
    20c2:	ea 51       	subi	r30, 0x1A	; 26
    20c4:	ff 4f       	sbci	r31, 0xFF	; 255
    20c6:	20 81       	ld	r18, Z
    20c8:	31 81       	ldd	r19, Z+1	; 0x01
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	61 e0       	ldi	r22, 0x01	; 1
    20ce:	a9 01       	movw	r20, r18
    20d0:	23 e0       	ldi	r18, 0x03	; 3
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
		
		sharp1 = ADC_Conversion(9);						//Stores the Analog value of front sharp connected to ADC channel 10 into variable "sharp"
    20d8:	89 e0       	ldi	r24, 0x09	; 9
    20da:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <ADC_Conversion>
    20de:	80 93 1b 03 	sts	0x031B, r24
		value1 = Sharp_GP2D12_estimation(sharp1);			//Stores Distance calsulated in a variable "value".
    20e2:	80 91 1b 03 	lds	r24, 0x031B
    20e6:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <Sharp_GP2D12_estimation>
    20ea:	fe 01       	movw	r30, r28
    20ec:	ec 51       	subi	r30, 0x1C	; 28
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	91 83       	std	Z+1, r25	; 0x01
    20f2:	80 83       	st	Z, r24
		//value1=(int)sharp1;
		lcd_print(1,5,value1,3);
    20f4:	fe 01       	movw	r30, r28
    20f6:	ec 51       	subi	r30, 0x1C	; 28
    20f8:	ff 4f       	sbci	r31, 0xFF	; 255
    20fa:	20 81       	ld	r18, Z
    20fc:	31 81       	ldd	r19, Z+1	; 0x01
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	65 e0       	ldi	r22, 0x05	; 5
    2102:	a9 01       	movw	r20, r18
    2104:	23 e0       	ldi	r18, 0x03	; 3
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
    210c:	0c 94 86 18 	jmp	0x310c	; 0x310c <__stack+0xf0d>

		while(value>115 && value1>240)
		{
			if(data=='F')
    2110:	80 91 1e 03 	lds	r24, 0x031E
    2114:	86 34       	cpi	r24, 0x46	; 70
    2116:	09 f0       	breq	.+2      	; 0x211a <main+0x150>
    2118:	c3 c0       	rjmp	.+390    	; 0x22a0 <__stack+0xa1>
			{
				
					lcd_cursor(2,3);
    211a:	82 e0       	ldi	r24, 0x02	; 2
    211c:	63 e0       	ldi	r22, 0x03	; 3
    211e:	0e 94 44 09 	call	0x1288	; 0x1288 <lcd_cursor>
					lcd_wr_char(data);
    2122:	80 91 1e 03 	lds	r24, 0x031E
    2126:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
					forward();
    212a:	0e 94 16 0b 	call	0x162c	; 0x162c <forward>
					velocity(150,150);
    212e:	86 e9       	ldi	r24, 0x96	; 150
    2130:	66 e9       	ldi	r22, 0x96	; 150
    2132:	0e 94 4c 0b 	call	0x1698	; 0x1698 <velocity>
    2136:	fe 01       	movw	r30, r28
    2138:	e3 52       	subi	r30, 0x23	; 35
    213a:	ff 4f       	sbci	r31, 0xFF	; 255
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	aa e7       	ldi	r26, 0x7A	; 122
    2142:	b4 e4       	ldi	r27, 0x44	; 68
    2144:	80 83       	st	Z, r24
    2146:	91 83       	std	Z+1, r25	; 0x01
    2148:	a2 83       	std	Z+2, r26	; 0x02
    214a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    214c:	8e 01       	movw	r16, r28
    214e:	07 52       	subi	r16, 0x27	; 39
    2150:	1f 4f       	sbci	r17, 0xFF	; 255
    2152:	fe 01       	movw	r30, r28
    2154:	e3 52       	subi	r30, 0x23	; 35
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	60 81       	ld	r22, Z
    215a:	71 81       	ldd	r23, Z+1	; 0x01
    215c:	82 81       	ldd	r24, Z+2	; 0x02
    215e:	93 81       	ldd	r25, Z+3	; 0x03
    2160:	2d ec       	ldi	r18, 0xCD	; 205
    2162:	3c ec       	ldi	r19, 0xCC	; 204
    2164:	4c e2       	ldi	r20, 0x2C	; 44
    2166:	55 e4       	ldi	r21, 0x45	; 69
    2168:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	f8 01       	movw	r30, r16
    2172:	80 83       	st	Z, r24
    2174:	91 83       	std	Z+1, r25	; 0x01
    2176:	a2 83       	std	Z+2, r26	; 0x02
    2178:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    217a:	fe 01       	movw	r30, r28
    217c:	e7 52       	subi	r30, 0x27	; 39
    217e:	ff 4f       	sbci	r31, 0xFF	; 255
    2180:	60 81       	ld	r22, Z
    2182:	71 81       	ldd	r23, Z+1	; 0x01
    2184:	82 81       	ldd	r24, Z+2	; 0x02
    2186:	93 81       	ldd	r25, Z+3	; 0x03
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	40 e8       	ldi	r20, 0x80	; 128
    218e:	5f e3       	ldi	r21, 0x3F	; 63
    2190:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__ltsf2>
    2194:	88 23       	and	r24, r24
    2196:	44 f4       	brge	.+16     	; 0x21a8 <main+0x1de>
		__ticks = 1;
    2198:	fe 01       	movw	r30, r28
    219a:	e9 52       	subi	r30, 0x29	; 41
    219c:	ff 4f       	sbci	r31, 0xFF	; 255
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	91 83       	std	Z+1, r25	; 0x01
    21a4:	80 83       	st	Z, r24
    21a6:	64 c0       	rjmp	.+200    	; 0x2270 <__stack+0x71>
	else if (__tmp > 65535)
    21a8:	fe 01       	movw	r30, r28
    21aa:	e7 52       	subi	r30, 0x27	; 39
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	60 81       	ld	r22, Z
    21b0:	71 81       	ldd	r23, Z+1	; 0x01
    21b2:	82 81       	ldd	r24, Z+2	; 0x02
    21b4:	93 81       	ldd	r25, Z+3	; 0x03
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	3f ef       	ldi	r19, 0xFF	; 255
    21ba:	4f e7       	ldi	r20, 0x7F	; 127
    21bc:	57 e4       	ldi	r21, 0x47	; 71
    21be:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__gtsf2>
    21c2:	18 16       	cp	r1, r24
    21c4:	0c f0       	brlt	.+2      	; 0x21c8 <main+0x1fe>
    21c6:	43 c0       	rjmp	.+134    	; 0x224e <__stack+0x4f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c8:	fe 01       	movw	r30, r28
    21ca:	e3 52       	subi	r30, 0x23	; 35
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	60 81       	ld	r22, Z
    21d0:	71 81       	ldd	r23, Z+1	; 0x01
    21d2:	82 81       	ldd	r24, Z+2	; 0x02
    21d4:	93 81       	ldd	r25, Z+3	; 0x03
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	40 e2       	ldi	r20, 0x20	; 32
    21dc:	51 e4       	ldi	r21, 0x41	; 65
    21de:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	8e 01       	movw	r16, r28
    21e8:	09 52       	subi	r16, 0x29	; 41
    21ea:	1f 4f       	sbci	r17, 0xFF	; 255
    21ec:	bc 01       	movw	r22, r24
    21ee:	cd 01       	movw	r24, r26
    21f0:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	f8 01       	movw	r30, r16
    21fa:	91 83       	std	Z+1, r25	; 0x01
    21fc:	80 83       	st	Z, r24
    21fe:	1f c0       	rjmp	.+62     	; 0x223e <__stack+0x3f>
    2200:	fe 01       	movw	r30, r28
    2202:	eb 52       	subi	r30, 0x2B	; 43
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	84 e1       	ldi	r24, 0x14	; 20
    2208:	91 e0       	ldi	r25, 0x01	; 1
    220a:	91 83       	std	Z+1, r25	; 0x01
    220c:	80 83       	st	Z, r24
    220e:	fe 01       	movw	r30, r28
    2210:	eb 52       	subi	r30, 0x2B	; 43
    2212:	ff 4f       	sbci	r31, 0xFF	; 255
    2214:	80 81       	ld	r24, Z
    2216:	91 81       	ldd	r25, Z+1	; 0x01
    2218:	01 97       	sbiw	r24, 0x01	; 1
    221a:	f1 f7       	brne	.-4      	; 0x2218 <__stack+0x19>
    221c:	fe 01       	movw	r30, r28
    221e:	eb 52       	subi	r30, 0x2B	; 43
    2220:	ff 4f       	sbci	r31, 0xFF	; 255
    2222:	91 83       	std	Z+1, r25	; 0x01
    2224:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2226:	de 01       	movw	r26, r28
    2228:	a9 52       	subi	r26, 0x29	; 41
    222a:	bf 4f       	sbci	r27, 0xFF	; 255
    222c:	fe 01       	movw	r30, r28
    222e:	e9 52       	subi	r30, 0x29	; 41
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	80 81       	ld	r24, Z
    2234:	91 81       	ldd	r25, Z+1	; 0x01
    2236:	01 97       	sbiw	r24, 0x01	; 1
    2238:	11 96       	adiw	r26, 0x01	; 1
    223a:	9c 93       	st	X, r25
    223c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    223e:	fe 01       	movw	r30, r28
    2240:	e9 52       	subi	r30, 0x29	; 41
    2242:	ff 4f       	sbci	r31, 0xFF	; 255
    2244:	80 81       	ld	r24, Z
    2246:	91 81       	ldd	r25, Z+1	; 0x01
    2248:	00 97       	sbiw	r24, 0x00	; 0
    224a:	d1 f6       	brne	.-76     	; 0x2200 <__stack+0x1>
    224c:	27 c0       	rjmp	.+78     	; 0x229c <__stack+0x9d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    224e:	8e 01       	movw	r16, r28
    2250:	09 52       	subi	r16, 0x29	; 41
    2252:	1f 4f       	sbci	r17, 0xFF	; 255
    2254:	fe 01       	movw	r30, r28
    2256:	e7 52       	subi	r30, 0x27	; 39
    2258:	ff 4f       	sbci	r31, 0xFF	; 255
    225a:	60 81       	ld	r22, Z
    225c:	71 81       	ldd	r23, Z+1	; 0x01
    225e:	82 81       	ldd	r24, Z+2	; 0x02
    2260:	93 81       	ldd	r25, Z+3	; 0x03
    2262:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	f8 01       	movw	r30, r16
    226c:	91 83       	std	Z+1, r25	; 0x01
    226e:	80 83       	st	Z, r24
    2270:	de 01       	movw	r26, r28
    2272:	ad 52       	subi	r26, 0x2D	; 45
    2274:	bf 4f       	sbci	r27, 0xFF	; 255
    2276:	fe 01       	movw	r30, r28
    2278:	e9 52       	subi	r30, 0x29	; 41
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	80 81       	ld	r24, Z
    227e:	91 81       	ldd	r25, Z+1	; 0x01
    2280:	8d 93       	st	X+, r24
    2282:	9c 93       	st	X, r25
    2284:	fe 01       	movw	r30, r28
    2286:	ed 52       	subi	r30, 0x2D	; 45
    2288:	ff 4f       	sbci	r31, 0xFF	; 255
    228a:	80 81       	ld	r24, Z
    228c:	91 81       	ldd	r25, Z+1	; 0x01
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	f1 f7       	brne	.-4      	; 0x228e <__stack+0x8f>
    2292:	fe 01       	movw	r30, r28
    2294:	ed 52       	subi	r30, 0x2D	; 45
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	91 83       	std	Z+1, r25	; 0x01
    229a:	80 83       	st	Z, r24
					_delay_ms(1000);
					stop();
    229c:	0e 94 42 0b 	call	0x1684	; 0x1684 <stop>
			}
			if(data == 'M')
    22a0:	80 91 1e 03 	lds	r24, 0x031E
    22a4:	8d 34       	cpi	r24, 0x4D	; 77
    22a6:	69 f4       	brne	.+26     	; 0x22c2 <__stack+0xc3>
			{
				mode = 0;
    22a8:	fe 01       	movw	r30, r28
    22aa:	ee 51       	subi	r30, 0x1E	; 30
    22ac:	ff 4f       	sbci	r31, 0xFF	; 255
    22ae:	11 82       	std	Z+1, r1	; 0x01
    22b0:	10 82       	st	Z, r1
				lcd_cursor(2,3);
    22b2:	82 e0       	ldi	r24, 0x02	; 2
    22b4:	63 e0       	ldi	r22, 0x03	; 3
    22b6:	0e 94 44 09 	call	0x1288	; 0x1288 <lcd_cursor>
				lcd_wr_char(data);
    22ba:	80 91 1e 03 	lds	r24, 0x031E
    22be:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
			}
			if(data == 'm')
    22c2:	80 91 1e 03 	lds	r24, 0x031E
    22c6:	8d 36       	cpi	r24, 0x6D	; 109
    22c8:	79 f4       	brne	.+30     	; 0x22e8 <__stack+0xe9>
			{
				mode = 1;
    22ca:	fe 01       	movw	r30, r28
    22cc:	ee 51       	subi	r30, 0x1E	; 30
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	91 83       	std	Z+1, r25	; 0x01
    22d6:	80 83       	st	Z, r24
				lcd_cursor(2,3);
    22d8:	82 e0       	ldi	r24, 0x02	; 2
    22da:	63 e0       	ldi	r22, 0x03	; 3
    22dc:	0e 94 44 09 	call	0x1288	; 0x1288 <lcd_cursor>
				lcd_wr_char(data);
    22e0:	80 91 1e 03 	lds	r24, 0x031E
    22e4:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
			}
			if(data=='B')
    22e8:	80 91 1e 03 	lds	r24, 0x031E
    22ec:	82 34       	cpi	r24, 0x42	; 66
    22ee:	09 f0       	breq	.+2      	; 0x22f2 <__stack+0xf3>
    22f0:	c3 c0       	rjmp	.+390    	; 0x2478 <__stack+0x279>
			{
				lcd_cursor(2,3);
    22f2:	82 e0       	ldi	r24, 0x02	; 2
    22f4:	63 e0       	ldi	r22, 0x03	; 3
    22f6:	0e 94 44 09 	call	0x1288	; 0x1288 <lcd_cursor>
				lcd_wr_char(data);
    22fa:	80 91 1e 03 	lds	r24, 0x031E
    22fe:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
				back();
    2302:	0e 94 37 0b 	call	0x166e	; 0x166e <back>
				velocity(150,150);
    2306:	86 e9       	ldi	r24, 0x96	; 150
    2308:	66 e9       	ldi	r22, 0x96	; 150
    230a:	0e 94 4c 0b 	call	0x1698	; 0x1698 <velocity>
    230e:	fe 01       	movw	r30, r28
    2310:	e1 53       	subi	r30, 0x31	; 49
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	aa e7       	ldi	r26, 0x7A	; 122
    231a:	b3 e4       	ldi	r27, 0x43	; 67
    231c:	80 83       	st	Z, r24
    231e:	91 83       	std	Z+1, r25	; 0x01
    2320:	a2 83       	std	Z+2, r26	; 0x02
    2322:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2324:	8e 01       	movw	r16, r28
    2326:	05 53       	subi	r16, 0x35	; 53
    2328:	1f 4f       	sbci	r17, 0xFF	; 255
    232a:	fe 01       	movw	r30, r28
    232c:	e1 53       	subi	r30, 0x31	; 49
    232e:	ff 4f       	sbci	r31, 0xFF	; 255
    2330:	60 81       	ld	r22, Z
    2332:	71 81       	ldd	r23, Z+1	; 0x01
    2334:	82 81       	ldd	r24, Z+2	; 0x02
    2336:	93 81       	ldd	r25, Z+3	; 0x03
    2338:	2d ec       	ldi	r18, 0xCD	; 205
    233a:	3c ec       	ldi	r19, 0xCC	; 204
    233c:	4c e2       	ldi	r20, 0x2C	; 44
    233e:	55 e4       	ldi	r21, 0x45	; 69
    2340:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	f8 01       	movw	r30, r16
    234a:	80 83       	st	Z, r24
    234c:	91 83       	std	Z+1, r25	; 0x01
    234e:	a2 83       	std	Z+2, r26	; 0x02
    2350:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2352:	fe 01       	movw	r30, r28
    2354:	e5 53       	subi	r30, 0x35	; 53
    2356:	ff 4f       	sbci	r31, 0xFF	; 255
    2358:	60 81       	ld	r22, Z
    235a:	71 81       	ldd	r23, Z+1	; 0x01
    235c:	82 81       	ldd	r24, Z+2	; 0x02
    235e:	93 81       	ldd	r25, Z+3	; 0x03
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	40 e8       	ldi	r20, 0x80	; 128
    2366:	5f e3       	ldi	r21, 0x3F	; 63
    2368:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__ltsf2>
    236c:	88 23       	and	r24, r24
    236e:	44 f4       	brge	.+16     	; 0x2380 <__stack+0x181>
		__ticks = 1;
    2370:	fe 01       	movw	r30, r28
    2372:	e7 53       	subi	r30, 0x37	; 55
    2374:	ff 4f       	sbci	r31, 0xFF	; 255
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	91 83       	std	Z+1, r25	; 0x01
    237c:	80 83       	st	Z, r24
    237e:	64 c0       	rjmp	.+200    	; 0x2448 <__stack+0x249>
	else if (__tmp > 65535)
    2380:	fe 01       	movw	r30, r28
    2382:	e5 53       	subi	r30, 0x35	; 53
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	60 81       	ld	r22, Z
    2388:	71 81       	ldd	r23, Z+1	; 0x01
    238a:	82 81       	ldd	r24, Z+2	; 0x02
    238c:	93 81       	ldd	r25, Z+3	; 0x03
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	3f ef       	ldi	r19, 0xFF	; 255
    2392:	4f e7       	ldi	r20, 0x7F	; 127
    2394:	57 e4       	ldi	r21, 0x47	; 71
    2396:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__gtsf2>
    239a:	18 16       	cp	r1, r24
    239c:	0c f0       	brlt	.+2      	; 0x23a0 <__stack+0x1a1>
    239e:	43 c0       	rjmp	.+134    	; 0x2426 <__stack+0x227>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a0:	fe 01       	movw	r30, r28
    23a2:	e1 53       	subi	r30, 0x31	; 49
    23a4:	ff 4f       	sbci	r31, 0xFF	; 255
    23a6:	60 81       	ld	r22, Z
    23a8:	71 81       	ldd	r23, Z+1	; 0x01
    23aa:	82 81       	ldd	r24, Z+2	; 0x02
    23ac:	93 81       	ldd	r25, Z+3	; 0x03
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	40 e2       	ldi	r20, 0x20	; 32
    23b4:	51 e4       	ldi	r21, 0x41	; 65
    23b6:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	8e 01       	movw	r16, r28
    23c0:	07 53       	subi	r16, 0x37	; 55
    23c2:	1f 4f       	sbci	r17, 0xFF	; 255
    23c4:	bc 01       	movw	r22, r24
    23c6:	cd 01       	movw	r24, r26
    23c8:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	f8 01       	movw	r30, r16
    23d2:	91 83       	std	Z+1, r25	; 0x01
    23d4:	80 83       	st	Z, r24
    23d6:	1f c0       	rjmp	.+62     	; 0x2416 <__stack+0x217>
    23d8:	fe 01       	movw	r30, r28
    23da:	e9 53       	subi	r30, 0x39	; 57
    23dc:	ff 4f       	sbci	r31, 0xFF	; 255
    23de:	84 e1       	ldi	r24, 0x14	; 20
    23e0:	91 e0       	ldi	r25, 0x01	; 1
    23e2:	91 83       	std	Z+1, r25	; 0x01
    23e4:	80 83       	st	Z, r24
    23e6:	fe 01       	movw	r30, r28
    23e8:	e9 53       	subi	r30, 0x39	; 57
    23ea:	ff 4f       	sbci	r31, 0xFF	; 255
    23ec:	80 81       	ld	r24, Z
    23ee:	91 81       	ldd	r25, Z+1	; 0x01
    23f0:	01 97       	sbiw	r24, 0x01	; 1
    23f2:	f1 f7       	brne	.-4      	; 0x23f0 <__stack+0x1f1>
    23f4:	fe 01       	movw	r30, r28
    23f6:	e9 53       	subi	r30, 0x39	; 57
    23f8:	ff 4f       	sbci	r31, 0xFF	; 255
    23fa:	91 83       	std	Z+1, r25	; 0x01
    23fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23fe:	de 01       	movw	r26, r28
    2400:	a7 53       	subi	r26, 0x37	; 55
    2402:	bf 4f       	sbci	r27, 0xFF	; 255
    2404:	fe 01       	movw	r30, r28
    2406:	e7 53       	subi	r30, 0x37	; 55
    2408:	ff 4f       	sbci	r31, 0xFF	; 255
    240a:	80 81       	ld	r24, Z
    240c:	91 81       	ldd	r25, Z+1	; 0x01
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	11 96       	adiw	r26, 0x01	; 1
    2412:	9c 93       	st	X, r25
    2414:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2416:	fe 01       	movw	r30, r28
    2418:	e7 53       	subi	r30, 0x37	; 55
    241a:	ff 4f       	sbci	r31, 0xFF	; 255
    241c:	80 81       	ld	r24, Z
    241e:	91 81       	ldd	r25, Z+1	; 0x01
    2420:	00 97       	sbiw	r24, 0x00	; 0
    2422:	d1 f6       	brne	.-76     	; 0x23d8 <__stack+0x1d9>
    2424:	27 c0       	rjmp	.+78     	; 0x2474 <__stack+0x275>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2426:	8e 01       	movw	r16, r28
    2428:	07 53       	subi	r16, 0x37	; 55
    242a:	1f 4f       	sbci	r17, 0xFF	; 255
    242c:	fe 01       	movw	r30, r28
    242e:	e5 53       	subi	r30, 0x35	; 53
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	60 81       	ld	r22, Z
    2434:	71 81       	ldd	r23, Z+1	; 0x01
    2436:	82 81       	ldd	r24, Z+2	; 0x02
    2438:	93 81       	ldd	r25, Z+3	; 0x03
    243a:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	f8 01       	movw	r30, r16
    2444:	91 83       	std	Z+1, r25	; 0x01
    2446:	80 83       	st	Z, r24
    2448:	de 01       	movw	r26, r28
    244a:	ab 53       	subi	r26, 0x3B	; 59
    244c:	bf 4f       	sbci	r27, 0xFF	; 255
    244e:	fe 01       	movw	r30, r28
    2450:	e7 53       	subi	r30, 0x37	; 55
    2452:	ff 4f       	sbci	r31, 0xFF	; 255
    2454:	80 81       	ld	r24, Z
    2456:	91 81       	ldd	r25, Z+1	; 0x01
    2458:	8d 93       	st	X+, r24
    245a:	9c 93       	st	X, r25
    245c:	fe 01       	movw	r30, r28
    245e:	eb 53       	subi	r30, 0x3B	; 59
    2460:	ff 4f       	sbci	r31, 0xFF	; 255
    2462:	80 81       	ld	r24, Z
    2464:	91 81       	ldd	r25, Z+1	; 0x01
    2466:	01 97       	sbiw	r24, 0x01	; 1
    2468:	f1 f7       	brne	.-4      	; 0x2466 <__stack+0x267>
    246a:	fe 01       	movw	r30, r28
    246c:	eb 53       	subi	r30, 0x3B	; 59
    246e:	ff 4f       	sbci	r31, 0xFF	; 255
    2470:	91 83       	std	Z+1, r25	; 0x01
    2472:	80 83       	st	Z, r24
				_delay_ms(250);
				stop();
    2474:	0e 94 42 0b 	call	0x1684	; 0x1684 <stop>
			}
	
			if(data=='L')
    2478:	80 91 1e 03 	lds	r24, 0x031E
    247c:	8c 34       	cpi	r24, 0x4C	; 76
    247e:	09 f0       	breq	.+2      	; 0x2482 <__stack+0x283>
    2480:	c5 c0       	rjmp	.+394    	; 0x260c <__stack+0x40d>
			{
				lcd_cursor(2,3);
    2482:	82 e0       	ldi	r24, 0x02	; 2
    2484:	63 e0       	ldi	r22, 0x03	; 3
    2486:	0e 94 44 09 	call	0x1288	; 0x1288 <lcd_cursor>
				lcd_wr_char(data);
    248a:	80 91 1e 03 	lds	r24, 0x031E
    248e:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
				angle_rotate_left(5);
    2492:	85 e0       	ldi	r24, 0x05	; 5
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	0e 94 14 0c 	call	0x1828	; 0x1828 <angle_rotate_left>
				velocity(150,150);
    249a:	86 e9       	ldi	r24, 0x96	; 150
    249c:	66 e9       	ldi	r22, 0x96	; 150
    249e:	0e 94 4c 0b 	call	0x1698	; 0x1698 <velocity>
    24a2:	fe 01       	movw	r30, r28
    24a4:	ef 53       	subi	r30, 0x3F	; 63
    24a6:	ff 4f       	sbci	r31, 0xFF	; 255
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	aa e7       	ldi	r26, 0x7A	; 122
    24ae:	b3 e4       	ldi	r27, 0x43	; 67
    24b0:	80 83       	st	Z, r24
    24b2:	91 83       	std	Z+1, r25	; 0x01
    24b4:	a2 83       	std	Z+2, r26	; 0x02
    24b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b8:	8e 01       	movw	r16, r28
    24ba:	03 54       	subi	r16, 0x43	; 67
    24bc:	1f 4f       	sbci	r17, 0xFF	; 255
    24be:	fe 01       	movw	r30, r28
    24c0:	ef 53       	subi	r30, 0x3F	; 63
    24c2:	ff 4f       	sbci	r31, 0xFF	; 255
    24c4:	60 81       	ld	r22, Z
    24c6:	71 81       	ldd	r23, Z+1	; 0x01
    24c8:	82 81       	ldd	r24, Z+2	; 0x02
    24ca:	93 81       	ldd	r25, Z+3	; 0x03
    24cc:	2d ec       	ldi	r18, 0xCD	; 205
    24ce:	3c ec       	ldi	r19, 0xCC	; 204
    24d0:	4c e2       	ldi	r20, 0x2C	; 44
    24d2:	55 e4       	ldi	r21, 0x45	; 69
    24d4:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	f8 01       	movw	r30, r16
    24de:	80 83       	st	Z, r24
    24e0:	91 83       	std	Z+1, r25	; 0x01
    24e2:	a2 83       	std	Z+2, r26	; 0x02
    24e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24e6:	fe 01       	movw	r30, r28
    24e8:	e3 54       	subi	r30, 0x43	; 67
    24ea:	ff 4f       	sbci	r31, 0xFF	; 255
    24ec:	60 81       	ld	r22, Z
    24ee:	71 81       	ldd	r23, Z+1	; 0x01
    24f0:	82 81       	ldd	r24, Z+2	; 0x02
    24f2:	93 81       	ldd	r25, Z+3	; 0x03
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	40 e8       	ldi	r20, 0x80	; 128
    24fa:	5f e3       	ldi	r21, 0x3F	; 63
    24fc:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__ltsf2>
    2500:	88 23       	and	r24, r24
    2502:	44 f4       	brge	.+16     	; 0x2514 <__stack+0x315>
		__ticks = 1;
    2504:	fe 01       	movw	r30, r28
    2506:	e5 54       	subi	r30, 0x45	; 69
    2508:	ff 4f       	sbci	r31, 0xFF	; 255
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	91 83       	std	Z+1, r25	; 0x01
    2510:	80 83       	st	Z, r24
    2512:	64 c0       	rjmp	.+200    	; 0x25dc <__stack+0x3dd>
	else if (__tmp > 65535)
    2514:	fe 01       	movw	r30, r28
    2516:	e3 54       	subi	r30, 0x43	; 67
    2518:	ff 4f       	sbci	r31, 0xFF	; 255
    251a:	60 81       	ld	r22, Z
    251c:	71 81       	ldd	r23, Z+1	; 0x01
    251e:	82 81       	ldd	r24, Z+2	; 0x02
    2520:	93 81       	ldd	r25, Z+3	; 0x03
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	3f ef       	ldi	r19, 0xFF	; 255
    2526:	4f e7       	ldi	r20, 0x7F	; 127
    2528:	57 e4       	ldi	r21, 0x47	; 71
    252a:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__gtsf2>
    252e:	18 16       	cp	r1, r24
    2530:	0c f0       	brlt	.+2      	; 0x2534 <__stack+0x335>
    2532:	43 c0       	rjmp	.+134    	; 0x25ba <__stack+0x3bb>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2534:	fe 01       	movw	r30, r28
    2536:	ef 53       	subi	r30, 0x3F	; 63
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	60 81       	ld	r22, Z
    253c:	71 81       	ldd	r23, Z+1	; 0x01
    253e:	82 81       	ldd	r24, Z+2	; 0x02
    2540:	93 81       	ldd	r25, Z+3	; 0x03
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	40 e2       	ldi	r20, 0x20	; 32
    2548:	51 e4       	ldi	r21, 0x41	; 65
    254a:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	8e 01       	movw	r16, r28
    2554:	05 54       	subi	r16, 0x45	; 69
    2556:	1f 4f       	sbci	r17, 0xFF	; 255
    2558:	bc 01       	movw	r22, r24
    255a:	cd 01       	movw	r24, r26
    255c:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	f8 01       	movw	r30, r16
    2566:	91 83       	std	Z+1, r25	; 0x01
    2568:	80 83       	st	Z, r24
    256a:	1f c0       	rjmp	.+62     	; 0x25aa <__stack+0x3ab>
    256c:	fe 01       	movw	r30, r28
    256e:	e7 54       	subi	r30, 0x47	; 71
    2570:	ff 4f       	sbci	r31, 0xFF	; 255
    2572:	84 e1       	ldi	r24, 0x14	; 20
    2574:	91 e0       	ldi	r25, 0x01	; 1
    2576:	91 83       	std	Z+1, r25	; 0x01
    2578:	80 83       	st	Z, r24
    257a:	fe 01       	movw	r30, r28
    257c:	e7 54       	subi	r30, 0x47	; 71
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	80 81       	ld	r24, Z
    2582:	91 81       	ldd	r25, Z+1	; 0x01
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	f1 f7       	brne	.-4      	; 0x2584 <__stack+0x385>
    2588:	fe 01       	movw	r30, r28
    258a:	e7 54       	subi	r30, 0x47	; 71
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	91 83       	std	Z+1, r25	; 0x01
    2590:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2592:	de 01       	movw	r26, r28
    2594:	a5 54       	subi	r26, 0x45	; 69
    2596:	bf 4f       	sbci	r27, 0xFF	; 255
    2598:	fe 01       	movw	r30, r28
    259a:	e5 54       	subi	r30, 0x45	; 69
    259c:	ff 4f       	sbci	r31, 0xFF	; 255
    259e:	80 81       	ld	r24, Z
    25a0:	91 81       	ldd	r25, Z+1	; 0x01
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	11 96       	adiw	r26, 0x01	; 1
    25a6:	9c 93       	st	X, r25
    25a8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25aa:	fe 01       	movw	r30, r28
    25ac:	e5 54       	subi	r30, 0x45	; 69
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	80 81       	ld	r24, Z
    25b2:	91 81       	ldd	r25, Z+1	; 0x01
    25b4:	00 97       	sbiw	r24, 0x00	; 0
    25b6:	d1 f6       	brne	.-76     	; 0x256c <__stack+0x36d>
    25b8:	27 c0       	rjmp	.+78     	; 0x2608 <__stack+0x409>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ba:	8e 01       	movw	r16, r28
    25bc:	05 54       	subi	r16, 0x45	; 69
    25be:	1f 4f       	sbci	r17, 0xFF	; 255
    25c0:	fe 01       	movw	r30, r28
    25c2:	e3 54       	subi	r30, 0x43	; 67
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	60 81       	ld	r22, Z
    25c8:	71 81       	ldd	r23, Z+1	; 0x01
    25ca:	82 81       	ldd	r24, Z+2	; 0x02
    25cc:	93 81       	ldd	r25, Z+3	; 0x03
    25ce:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    25d2:	dc 01       	movw	r26, r24
    25d4:	cb 01       	movw	r24, r22
    25d6:	f8 01       	movw	r30, r16
    25d8:	91 83       	std	Z+1, r25	; 0x01
    25da:	80 83       	st	Z, r24
    25dc:	de 01       	movw	r26, r28
    25de:	a9 54       	subi	r26, 0x49	; 73
    25e0:	bf 4f       	sbci	r27, 0xFF	; 255
    25e2:	fe 01       	movw	r30, r28
    25e4:	e5 54       	subi	r30, 0x45	; 69
    25e6:	ff 4f       	sbci	r31, 0xFF	; 255
    25e8:	80 81       	ld	r24, Z
    25ea:	91 81       	ldd	r25, Z+1	; 0x01
    25ec:	8d 93       	st	X+, r24
    25ee:	9c 93       	st	X, r25
    25f0:	fe 01       	movw	r30, r28
    25f2:	e9 54       	subi	r30, 0x49	; 73
    25f4:	ff 4f       	sbci	r31, 0xFF	; 255
    25f6:	80 81       	ld	r24, Z
    25f8:	91 81       	ldd	r25, Z+1	; 0x01
    25fa:	01 97       	sbiw	r24, 0x01	; 1
    25fc:	f1 f7       	brne	.-4      	; 0x25fa <__stack+0x3fb>
    25fe:	fe 01       	movw	r30, r28
    2600:	e9 54       	subi	r30, 0x49	; 73
    2602:	ff 4f       	sbci	r31, 0xFF	; 255
    2604:	91 83       	std	Z+1, r25	; 0x01
    2606:	80 83       	st	Z, r24
				_delay_ms(250);
				stop();
    2608:	0e 94 42 0b 	call	0x1684	; 0x1684 <stop>
			}

			if(data=='R')
    260c:	80 91 1e 03 	lds	r24, 0x031E
    2610:	82 35       	cpi	r24, 0x52	; 82
    2612:	09 f0       	breq	.+2      	; 0x2616 <__stack+0x417>
    2614:	c5 c0       	rjmp	.+394    	; 0x27a0 <__stack+0x5a1>
			{
				lcd_cursor(2,3);
    2616:	82 e0       	ldi	r24, 0x02	; 2
    2618:	63 e0       	ldi	r22, 0x03	; 3
    261a:	0e 94 44 09 	call	0x1288	; 0x1288 <lcd_cursor>
				lcd_wr_char(data);
    261e:	80 91 1e 03 	lds	r24, 0x031E
    2622:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
				angle_rotate_right(10);
    2626:	8a e0       	ldi	r24, 0x0A	; 10
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	0e 94 8f 0b 	call	0x171e	; 0x171e <angle_rotate_right>
				velocity(150,150);
    262e:	86 e9       	ldi	r24, 0x96	; 150
    2630:	66 e9       	ldi	r22, 0x96	; 150
    2632:	0e 94 4c 0b 	call	0x1698	; 0x1698 <velocity>
    2636:	fe 01       	movw	r30, r28
    2638:	ed 54       	subi	r30, 0x4D	; 77
    263a:	ff 4f       	sbci	r31, 0xFF	; 255
    263c:	80 e0       	ldi	r24, 0x00	; 0
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	aa e7       	ldi	r26, 0x7A	; 122
    2642:	b3 e4       	ldi	r27, 0x43	; 67
    2644:	80 83       	st	Z, r24
    2646:	91 83       	std	Z+1, r25	; 0x01
    2648:	a2 83       	std	Z+2, r26	; 0x02
    264a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    264c:	8e 01       	movw	r16, r28
    264e:	01 55       	subi	r16, 0x51	; 81
    2650:	1f 4f       	sbci	r17, 0xFF	; 255
    2652:	fe 01       	movw	r30, r28
    2654:	ed 54       	subi	r30, 0x4D	; 77
    2656:	ff 4f       	sbci	r31, 0xFF	; 255
    2658:	60 81       	ld	r22, Z
    265a:	71 81       	ldd	r23, Z+1	; 0x01
    265c:	82 81       	ldd	r24, Z+2	; 0x02
    265e:	93 81       	ldd	r25, Z+3	; 0x03
    2660:	2d ec       	ldi	r18, 0xCD	; 205
    2662:	3c ec       	ldi	r19, 0xCC	; 204
    2664:	4c e2       	ldi	r20, 0x2C	; 44
    2666:	55 e4       	ldi	r21, 0x45	; 69
    2668:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	f8 01       	movw	r30, r16
    2672:	80 83       	st	Z, r24
    2674:	91 83       	std	Z+1, r25	; 0x01
    2676:	a2 83       	std	Z+2, r26	; 0x02
    2678:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    267a:	fe 01       	movw	r30, r28
    267c:	e1 55       	subi	r30, 0x51	; 81
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	60 81       	ld	r22, Z
    2682:	71 81       	ldd	r23, Z+1	; 0x01
    2684:	82 81       	ldd	r24, Z+2	; 0x02
    2686:	93 81       	ldd	r25, Z+3	; 0x03
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	40 e8       	ldi	r20, 0x80	; 128
    268e:	5f e3       	ldi	r21, 0x3F	; 63
    2690:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__ltsf2>
    2694:	88 23       	and	r24, r24
    2696:	44 f4       	brge	.+16     	; 0x26a8 <__stack+0x4a9>
		__ticks = 1;
    2698:	fe 01       	movw	r30, r28
    269a:	e3 55       	subi	r30, 0x53	; 83
    269c:	ff 4f       	sbci	r31, 0xFF	; 255
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	91 83       	std	Z+1, r25	; 0x01
    26a4:	80 83       	st	Z, r24
    26a6:	64 c0       	rjmp	.+200    	; 0x2770 <__stack+0x571>
	else if (__tmp > 65535)
    26a8:	fe 01       	movw	r30, r28
    26aa:	e1 55       	subi	r30, 0x51	; 81
    26ac:	ff 4f       	sbci	r31, 0xFF	; 255
    26ae:	60 81       	ld	r22, Z
    26b0:	71 81       	ldd	r23, Z+1	; 0x01
    26b2:	82 81       	ldd	r24, Z+2	; 0x02
    26b4:	93 81       	ldd	r25, Z+3	; 0x03
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	3f ef       	ldi	r19, 0xFF	; 255
    26ba:	4f e7       	ldi	r20, 0x7F	; 127
    26bc:	57 e4       	ldi	r21, 0x47	; 71
    26be:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__gtsf2>
    26c2:	18 16       	cp	r1, r24
    26c4:	0c f0       	brlt	.+2      	; 0x26c8 <__stack+0x4c9>
    26c6:	43 c0       	rjmp	.+134    	; 0x274e <__stack+0x54f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c8:	fe 01       	movw	r30, r28
    26ca:	ed 54       	subi	r30, 0x4D	; 77
    26cc:	ff 4f       	sbci	r31, 0xFF	; 255
    26ce:	60 81       	ld	r22, Z
    26d0:	71 81       	ldd	r23, Z+1	; 0x01
    26d2:	82 81       	ldd	r24, Z+2	; 0x02
    26d4:	93 81       	ldd	r25, Z+3	; 0x03
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	40 e2       	ldi	r20, 0x20	; 32
    26dc:	51 e4       	ldi	r21, 0x41	; 65
    26de:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	8e 01       	movw	r16, r28
    26e8:	03 55       	subi	r16, 0x53	; 83
    26ea:	1f 4f       	sbci	r17, 0xFF	; 255
    26ec:	bc 01       	movw	r22, r24
    26ee:	cd 01       	movw	r24, r26
    26f0:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	f8 01       	movw	r30, r16
    26fa:	91 83       	std	Z+1, r25	; 0x01
    26fc:	80 83       	st	Z, r24
    26fe:	1f c0       	rjmp	.+62     	; 0x273e <__stack+0x53f>
    2700:	fe 01       	movw	r30, r28
    2702:	e5 55       	subi	r30, 0x55	; 85
    2704:	ff 4f       	sbci	r31, 0xFF	; 255
    2706:	84 e1       	ldi	r24, 0x14	; 20
    2708:	91 e0       	ldi	r25, 0x01	; 1
    270a:	91 83       	std	Z+1, r25	; 0x01
    270c:	80 83       	st	Z, r24
    270e:	fe 01       	movw	r30, r28
    2710:	e5 55       	subi	r30, 0x55	; 85
    2712:	ff 4f       	sbci	r31, 0xFF	; 255
    2714:	80 81       	ld	r24, Z
    2716:	91 81       	ldd	r25, Z+1	; 0x01
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	f1 f7       	brne	.-4      	; 0x2718 <__stack+0x519>
    271c:	fe 01       	movw	r30, r28
    271e:	e5 55       	subi	r30, 0x55	; 85
    2720:	ff 4f       	sbci	r31, 0xFF	; 255
    2722:	91 83       	std	Z+1, r25	; 0x01
    2724:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2726:	de 01       	movw	r26, r28
    2728:	a3 55       	subi	r26, 0x53	; 83
    272a:	bf 4f       	sbci	r27, 0xFF	; 255
    272c:	fe 01       	movw	r30, r28
    272e:	e3 55       	subi	r30, 0x53	; 83
    2730:	ff 4f       	sbci	r31, 0xFF	; 255
    2732:	80 81       	ld	r24, Z
    2734:	91 81       	ldd	r25, Z+1	; 0x01
    2736:	01 97       	sbiw	r24, 0x01	; 1
    2738:	11 96       	adiw	r26, 0x01	; 1
    273a:	9c 93       	st	X, r25
    273c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    273e:	fe 01       	movw	r30, r28
    2740:	e3 55       	subi	r30, 0x53	; 83
    2742:	ff 4f       	sbci	r31, 0xFF	; 255
    2744:	80 81       	ld	r24, Z
    2746:	91 81       	ldd	r25, Z+1	; 0x01
    2748:	00 97       	sbiw	r24, 0x00	; 0
    274a:	d1 f6       	brne	.-76     	; 0x2700 <__stack+0x501>
    274c:	27 c0       	rjmp	.+78     	; 0x279c <__stack+0x59d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    274e:	8e 01       	movw	r16, r28
    2750:	03 55       	subi	r16, 0x53	; 83
    2752:	1f 4f       	sbci	r17, 0xFF	; 255
    2754:	fe 01       	movw	r30, r28
    2756:	e1 55       	subi	r30, 0x51	; 81
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	60 81       	ld	r22, Z
    275c:	71 81       	ldd	r23, Z+1	; 0x01
    275e:	82 81       	ldd	r24, Z+2	; 0x02
    2760:	93 81       	ldd	r25, Z+3	; 0x03
    2762:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    2766:	dc 01       	movw	r26, r24
    2768:	cb 01       	movw	r24, r22
    276a:	f8 01       	movw	r30, r16
    276c:	91 83       	std	Z+1, r25	; 0x01
    276e:	80 83       	st	Z, r24
    2770:	de 01       	movw	r26, r28
    2772:	a7 55       	subi	r26, 0x57	; 87
    2774:	bf 4f       	sbci	r27, 0xFF	; 255
    2776:	fe 01       	movw	r30, r28
    2778:	e3 55       	subi	r30, 0x53	; 83
    277a:	ff 4f       	sbci	r31, 0xFF	; 255
    277c:	80 81       	ld	r24, Z
    277e:	91 81       	ldd	r25, Z+1	; 0x01
    2780:	8d 93       	st	X+, r24
    2782:	9c 93       	st	X, r25
    2784:	fe 01       	movw	r30, r28
    2786:	e7 55       	subi	r30, 0x57	; 87
    2788:	ff 4f       	sbci	r31, 0xFF	; 255
    278a:	80 81       	ld	r24, Z
    278c:	91 81       	ldd	r25, Z+1	; 0x01
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	f1 f7       	brne	.-4      	; 0x278e <__stack+0x58f>
    2792:	fe 01       	movw	r30, r28
    2794:	e7 55       	subi	r30, 0x57	; 87
    2796:	ff 4f       	sbci	r31, 0xFF	; 255
    2798:	91 83       	std	Z+1, r25	; 0x01
    279a:	80 83       	st	Z, r24
				_delay_ms(250);
				stop();
    279c:	0e 94 42 0b 	call	0x1684	; 0x1684 <stop>
			}

			if(data=='l')
    27a0:	80 91 1e 03 	lds	r24, 0x031E
    27a4:	8c 36       	cpi	r24, 0x6C	; 108
    27a6:	09 f0       	breq	.+2      	; 0x27aa <__stack+0x5ab>
    27a8:	c5 c0       	rjmp	.+394    	; 0x2934 <__stack+0x735>
			{
				lcd_cursor(2,3);
    27aa:	82 e0       	ldi	r24, 0x02	; 2
    27ac:	63 e0       	ldi	r22, 0x03	; 3
    27ae:	0e 94 44 09 	call	0x1288	; 0x1288 <lcd_cursor>
				lcd_wr_char(data);
    27b2:	80 91 1e 03 	lds	r24, 0x031E
    27b6:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
				angle_rotate_left(3);
    27ba:	83 e0       	ldi	r24, 0x03	; 3
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	0e 94 14 0c 	call	0x1828	; 0x1828 <angle_rotate_left>
				velocity(150,150);
    27c2:	86 e9       	ldi	r24, 0x96	; 150
    27c4:	66 e9       	ldi	r22, 0x96	; 150
    27c6:	0e 94 4c 0b 	call	0x1698	; 0x1698 <velocity>
    27ca:	fe 01       	movw	r30, r28
    27cc:	eb 55       	subi	r30, 0x5B	; 91
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	80 e0       	ldi	r24, 0x00	; 0
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	aa e7       	ldi	r26, 0x7A	; 122
    27d6:	b3 e4       	ldi	r27, 0x43	; 67
    27d8:	80 83       	st	Z, r24
    27da:	91 83       	std	Z+1, r25	; 0x01
    27dc:	a2 83       	std	Z+2, r26	; 0x02
    27de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27e0:	8e 01       	movw	r16, r28
    27e2:	0f 55       	subi	r16, 0x5F	; 95
    27e4:	1f 4f       	sbci	r17, 0xFF	; 255
    27e6:	fe 01       	movw	r30, r28
    27e8:	eb 55       	subi	r30, 0x5B	; 91
    27ea:	ff 4f       	sbci	r31, 0xFF	; 255
    27ec:	60 81       	ld	r22, Z
    27ee:	71 81       	ldd	r23, Z+1	; 0x01
    27f0:	82 81       	ldd	r24, Z+2	; 0x02
    27f2:	93 81       	ldd	r25, Z+3	; 0x03
    27f4:	2d ec       	ldi	r18, 0xCD	; 205
    27f6:	3c ec       	ldi	r19, 0xCC	; 204
    27f8:	4c e2       	ldi	r20, 0x2C	; 44
    27fa:	55 e4       	ldi	r21, 0x45	; 69
    27fc:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    2800:	dc 01       	movw	r26, r24
    2802:	cb 01       	movw	r24, r22
    2804:	f8 01       	movw	r30, r16
    2806:	80 83       	st	Z, r24
    2808:	91 83       	std	Z+1, r25	; 0x01
    280a:	a2 83       	std	Z+2, r26	; 0x02
    280c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    280e:	fe 01       	movw	r30, r28
    2810:	ef 55       	subi	r30, 0x5F	; 95
    2812:	ff 4f       	sbci	r31, 0xFF	; 255
    2814:	60 81       	ld	r22, Z
    2816:	71 81       	ldd	r23, Z+1	; 0x01
    2818:	82 81       	ldd	r24, Z+2	; 0x02
    281a:	93 81       	ldd	r25, Z+3	; 0x03
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	40 e8       	ldi	r20, 0x80	; 128
    2822:	5f e3       	ldi	r21, 0x3F	; 63
    2824:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__ltsf2>
    2828:	88 23       	and	r24, r24
    282a:	44 f4       	brge	.+16     	; 0x283c <__stack+0x63d>
		__ticks = 1;
    282c:	fe 01       	movw	r30, r28
    282e:	e1 56       	subi	r30, 0x61	; 97
    2830:	ff 4f       	sbci	r31, 0xFF	; 255
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	91 83       	std	Z+1, r25	; 0x01
    2838:	80 83       	st	Z, r24
    283a:	64 c0       	rjmp	.+200    	; 0x2904 <__stack+0x705>
	else if (__tmp > 65535)
    283c:	fe 01       	movw	r30, r28
    283e:	ef 55       	subi	r30, 0x5F	; 95
    2840:	ff 4f       	sbci	r31, 0xFF	; 255
    2842:	60 81       	ld	r22, Z
    2844:	71 81       	ldd	r23, Z+1	; 0x01
    2846:	82 81       	ldd	r24, Z+2	; 0x02
    2848:	93 81       	ldd	r25, Z+3	; 0x03
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	3f ef       	ldi	r19, 0xFF	; 255
    284e:	4f e7       	ldi	r20, 0x7F	; 127
    2850:	57 e4       	ldi	r21, 0x47	; 71
    2852:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__gtsf2>
    2856:	18 16       	cp	r1, r24
    2858:	0c f0       	brlt	.+2      	; 0x285c <__stack+0x65d>
    285a:	43 c0       	rjmp	.+134    	; 0x28e2 <__stack+0x6e3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    285c:	fe 01       	movw	r30, r28
    285e:	eb 55       	subi	r30, 0x5B	; 91
    2860:	ff 4f       	sbci	r31, 0xFF	; 255
    2862:	60 81       	ld	r22, Z
    2864:	71 81       	ldd	r23, Z+1	; 0x01
    2866:	82 81       	ldd	r24, Z+2	; 0x02
    2868:	93 81       	ldd	r25, Z+3	; 0x03
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	40 e2       	ldi	r20, 0x20	; 32
    2870:	51 e4       	ldi	r21, 0x41	; 65
    2872:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	8e 01       	movw	r16, r28
    287c:	01 56       	subi	r16, 0x61	; 97
    287e:	1f 4f       	sbci	r17, 0xFF	; 255
    2880:	bc 01       	movw	r22, r24
    2882:	cd 01       	movw	r24, r26
    2884:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	f8 01       	movw	r30, r16
    288e:	91 83       	std	Z+1, r25	; 0x01
    2890:	80 83       	st	Z, r24
    2892:	1f c0       	rjmp	.+62     	; 0x28d2 <__stack+0x6d3>
    2894:	fe 01       	movw	r30, r28
    2896:	e3 56       	subi	r30, 0x63	; 99
    2898:	ff 4f       	sbci	r31, 0xFF	; 255
    289a:	84 e1       	ldi	r24, 0x14	; 20
    289c:	91 e0       	ldi	r25, 0x01	; 1
    289e:	91 83       	std	Z+1, r25	; 0x01
    28a0:	80 83       	st	Z, r24
    28a2:	fe 01       	movw	r30, r28
    28a4:	e3 56       	subi	r30, 0x63	; 99
    28a6:	ff 4f       	sbci	r31, 0xFF	; 255
    28a8:	80 81       	ld	r24, Z
    28aa:	91 81       	ldd	r25, Z+1	; 0x01
    28ac:	01 97       	sbiw	r24, 0x01	; 1
    28ae:	f1 f7       	brne	.-4      	; 0x28ac <__stack+0x6ad>
    28b0:	fe 01       	movw	r30, r28
    28b2:	e3 56       	subi	r30, 0x63	; 99
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	91 83       	std	Z+1, r25	; 0x01
    28b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ba:	de 01       	movw	r26, r28
    28bc:	a1 56       	subi	r26, 0x61	; 97
    28be:	bf 4f       	sbci	r27, 0xFF	; 255
    28c0:	fe 01       	movw	r30, r28
    28c2:	e1 56       	subi	r30, 0x61	; 97
    28c4:	ff 4f       	sbci	r31, 0xFF	; 255
    28c6:	80 81       	ld	r24, Z
    28c8:	91 81       	ldd	r25, Z+1	; 0x01
    28ca:	01 97       	sbiw	r24, 0x01	; 1
    28cc:	11 96       	adiw	r26, 0x01	; 1
    28ce:	9c 93       	st	X, r25
    28d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d2:	fe 01       	movw	r30, r28
    28d4:	e1 56       	subi	r30, 0x61	; 97
    28d6:	ff 4f       	sbci	r31, 0xFF	; 255
    28d8:	80 81       	ld	r24, Z
    28da:	91 81       	ldd	r25, Z+1	; 0x01
    28dc:	00 97       	sbiw	r24, 0x00	; 0
    28de:	d1 f6       	brne	.-76     	; 0x2894 <__stack+0x695>
    28e0:	27 c0       	rjmp	.+78     	; 0x2930 <__stack+0x731>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e2:	8e 01       	movw	r16, r28
    28e4:	01 56       	subi	r16, 0x61	; 97
    28e6:	1f 4f       	sbci	r17, 0xFF	; 255
    28e8:	fe 01       	movw	r30, r28
    28ea:	ef 55       	subi	r30, 0x5F	; 95
    28ec:	ff 4f       	sbci	r31, 0xFF	; 255
    28ee:	60 81       	ld	r22, Z
    28f0:	71 81       	ldd	r23, Z+1	; 0x01
    28f2:	82 81       	ldd	r24, Z+2	; 0x02
    28f4:	93 81       	ldd	r25, Z+3	; 0x03
    28f6:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    28fa:	dc 01       	movw	r26, r24
    28fc:	cb 01       	movw	r24, r22
    28fe:	f8 01       	movw	r30, r16
    2900:	91 83       	std	Z+1, r25	; 0x01
    2902:	80 83       	st	Z, r24
    2904:	de 01       	movw	r26, r28
    2906:	a5 56       	subi	r26, 0x65	; 101
    2908:	bf 4f       	sbci	r27, 0xFF	; 255
    290a:	fe 01       	movw	r30, r28
    290c:	e1 56       	subi	r30, 0x61	; 97
    290e:	ff 4f       	sbci	r31, 0xFF	; 255
    2910:	80 81       	ld	r24, Z
    2912:	91 81       	ldd	r25, Z+1	; 0x01
    2914:	8d 93       	st	X+, r24
    2916:	9c 93       	st	X, r25
    2918:	fe 01       	movw	r30, r28
    291a:	e5 56       	subi	r30, 0x65	; 101
    291c:	ff 4f       	sbci	r31, 0xFF	; 255
    291e:	80 81       	ld	r24, Z
    2920:	91 81       	ldd	r25, Z+1	; 0x01
    2922:	01 97       	sbiw	r24, 0x01	; 1
    2924:	f1 f7       	brne	.-4      	; 0x2922 <__stack+0x723>
    2926:	fe 01       	movw	r30, r28
    2928:	e5 56       	subi	r30, 0x65	; 101
    292a:	ff 4f       	sbci	r31, 0xFF	; 255
    292c:	91 83       	std	Z+1, r25	; 0x01
    292e:	80 83       	st	Z, r24
				_delay_ms(250);
				stop();
    2930:	0e 94 42 0b 	call	0x1684	; 0x1684 <stop>
			}

			if(data=='r')
    2934:	80 91 1e 03 	lds	r24, 0x031E
    2938:	82 37       	cpi	r24, 0x72	; 114
    293a:	09 f0       	breq	.+2      	; 0x293e <__stack+0x73f>
    293c:	c5 c0       	rjmp	.+394    	; 0x2ac8 <__stack+0x8c9>
			{
				lcd_cursor(2,3);
    293e:	82 e0       	ldi	r24, 0x02	; 2
    2940:	63 e0       	ldi	r22, 0x03	; 3
    2942:	0e 94 44 09 	call	0x1288	; 0x1288 <lcd_cursor>
				lcd_wr_char(data);
    2946:	80 91 1e 03 	lds	r24, 0x031E
    294a:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
				angle_rotate_right(3);
    294e:	83 e0       	ldi	r24, 0x03	; 3
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	0e 94 8f 0b 	call	0x171e	; 0x171e <angle_rotate_right>
				velocity(150,150);
    2956:	86 e9       	ldi	r24, 0x96	; 150
    2958:	66 e9       	ldi	r22, 0x96	; 150
    295a:	0e 94 4c 0b 	call	0x1698	; 0x1698 <velocity>
    295e:	fe 01       	movw	r30, r28
    2960:	e9 56       	subi	r30, 0x69	; 105
    2962:	ff 4f       	sbci	r31, 0xFF	; 255
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	aa e7       	ldi	r26, 0x7A	; 122
    296a:	b3 e4       	ldi	r27, 0x43	; 67
    296c:	80 83       	st	Z, r24
    296e:	91 83       	std	Z+1, r25	; 0x01
    2970:	a2 83       	std	Z+2, r26	; 0x02
    2972:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2974:	8e 01       	movw	r16, r28
    2976:	0d 56       	subi	r16, 0x6D	; 109
    2978:	1f 4f       	sbci	r17, 0xFF	; 255
    297a:	fe 01       	movw	r30, r28
    297c:	e9 56       	subi	r30, 0x69	; 105
    297e:	ff 4f       	sbci	r31, 0xFF	; 255
    2980:	60 81       	ld	r22, Z
    2982:	71 81       	ldd	r23, Z+1	; 0x01
    2984:	82 81       	ldd	r24, Z+2	; 0x02
    2986:	93 81       	ldd	r25, Z+3	; 0x03
    2988:	2d ec       	ldi	r18, 0xCD	; 205
    298a:	3c ec       	ldi	r19, 0xCC	; 204
    298c:	4c e2       	ldi	r20, 0x2C	; 44
    298e:	55 e4       	ldi	r21, 0x45	; 69
    2990:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	f8 01       	movw	r30, r16
    299a:	80 83       	st	Z, r24
    299c:	91 83       	std	Z+1, r25	; 0x01
    299e:	a2 83       	std	Z+2, r26	; 0x02
    29a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29a2:	fe 01       	movw	r30, r28
    29a4:	ed 56       	subi	r30, 0x6D	; 109
    29a6:	ff 4f       	sbci	r31, 0xFF	; 255
    29a8:	60 81       	ld	r22, Z
    29aa:	71 81       	ldd	r23, Z+1	; 0x01
    29ac:	82 81       	ldd	r24, Z+2	; 0x02
    29ae:	93 81       	ldd	r25, Z+3	; 0x03
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	40 e8       	ldi	r20, 0x80	; 128
    29b6:	5f e3       	ldi	r21, 0x3F	; 63
    29b8:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__ltsf2>
    29bc:	88 23       	and	r24, r24
    29be:	44 f4       	brge	.+16     	; 0x29d0 <__stack+0x7d1>
		__ticks = 1;
    29c0:	fe 01       	movw	r30, r28
    29c2:	ef 56       	subi	r30, 0x6F	; 111
    29c4:	ff 4f       	sbci	r31, 0xFF	; 255
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	91 83       	std	Z+1, r25	; 0x01
    29cc:	80 83       	st	Z, r24
    29ce:	64 c0       	rjmp	.+200    	; 0x2a98 <__stack+0x899>
	else if (__tmp > 65535)
    29d0:	fe 01       	movw	r30, r28
    29d2:	ed 56       	subi	r30, 0x6D	; 109
    29d4:	ff 4f       	sbci	r31, 0xFF	; 255
    29d6:	60 81       	ld	r22, Z
    29d8:	71 81       	ldd	r23, Z+1	; 0x01
    29da:	82 81       	ldd	r24, Z+2	; 0x02
    29dc:	93 81       	ldd	r25, Z+3	; 0x03
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	3f ef       	ldi	r19, 0xFF	; 255
    29e2:	4f e7       	ldi	r20, 0x7F	; 127
    29e4:	57 e4       	ldi	r21, 0x47	; 71
    29e6:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__gtsf2>
    29ea:	18 16       	cp	r1, r24
    29ec:	0c f0       	brlt	.+2      	; 0x29f0 <__stack+0x7f1>
    29ee:	43 c0       	rjmp	.+134    	; 0x2a76 <__stack+0x877>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f0:	fe 01       	movw	r30, r28
    29f2:	e9 56       	subi	r30, 0x69	; 105
    29f4:	ff 4f       	sbci	r31, 0xFF	; 255
    29f6:	60 81       	ld	r22, Z
    29f8:	71 81       	ldd	r23, Z+1	; 0x01
    29fa:	82 81       	ldd	r24, Z+2	; 0x02
    29fc:	93 81       	ldd	r25, Z+3	; 0x03
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	40 e2       	ldi	r20, 0x20	; 32
    2a04:	51 e4       	ldi	r21, 0x41	; 65
    2a06:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	8e 01       	movw	r16, r28
    2a10:	0f 56       	subi	r16, 0x6F	; 111
    2a12:	1f 4f       	sbci	r17, 0xFF	; 255
    2a14:	bc 01       	movw	r22, r24
    2a16:	cd 01       	movw	r24, r26
    2a18:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	cb 01       	movw	r24, r22
    2a20:	f8 01       	movw	r30, r16
    2a22:	91 83       	std	Z+1, r25	; 0x01
    2a24:	80 83       	st	Z, r24
    2a26:	1f c0       	rjmp	.+62     	; 0x2a66 <__stack+0x867>
    2a28:	fe 01       	movw	r30, r28
    2a2a:	e1 57       	subi	r30, 0x71	; 113
    2a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2e:	84 e1       	ldi	r24, 0x14	; 20
    2a30:	91 e0       	ldi	r25, 0x01	; 1
    2a32:	91 83       	std	Z+1, r25	; 0x01
    2a34:	80 83       	st	Z, r24
    2a36:	fe 01       	movw	r30, r28
    2a38:	e1 57       	subi	r30, 0x71	; 113
    2a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3c:	80 81       	ld	r24, Z
    2a3e:	91 81       	ldd	r25, Z+1	; 0x01
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	f1 f7       	brne	.-4      	; 0x2a40 <__stack+0x841>
    2a44:	fe 01       	movw	r30, r28
    2a46:	e1 57       	subi	r30, 0x71	; 113
    2a48:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4a:	91 83       	std	Z+1, r25	; 0x01
    2a4c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a4e:	de 01       	movw	r26, r28
    2a50:	af 56       	subi	r26, 0x6F	; 111
    2a52:	bf 4f       	sbci	r27, 0xFF	; 255
    2a54:	fe 01       	movw	r30, r28
    2a56:	ef 56       	subi	r30, 0x6F	; 111
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	80 81       	ld	r24, Z
    2a5c:	91 81       	ldd	r25, Z+1	; 0x01
    2a5e:	01 97       	sbiw	r24, 0x01	; 1
    2a60:	11 96       	adiw	r26, 0x01	; 1
    2a62:	9c 93       	st	X, r25
    2a64:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a66:	fe 01       	movw	r30, r28
    2a68:	ef 56       	subi	r30, 0x6F	; 111
    2a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6c:	80 81       	ld	r24, Z
    2a6e:	91 81       	ldd	r25, Z+1	; 0x01
    2a70:	00 97       	sbiw	r24, 0x00	; 0
    2a72:	d1 f6       	brne	.-76     	; 0x2a28 <__stack+0x829>
    2a74:	27 c0       	rjmp	.+78     	; 0x2ac4 <__stack+0x8c5>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a76:	8e 01       	movw	r16, r28
    2a78:	0f 56       	subi	r16, 0x6F	; 111
    2a7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a7c:	fe 01       	movw	r30, r28
    2a7e:	ed 56       	subi	r30, 0x6D	; 109
    2a80:	ff 4f       	sbci	r31, 0xFF	; 255
    2a82:	60 81       	ld	r22, Z
    2a84:	71 81       	ldd	r23, Z+1	; 0x01
    2a86:	82 81       	ldd	r24, Z+2	; 0x02
    2a88:	93 81       	ldd	r25, Z+3	; 0x03
    2a8a:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	f8 01       	movw	r30, r16
    2a94:	91 83       	std	Z+1, r25	; 0x01
    2a96:	80 83       	st	Z, r24
    2a98:	de 01       	movw	r26, r28
    2a9a:	a3 57       	subi	r26, 0x73	; 115
    2a9c:	bf 4f       	sbci	r27, 0xFF	; 255
    2a9e:	fe 01       	movw	r30, r28
    2aa0:	ef 56       	subi	r30, 0x6F	; 111
    2aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa4:	80 81       	ld	r24, Z
    2aa6:	91 81       	ldd	r25, Z+1	; 0x01
    2aa8:	8d 93       	st	X+, r24
    2aaa:	9c 93       	st	X, r25
    2aac:	fe 01       	movw	r30, r28
    2aae:	e3 57       	subi	r30, 0x73	; 115
    2ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab2:	80 81       	ld	r24, Z
    2ab4:	91 81       	ldd	r25, Z+1	; 0x01
    2ab6:	01 97       	sbiw	r24, 0x01	; 1
    2ab8:	f1 f7       	brne	.-4      	; 0x2ab6 <__stack+0x8b7>
    2aba:	fe 01       	movw	r30, r28
    2abc:	e3 57       	subi	r30, 0x73	; 115
    2abe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac0:	91 83       	std	Z+1, r25	; 0x01
    2ac2:	80 83       	st	Z, r24
				_delay_ms(250);
				stop();
    2ac4:	0e 94 42 0b 	call	0x1684	; 0x1684 <stop>
			}

			if(data=='P')
    2ac8:	80 91 1e 03 	lds	r24, 0x031E
    2acc:	80 35       	cpi	r24, 0x50	; 80
    2ace:	09 f0       	breq	.+2      	; 0x2ad2 <__stack+0x8d3>
    2ad0:	e6 c2       	rjmp	.+1484   	; 0x309e <__stack+0xe9f>
			{
				lcd_cursor(2,3);
    2ad2:	82 e0       	ldi	r24, 0x02	; 2
    2ad4:	63 e0       	ldi	r22, 0x03	; 3
    2ad6:	0e 94 44 09 	call	0x1288	; 0x1288 <lcd_cursor>
				lcd_wr_char(data);
    2ada:	80 91 1e 03 	lds	r24, 0x031E
    2ade:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
				
				servo_3(80);
    2ae2:	80 e5       	ldi	r24, 0x50	; 80
    2ae4:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <servo_3>
    2ae8:	fe 01       	movw	r30, r28
    2aea:	e7 57       	subi	r30, 0x77	; 119
    2aec:	ff 4f       	sbci	r31, 0xFF	; 255
    2aee:	80 e0       	ldi	r24, 0x00	; 0
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	aa e7       	ldi	r26, 0x7A	; 122
    2af4:	b4 e4       	ldi	r27, 0x44	; 68
    2af6:	80 83       	st	Z, r24
    2af8:	91 83       	std	Z+1, r25	; 0x01
    2afa:	a2 83       	std	Z+2, r26	; 0x02
    2afc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2afe:	8e 01       	movw	r16, r28
    2b00:	0b 57       	subi	r16, 0x7B	; 123
    2b02:	1f 4f       	sbci	r17, 0xFF	; 255
    2b04:	fe 01       	movw	r30, r28
    2b06:	e7 57       	subi	r30, 0x77	; 119
    2b08:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0a:	60 81       	ld	r22, Z
    2b0c:	71 81       	ldd	r23, Z+1	; 0x01
    2b0e:	82 81       	ldd	r24, Z+2	; 0x02
    2b10:	93 81       	ldd	r25, Z+3	; 0x03
    2b12:	2d ec       	ldi	r18, 0xCD	; 205
    2b14:	3c ec       	ldi	r19, 0xCC	; 204
    2b16:	4c e2       	ldi	r20, 0x2C	; 44
    2b18:	55 e4       	ldi	r21, 0x45	; 69
    2b1a:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    2b1e:	dc 01       	movw	r26, r24
    2b20:	cb 01       	movw	r24, r22
    2b22:	f8 01       	movw	r30, r16
    2b24:	80 83       	st	Z, r24
    2b26:	91 83       	std	Z+1, r25	; 0x01
    2b28:	a2 83       	std	Z+2, r26	; 0x02
    2b2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b2c:	fe 01       	movw	r30, r28
    2b2e:	eb 57       	subi	r30, 0x7B	; 123
    2b30:	ff 4f       	sbci	r31, 0xFF	; 255
    2b32:	60 81       	ld	r22, Z
    2b34:	71 81       	ldd	r23, Z+1	; 0x01
    2b36:	82 81       	ldd	r24, Z+2	; 0x02
    2b38:	93 81       	ldd	r25, Z+3	; 0x03
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	40 e8       	ldi	r20, 0x80	; 128
    2b40:	5f e3       	ldi	r21, 0x3F	; 63
    2b42:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__ltsf2>
    2b46:	88 23       	and	r24, r24
    2b48:	44 f4       	brge	.+16     	; 0x2b5a <__stack+0x95b>
		__ticks = 1;
    2b4a:	fe 01       	movw	r30, r28
    2b4c:	ed 57       	subi	r30, 0x7D	; 125
    2b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b50:	81 e0       	ldi	r24, 0x01	; 1
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	91 83       	std	Z+1, r25	; 0x01
    2b56:	80 83       	st	Z, r24
    2b58:	64 c0       	rjmp	.+200    	; 0x2c22 <__stack+0xa23>
	else if (__tmp > 65535)
    2b5a:	fe 01       	movw	r30, r28
    2b5c:	eb 57       	subi	r30, 0x7B	; 123
    2b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b60:	60 81       	ld	r22, Z
    2b62:	71 81       	ldd	r23, Z+1	; 0x01
    2b64:	82 81       	ldd	r24, Z+2	; 0x02
    2b66:	93 81       	ldd	r25, Z+3	; 0x03
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	3f ef       	ldi	r19, 0xFF	; 255
    2b6c:	4f e7       	ldi	r20, 0x7F	; 127
    2b6e:	57 e4       	ldi	r21, 0x47	; 71
    2b70:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__gtsf2>
    2b74:	18 16       	cp	r1, r24
    2b76:	0c f0       	brlt	.+2      	; 0x2b7a <__stack+0x97b>
    2b78:	43 c0       	rjmp	.+134    	; 0x2c00 <__stack+0xa01>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b7a:	fe 01       	movw	r30, r28
    2b7c:	e7 57       	subi	r30, 0x77	; 119
    2b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b80:	60 81       	ld	r22, Z
    2b82:	71 81       	ldd	r23, Z+1	; 0x01
    2b84:	82 81       	ldd	r24, Z+2	; 0x02
    2b86:	93 81       	ldd	r25, Z+3	; 0x03
    2b88:	20 e0       	ldi	r18, 0x00	; 0
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	40 e2       	ldi	r20, 0x20	; 32
    2b8e:	51 e4       	ldi	r21, 0x41	; 65
    2b90:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    2b94:	dc 01       	movw	r26, r24
    2b96:	cb 01       	movw	r24, r22
    2b98:	8e 01       	movw	r16, r28
    2b9a:	0d 57       	subi	r16, 0x7D	; 125
    2b9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b9e:	bc 01       	movw	r22, r24
    2ba0:	cd 01       	movw	r24, r26
    2ba2:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    2ba6:	dc 01       	movw	r26, r24
    2ba8:	cb 01       	movw	r24, r22
    2baa:	f8 01       	movw	r30, r16
    2bac:	91 83       	std	Z+1, r25	; 0x01
    2bae:	80 83       	st	Z, r24
    2bb0:	1f c0       	rjmp	.+62     	; 0x2bf0 <__stack+0x9f1>
    2bb2:	fe 01       	movw	r30, r28
    2bb4:	ef 57       	subi	r30, 0x7F	; 127
    2bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb8:	84 e1       	ldi	r24, 0x14	; 20
    2bba:	91 e0       	ldi	r25, 0x01	; 1
    2bbc:	91 83       	std	Z+1, r25	; 0x01
    2bbe:	80 83       	st	Z, r24
    2bc0:	fe 01       	movw	r30, r28
    2bc2:	ef 57       	subi	r30, 0x7F	; 127
    2bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc6:	80 81       	ld	r24, Z
    2bc8:	91 81       	ldd	r25, Z+1	; 0x01
    2bca:	01 97       	sbiw	r24, 0x01	; 1
    2bcc:	f1 f7       	brne	.-4      	; 0x2bca <__stack+0x9cb>
    2bce:	fe 01       	movw	r30, r28
    2bd0:	ef 57       	subi	r30, 0x7F	; 127
    2bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd4:	91 83       	std	Z+1, r25	; 0x01
    2bd6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd8:	de 01       	movw	r26, r28
    2bda:	ad 57       	subi	r26, 0x7D	; 125
    2bdc:	bf 4f       	sbci	r27, 0xFF	; 255
    2bde:	fe 01       	movw	r30, r28
    2be0:	ed 57       	subi	r30, 0x7D	; 125
    2be2:	ff 4f       	sbci	r31, 0xFF	; 255
    2be4:	80 81       	ld	r24, Z
    2be6:	91 81       	ldd	r25, Z+1	; 0x01
    2be8:	01 97       	sbiw	r24, 0x01	; 1
    2bea:	11 96       	adiw	r26, 0x01	; 1
    2bec:	9c 93       	st	X, r25
    2bee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf0:	fe 01       	movw	r30, r28
    2bf2:	ed 57       	subi	r30, 0x7D	; 125
    2bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf6:	80 81       	ld	r24, Z
    2bf8:	91 81       	ldd	r25, Z+1	; 0x01
    2bfa:	00 97       	sbiw	r24, 0x00	; 0
    2bfc:	d1 f6       	brne	.-76     	; 0x2bb2 <__stack+0x9b3>
    2bfe:	27 c0       	rjmp	.+78     	; 0x2c4e <__stack+0xa4f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c00:	8e 01       	movw	r16, r28
    2c02:	0d 57       	subi	r16, 0x7D	; 125
    2c04:	1f 4f       	sbci	r17, 0xFF	; 255
    2c06:	fe 01       	movw	r30, r28
    2c08:	eb 57       	subi	r30, 0x7B	; 123
    2c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0c:	60 81       	ld	r22, Z
    2c0e:	71 81       	ldd	r23, Z+1	; 0x01
    2c10:	82 81       	ldd	r24, Z+2	; 0x02
    2c12:	93 81       	ldd	r25, Z+3	; 0x03
    2c14:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    2c18:	dc 01       	movw	r26, r24
    2c1a:	cb 01       	movw	r24, r22
    2c1c:	f8 01       	movw	r30, r16
    2c1e:	91 83       	std	Z+1, r25	; 0x01
    2c20:	80 83       	st	Z, r24
    2c22:	de 01       	movw	r26, r28
    2c24:	a1 58       	subi	r26, 0x81	; 129
    2c26:	bf 4f       	sbci	r27, 0xFF	; 255
    2c28:	fe 01       	movw	r30, r28
    2c2a:	ed 57       	subi	r30, 0x7D	; 125
    2c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2e:	80 81       	ld	r24, Z
    2c30:	91 81       	ldd	r25, Z+1	; 0x01
    2c32:	8d 93       	st	X+, r24
    2c34:	9c 93       	st	X, r25
    2c36:	fe 01       	movw	r30, r28
    2c38:	e1 58       	subi	r30, 0x81	; 129
    2c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3c:	80 81       	ld	r24, Z
    2c3e:	91 81       	ldd	r25, Z+1	; 0x01
    2c40:	01 97       	sbiw	r24, 0x01	; 1
    2c42:	f1 f7       	brne	.-4      	; 0x2c40 <__stack+0xa41>
    2c44:	fe 01       	movw	r30, r28
    2c46:	e1 58       	subi	r30, 0x81	; 129
    2c48:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4a:	91 83       	std	Z+1, r25	; 0x01
    2c4c:	80 83       	st	Z, r24
				_delay_ms(1000);
				servo_1(160);								//code the open the gripper arm
    2c4e:	80 ea       	ldi	r24, 0xA0	; 160
    2c50:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <servo_1>
				servo_2(140);
    2c54:	8c e8       	ldi	r24, 0x8C	; 140
    2c56:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <servo_2>
    2c5a:	fe 01       	movw	r30, r28
    2c5c:	e5 58       	subi	r30, 0x85	; 133
    2c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c60:	80 e0       	ldi	r24, 0x00	; 0
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	aa e7       	ldi	r26, 0x7A	; 122
    2c66:	b4 e4       	ldi	r27, 0x44	; 68
    2c68:	80 83       	st	Z, r24
    2c6a:	91 83       	std	Z+1, r25	; 0x01
    2c6c:	a2 83       	std	Z+2, r26	; 0x02
    2c6e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c70:	8e 01       	movw	r16, r28
    2c72:	09 58       	subi	r16, 0x89	; 137
    2c74:	1f 4f       	sbci	r17, 0xFF	; 255
    2c76:	fe 01       	movw	r30, r28
    2c78:	e5 58       	subi	r30, 0x85	; 133
    2c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7c:	60 81       	ld	r22, Z
    2c7e:	71 81       	ldd	r23, Z+1	; 0x01
    2c80:	82 81       	ldd	r24, Z+2	; 0x02
    2c82:	93 81       	ldd	r25, Z+3	; 0x03
    2c84:	2d ec       	ldi	r18, 0xCD	; 205
    2c86:	3c ec       	ldi	r19, 0xCC	; 204
    2c88:	4c e2       	ldi	r20, 0x2C	; 44
    2c8a:	55 e4       	ldi	r21, 0x45	; 69
    2c8c:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    2c90:	dc 01       	movw	r26, r24
    2c92:	cb 01       	movw	r24, r22
    2c94:	f8 01       	movw	r30, r16
    2c96:	80 83       	st	Z, r24
    2c98:	91 83       	std	Z+1, r25	; 0x01
    2c9a:	a2 83       	std	Z+2, r26	; 0x02
    2c9c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c9e:	fe 01       	movw	r30, r28
    2ca0:	e9 58       	subi	r30, 0x89	; 137
    2ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca4:	60 81       	ld	r22, Z
    2ca6:	71 81       	ldd	r23, Z+1	; 0x01
    2ca8:	82 81       	ldd	r24, Z+2	; 0x02
    2caa:	93 81       	ldd	r25, Z+3	; 0x03
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	40 e8       	ldi	r20, 0x80	; 128
    2cb2:	5f e3       	ldi	r21, 0x3F	; 63
    2cb4:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__ltsf2>
    2cb8:	88 23       	and	r24, r24
    2cba:	44 f4       	brge	.+16     	; 0x2ccc <__stack+0xacd>
		__ticks = 1;
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	eb 58       	subi	r30, 0x8B	; 139
    2cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	91 83       	std	Z+1, r25	; 0x01
    2cc8:	80 83       	st	Z, r24
    2cca:	64 c0       	rjmp	.+200    	; 0x2d94 <__stack+0xb95>
	else if (__tmp > 65535)
    2ccc:	fe 01       	movw	r30, r28
    2cce:	e9 58       	subi	r30, 0x89	; 137
    2cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd2:	60 81       	ld	r22, Z
    2cd4:	71 81       	ldd	r23, Z+1	; 0x01
    2cd6:	82 81       	ldd	r24, Z+2	; 0x02
    2cd8:	93 81       	ldd	r25, Z+3	; 0x03
    2cda:	20 e0       	ldi	r18, 0x00	; 0
    2cdc:	3f ef       	ldi	r19, 0xFF	; 255
    2cde:	4f e7       	ldi	r20, 0x7F	; 127
    2ce0:	57 e4       	ldi	r21, 0x47	; 71
    2ce2:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__gtsf2>
    2ce6:	18 16       	cp	r1, r24
    2ce8:	0c f0       	brlt	.+2      	; 0x2cec <__stack+0xaed>
    2cea:	43 c0       	rjmp	.+134    	; 0x2d72 <__stack+0xb73>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cec:	fe 01       	movw	r30, r28
    2cee:	e5 58       	subi	r30, 0x85	; 133
    2cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf2:	60 81       	ld	r22, Z
    2cf4:	71 81       	ldd	r23, Z+1	; 0x01
    2cf6:	82 81       	ldd	r24, Z+2	; 0x02
    2cf8:	93 81       	ldd	r25, Z+3	; 0x03
    2cfa:	20 e0       	ldi	r18, 0x00	; 0
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	40 e2       	ldi	r20, 0x20	; 32
    2d00:	51 e4       	ldi	r21, 0x41	; 65
    2d02:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    2d06:	dc 01       	movw	r26, r24
    2d08:	cb 01       	movw	r24, r22
    2d0a:	8e 01       	movw	r16, r28
    2d0c:	0b 58       	subi	r16, 0x8B	; 139
    2d0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d10:	bc 01       	movw	r22, r24
    2d12:	cd 01       	movw	r24, r26
    2d14:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    2d18:	dc 01       	movw	r26, r24
    2d1a:	cb 01       	movw	r24, r22
    2d1c:	f8 01       	movw	r30, r16
    2d1e:	91 83       	std	Z+1, r25	; 0x01
    2d20:	80 83       	st	Z, r24
    2d22:	1f c0       	rjmp	.+62     	; 0x2d62 <__stack+0xb63>
    2d24:	fe 01       	movw	r30, r28
    2d26:	ed 58       	subi	r30, 0x8D	; 141
    2d28:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2a:	84 e1       	ldi	r24, 0x14	; 20
    2d2c:	91 e0       	ldi	r25, 0x01	; 1
    2d2e:	91 83       	std	Z+1, r25	; 0x01
    2d30:	80 83       	st	Z, r24
    2d32:	fe 01       	movw	r30, r28
    2d34:	ed 58       	subi	r30, 0x8D	; 141
    2d36:	ff 4f       	sbci	r31, 0xFF	; 255
    2d38:	80 81       	ld	r24, Z
    2d3a:	91 81       	ldd	r25, Z+1	; 0x01
    2d3c:	01 97       	sbiw	r24, 0x01	; 1
    2d3e:	f1 f7       	brne	.-4      	; 0x2d3c <__stack+0xb3d>
    2d40:	fe 01       	movw	r30, r28
    2d42:	ed 58       	subi	r30, 0x8D	; 141
    2d44:	ff 4f       	sbci	r31, 0xFF	; 255
    2d46:	91 83       	std	Z+1, r25	; 0x01
    2d48:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d4a:	de 01       	movw	r26, r28
    2d4c:	ab 58       	subi	r26, 0x8B	; 139
    2d4e:	bf 4f       	sbci	r27, 0xFF	; 255
    2d50:	fe 01       	movw	r30, r28
    2d52:	eb 58       	subi	r30, 0x8B	; 139
    2d54:	ff 4f       	sbci	r31, 0xFF	; 255
    2d56:	80 81       	ld	r24, Z
    2d58:	91 81       	ldd	r25, Z+1	; 0x01
    2d5a:	01 97       	sbiw	r24, 0x01	; 1
    2d5c:	11 96       	adiw	r26, 0x01	; 1
    2d5e:	9c 93       	st	X, r25
    2d60:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d62:	fe 01       	movw	r30, r28
    2d64:	eb 58       	subi	r30, 0x8B	; 139
    2d66:	ff 4f       	sbci	r31, 0xFF	; 255
    2d68:	80 81       	ld	r24, Z
    2d6a:	91 81       	ldd	r25, Z+1	; 0x01
    2d6c:	00 97       	sbiw	r24, 0x00	; 0
    2d6e:	d1 f6       	brne	.-76     	; 0x2d24 <__stack+0xb25>
    2d70:	27 c0       	rjmp	.+78     	; 0x2dc0 <__stack+0xbc1>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d72:	8e 01       	movw	r16, r28
    2d74:	0b 58       	subi	r16, 0x8B	; 139
    2d76:	1f 4f       	sbci	r17, 0xFF	; 255
    2d78:	fe 01       	movw	r30, r28
    2d7a:	e9 58       	subi	r30, 0x89	; 137
    2d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7e:	60 81       	ld	r22, Z
    2d80:	71 81       	ldd	r23, Z+1	; 0x01
    2d82:	82 81       	ldd	r24, Z+2	; 0x02
    2d84:	93 81       	ldd	r25, Z+3	; 0x03
    2d86:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	f8 01       	movw	r30, r16
    2d90:	91 83       	std	Z+1, r25	; 0x01
    2d92:	80 83       	st	Z, r24
    2d94:	de 01       	movw	r26, r28
    2d96:	af 58       	subi	r26, 0x8F	; 143
    2d98:	bf 4f       	sbci	r27, 0xFF	; 255
    2d9a:	fe 01       	movw	r30, r28
    2d9c:	eb 58       	subi	r30, 0x8B	; 139
    2d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2da0:	80 81       	ld	r24, Z
    2da2:	91 81       	ldd	r25, Z+1	; 0x01
    2da4:	8d 93       	st	X+, r24
    2da6:	9c 93       	st	X, r25
    2da8:	fe 01       	movw	r30, r28
    2daa:	ef 58       	subi	r30, 0x8F	; 143
    2dac:	ff 4f       	sbci	r31, 0xFF	; 255
    2dae:	80 81       	ld	r24, Z
    2db0:	91 81       	ldd	r25, Z+1	; 0x01
    2db2:	01 97       	sbiw	r24, 0x01	; 1
    2db4:	f1 f7       	brne	.-4      	; 0x2db2 <__stack+0xbb3>
    2db6:	fe 01       	movw	r30, r28
    2db8:	ef 58       	subi	r30, 0x8F	; 143
    2dba:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbc:	91 83       	std	Z+1, r25	; 0x01
    2dbe:	80 83       	st	Z, r24
				_delay_ms(1000);


				servo_3(120);
    2dc0:	88 e7       	ldi	r24, 0x78	; 120
    2dc2:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <servo_3>
    2dc6:	fe 01       	movw	r30, r28
    2dc8:	e3 59       	subi	r30, 0x93	; 147
    2dca:	ff 4f       	sbci	r31, 0xFF	; 255
    2dcc:	80 e0       	ldi	r24, 0x00	; 0
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	aa e7       	ldi	r26, 0x7A	; 122
    2dd2:	b4 e4       	ldi	r27, 0x44	; 68
    2dd4:	80 83       	st	Z, r24
    2dd6:	91 83       	std	Z+1, r25	; 0x01
    2dd8:	a2 83       	std	Z+2, r26	; 0x02
    2dda:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ddc:	8e 01       	movw	r16, r28
    2dde:	07 59       	subi	r16, 0x97	; 151
    2de0:	1f 4f       	sbci	r17, 0xFF	; 255
    2de2:	fe 01       	movw	r30, r28
    2de4:	e3 59       	subi	r30, 0x93	; 147
    2de6:	ff 4f       	sbci	r31, 0xFF	; 255
    2de8:	60 81       	ld	r22, Z
    2dea:	71 81       	ldd	r23, Z+1	; 0x01
    2dec:	82 81       	ldd	r24, Z+2	; 0x02
    2dee:	93 81       	ldd	r25, Z+3	; 0x03
    2df0:	2d ec       	ldi	r18, 0xCD	; 205
    2df2:	3c ec       	ldi	r19, 0xCC	; 204
    2df4:	4c e2       	ldi	r20, 0x2C	; 44
    2df6:	55 e4       	ldi	r21, 0x45	; 69
    2df8:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    2dfc:	dc 01       	movw	r26, r24
    2dfe:	cb 01       	movw	r24, r22
    2e00:	f8 01       	movw	r30, r16
    2e02:	80 83       	st	Z, r24
    2e04:	91 83       	std	Z+1, r25	; 0x01
    2e06:	a2 83       	std	Z+2, r26	; 0x02
    2e08:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e0a:	fe 01       	movw	r30, r28
    2e0c:	e7 59       	subi	r30, 0x97	; 151
    2e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e10:	60 81       	ld	r22, Z
    2e12:	71 81       	ldd	r23, Z+1	; 0x01
    2e14:	82 81       	ldd	r24, Z+2	; 0x02
    2e16:	93 81       	ldd	r25, Z+3	; 0x03
    2e18:	20 e0       	ldi	r18, 0x00	; 0
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	40 e8       	ldi	r20, 0x80	; 128
    2e1e:	5f e3       	ldi	r21, 0x3F	; 63
    2e20:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__ltsf2>
    2e24:	88 23       	and	r24, r24
    2e26:	44 f4       	brge	.+16     	; 0x2e38 <__stack+0xc39>
		__ticks = 1;
    2e28:	fe 01       	movw	r30, r28
    2e2a:	e9 59       	subi	r30, 0x99	; 153
    2e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	91 83       	std	Z+1, r25	; 0x01
    2e34:	80 83       	st	Z, r24
    2e36:	64 c0       	rjmp	.+200    	; 0x2f00 <__stack+0xd01>
	else if (__tmp > 65535)
    2e38:	fe 01       	movw	r30, r28
    2e3a:	e7 59       	subi	r30, 0x97	; 151
    2e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3e:	60 81       	ld	r22, Z
    2e40:	71 81       	ldd	r23, Z+1	; 0x01
    2e42:	82 81       	ldd	r24, Z+2	; 0x02
    2e44:	93 81       	ldd	r25, Z+3	; 0x03
    2e46:	20 e0       	ldi	r18, 0x00	; 0
    2e48:	3f ef       	ldi	r19, 0xFF	; 255
    2e4a:	4f e7       	ldi	r20, 0x7F	; 127
    2e4c:	57 e4       	ldi	r21, 0x47	; 71
    2e4e:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__gtsf2>
    2e52:	18 16       	cp	r1, r24
    2e54:	0c f0       	brlt	.+2      	; 0x2e58 <__stack+0xc59>
    2e56:	43 c0       	rjmp	.+134    	; 0x2ede <__stack+0xcdf>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e58:	fe 01       	movw	r30, r28
    2e5a:	e3 59       	subi	r30, 0x93	; 147
    2e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5e:	60 81       	ld	r22, Z
    2e60:	71 81       	ldd	r23, Z+1	; 0x01
    2e62:	82 81       	ldd	r24, Z+2	; 0x02
    2e64:	93 81       	ldd	r25, Z+3	; 0x03
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	40 e2       	ldi	r20, 0x20	; 32
    2e6c:	51 e4       	ldi	r21, 0x41	; 65
    2e6e:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    2e72:	dc 01       	movw	r26, r24
    2e74:	cb 01       	movw	r24, r22
    2e76:	8e 01       	movw	r16, r28
    2e78:	09 59       	subi	r16, 0x99	; 153
    2e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e7c:	bc 01       	movw	r22, r24
    2e7e:	cd 01       	movw	r24, r26
    2e80:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    2e84:	dc 01       	movw	r26, r24
    2e86:	cb 01       	movw	r24, r22
    2e88:	f8 01       	movw	r30, r16
    2e8a:	91 83       	std	Z+1, r25	; 0x01
    2e8c:	80 83       	st	Z, r24
    2e8e:	1f c0       	rjmp	.+62     	; 0x2ece <__stack+0xccf>
    2e90:	fe 01       	movw	r30, r28
    2e92:	eb 59       	subi	r30, 0x9B	; 155
    2e94:	ff 4f       	sbci	r31, 0xFF	; 255
    2e96:	84 e1       	ldi	r24, 0x14	; 20
    2e98:	91 e0       	ldi	r25, 0x01	; 1
    2e9a:	91 83       	std	Z+1, r25	; 0x01
    2e9c:	80 83       	st	Z, r24
    2e9e:	fe 01       	movw	r30, r28
    2ea0:	eb 59       	subi	r30, 0x9B	; 155
    2ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea4:	80 81       	ld	r24, Z
    2ea6:	91 81       	ldd	r25, Z+1	; 0x01
    2ea8:	01 97       	sbiw	r24, 0x01	; 1
    2eaa:	f1 f7       	brne	.-4      	; 0x2ea8 <__stack+0xca9>
    2eac:	fe 01       	movw	r30, r28
    2eae:	eb 59       	subi	r30, 0x9B	; 155
    2eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb2:	91 83       	std	Z+1, r25	; 0x01
    2eb4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb6:	de 01       	movw	r26, r28
    2eb8:	a9 59       	subi	r26, 0x99	; 153
    2eba:	bf 4f       	sbci	r27, 0xFF	; 255
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	e9 59       	subi	r30, 0x99	; 153
    2ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec2:	80 81       	ld	r24, Z
    2ec4:	91 81       	ldd	r25, Z+1	; 0x01
    2ec6:	01 97       	sbiw	r24, 0x01	; 1
    2ec8:	11 96       	adiw	r26, 0x01	; 1
    2eca:	9c 93       	st	X, r25
    2ecc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ece:	fe 01       	movw	r30, r28
    2ed0:	e9 59       	subi	r30, 0x99	; 153
    2ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed4:	80 81       	ld	r24, Z
    2ed6:	91 81       	ldd	r25, Z+1	; 0x01
    2ed8:	00 97       	sbiw	r24, 0x00	; 0
    2eda:	d1 f6       	brne	.-76     	; 0x2e90 <__stack+0xc91>
    2edc:	27 c0       	rjmp	.+78     	; 0x2f2c <__stack+0xd2d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ede:	8e 01       	movw	r16, r28
    2ee0:	09 59       	subi	r16, 0x99	; 153
    2ee2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ee4:	fe 01       	movw	r30, r28
    2ee6:	e7 59       	subi	r30, 0x97	; 151
    2ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eea:	60 81       	ld	r22, Z
    2eec:	71 81       	ldd	r23, Z+1	; 0x01
    2eee:	82 81       	ldd	r24, Z+2	; 0x02
    2ef0:	93 81       	ldd	r25, Z+3	; 0x03
    2ef2:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	f8 01       	movw	r30, r16
    2efc:	91 83       	std	Z+1, r25	; 0x01
    2efe:	80 83       	st	Z, r24
    2f00:	de 01       	movw	r26, r28
    2f02:	ad 59       	subi	r26, 0x9D	; 157
    2f04:	bf 4f       	sbci	r27, 0xFF	; 255
    2f06:	fe 01       	movw	r30, r28
    2f08:	e9 59       	subi	r30, 0x99	; 153
    2f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0c:	80 81       	ld	r24, Z
    2f0e:	91 81       	ldd	r25, Z+1	; 0x01
    2f10:	8d 93       	st	X+, r24
    2f12:	9c 93       	st	X, r25
    2f14:	fe 01       	movw	r30, r28
    2f16:	ed 59       	subi	r30, 0x9D	; 157
    2f18:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1a:	80 81       	ld	r24, Z
    2f1c:	91 81       	ldd	r25, Z+1	; 0x01
    2f1e:	01 97       	sbiw	r24, 0x01	; 1
    2f20:	f1 f7       	brne	.-4      	; 0x2f1e <__stack+0xd1f>
    2f22:	fe 01       	movw	r30, r28
    2f24:	ed 59       	subi	r30, 0x9D	; 157
    2f26:	ff 4f       	sbci	r31, 0xFF	; 255
    2f28:	91 83       	std	Z+1, r25	; 0x01
    2f2a:	80 83       	st	Z, r24
				_delay_ms(1000);
				servo_1(30);							//Grab the ball and close the arm
    2f2c:	8e e1       	ldi	r24, 0x1E	; 30
    2f2e:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <servo_1>
			  	servo_2(250);
    2f32:	8a ef       	ldi	r24, 0xFA	; 250
    2f34:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <servo_2>
    2f38:	fe 01       	movw	r30, r28
    2f3a:	e1 5a       	subi	r30, 0xA1	; 161
    2f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3e:	80 e0       	ldi	r24, 0x00	; 0
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	aa e7       	ldi	r26, 0x7A	; 122
    2f44:	b4 e4       	ldi	r27, 0x44	; 68
    2f46:	80 83       	st	Z, r24
    2f48:	91 83       	std	Z+1, r25	; 0x01
    2f4a:	a2 83       	std	Z+2, r26	; 0x02
    2f4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f4e:	8e 01       	movw	r16, r28
    2f50:	05 5a       	subi	r16, 0xA5	; 165
    2f52:	1f 4f       	sbci	r17, 0xFF	; 255
    2f54:	fe 01       	movw	r30, r28
    2f56:	e1 5a       	subi	r30, 0xA1	; 161
    2f58:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5a:	60 81       	ld	r22, Z
    2f5c:	71 81       	ldd	r23, Z+1	; 0x01
    2f5e:	82 81       	ldd	r24, Z+2	; 0x02
    2f60:	93 81       	ldd	r25, Z+3	; 0x03
    2f62:	2d ec       	ldi	r18, 0xCD	; 205
    2f64:	3c ec       	ldi	r19, 0xCC	; 204
    2f66:	4c e2       	ldi	r20, 0x2C	; 44
    2f68:	55 e4       	ldi	r21, 0x45	; 69
    2f6a:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    2f6e:	dc 01       	movw	r26, r24
    2f70:	cb 01       	movw	r24, r22
    2f72:	f8 01       	movw	r30, r16
    2f74:	80 83       	st	Z, r24
    2f76:	91 83       	std	Z+1, r25	; 0x01
    2f78:	a2 83       	std	Z+2, r26	; 0x02
    2f7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f7c:	fe 01       	movw	r30, r28
    2f7e:	e5 5a       	subi	r30, 0xA5	; 165
    2f80:	ff 4f       	sbci	r31, 0xFF	; 255
    2f82:	60 81       	ld	r22, Z
    2f84:	71 81       	ldd	r23, Z+1	; 0x01
    2f86:	82 81       	ldd	r24, Z+2	; 0x02
    2f88:	93 81       	ldd	r25, Z+3	; 0x03
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	40 e8       	ldi	r20, 0x80	; 128
    2f90:	5f e3       	ldi	r21, 0x3F	; 63
    2f92:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__ltsf2>
    2f96:	88 23       	and	r24, r24
    2f98:	44 f4       	brge	.+16     	; 0x2faa <__stack+0xdab>
		__ticks = 1;
    2f9a:	fe 01       	movw	r30, r28
    2f9c:	e7 5a       	subi	r30, 0xA7	; 167
    2f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	91 83       	std	Z+1, r25	; 0x01
    2fa6:	80 83       	st	Z, r24
    2fa8:	64 c0       	rjmp	.+200    	; 0x3072 <__stack+0xe73>
	else if (__tmp > 65535)
    2faa:	fe 01       	movw	r30, r28
    2fac:	e5 5a       	subi	r30, 0xA5	; 165
    2fae:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb0:	60 81       	ld	r22, Z
    2fb2:	71 81       	ldd	r23, Z+1	; 0x01
    2fb4:	82 81       	ldd	r24, Z+2	; 0x02
    2fb6:	93 81       	ldd	r25, Z+3	; 0x03
    2fb8:	20 e0       	ldi	r18, 0x00	; 0
    2fba:	3f ef       	ldi	r19, 0xFF	; 255
    2fbc:	4f e7       	ldi	r20, 0x7F	; 127
    2fbe:	57 e4       	ldi	r21, 0x47	; 71
    2fc0:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__gtsf2>
    2fc4:	18 16       	cp	r1, r24
    2fc6:	0c f0       	brlt	.+2      	; 0x2fca <__stack+0xdcb>
    2fc8:	43 c0       	rjmp	.+134    	; 0x3050 <__stack+0xe51>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fca:	fe 01       	movw	r30, r28
    2fcc:	e1 5a       	subi	r30, 0xA1	; 161
    2fce:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd0:	60 81       	ld	r22, Z
    2fd2:	71 81       	ldd	r23, Z+1	; 0x01
    2fd4:	82 81       	ldd	r24, Z+2	; 0x02
    2fd6:	93 81       	ldd	r25, Z+3	; 0x03
    2fd8:	20 e0       	ldi	r18, 0x00	; 0
    2fda:	30 e0       	ldi	r19, 0x00	; 0
    2fdc:	40 e2       	ldi	r20, 0x20	; 32
    2fde:	51 e4       	ldi	r21, 0x41	; 65
    2fe0:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    2fe4:	dc 01       	movw	r26, r24
    2fe6:	cb 01       	movw	r24, r22
    2fe8:	8e 01       	movw	r16, r28
    2fea:	07 5a       	subi	r16, 0xA7	; 167
    2fec:	1f 4f       	sbci	r17, 0xFF	; 255
    2fee:	bc 01       	movw	r22, r24
    2ff0:	cd 01       	movw	r24, r26
    2ff2:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    2ff6:	dc 01       	movw	r26, r24
    2ff8:	cb 01       	movw	r24, r22
    2ffa:	f8 01       	movw	r30, r16
    2ffc:	91 83       	std	Z+1, r25	; 0x01
    2ffe:	80 83       	st	Z, r24
    3000:	1f c0       	rjmp	.+62     	; 0x3040 <__stack+0xe41>
    3002:	fe 01       	movw	r30, r28
    3004:	e9 5a       	subi	r30, 0xA9	; 169
    3006:	ff 4f       	sbci	r31, 0xFF	; 255
    3008:	84 e1       	ldi	r24, 0x14	; 20
    300a:	91 e0       	ldi	r25, 0x01	; 1
    300c:	91 83       	std	Z+1, r25	; 0x01
    300e:	80 83       	st	Z, r24
    3010:	fe 01       	movw	r30, r28
    3012:	e9 5a       	subi	r30, 0xA9	; 169
    3014:	ff 4f       	sbci	r31, 0xFF	; 255
    3016:	80 81       	ld	r24, Z
    3018:	91 81       	ldd	r25, Z+1	; 0x01
    301a:	01 97       	sbiw	r24, 0x01	; 1
    301c:	f1 f7       	brne	.-4      	; 0x301a <__stack+0xe1b>
    301e:	fe 01       	movw	r30, r28
    3020:	e9 5a       	subi	r30, 0xA9	; 169
    3022:	ff 4f       	sbci	r31, 0xFF	; 255
    3024:	91 83       	std	Z+1, r25	; 0x01
    3026:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3028:	de 01       	movw	r26, r28
    302a:	a7 5a       	subi	r26, 0xA7	; 167
    302c:	bf 4f       	sbci	r27, 0xFF	; 255
    302e:	fe 01       	movw	r30, r28
    3030:	e7 5a       	subi	r30, 0xA7	; 167
    3032:	ff 4f       	sbci	r31, 0xFF	; 255
    3034:	80 81       	ld	r24, Z
    3036:	91 81       	ldd	r25, Z+1	; 0x01
    3038:	01 97       	sbiw	r24, 0x01	; 1
    303a:	11 96       	adiw	r26, 0x01	; 1
    303c:	9c 93       	st	X, r25
    303e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3040:	fe 01       	movw	r30, r28
    3042:	e7 5a       	subi	r30, 0xA7	; 167
    3044:	ff 4f       	sbci	r31, 0xFF	; 255
    3046:	80 81       	ld	r24, Z
    3048:	91 81       	ldd	r25, Z+1	; 0x01
    304a:	00 97       	sbiw	r24, 0x00	; 0
    304c:	d1 f6       	brne	.-76     	; 0x3002 <__stack+0xe03>
    304e:	27 c0       	rjmp	.+78     	; 0x309e <__stack+0xe9f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3050:	8e 01       	movw	r16, r28
    3052:	07 5a       	subi	r16, 0xA7	; 167
    3054:	1f 4f       	sbci	r17, 0xFF	; 255
    3056:	fe 01       	movw	r30, r28
    3058:	e5 5a       	subi	r30, 0xA5	; 165
    305a:	ff 4f       	sbci	r31, 0xFF	; 255
    305c:	60 81       	ld	r22, Z
    305e:	71 81       	ldd	r23, Z+1	; 0x01
    3060:	82 81       	ldd	r24, Z+2	; 0x02
    3062:	93 81       	ldd	r25, Z+3	; 0x03
    3064:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    3068:	dc 01       	movw	r26, r24
    306a:	cb 01       	movw	r24, r22
    306c:	f8 01       	movw	r30, r16
    306e:	91 83       	std	Z+1, r25	; 0x01
    3070:	80 83       	st	Z, r24
    3072:	de 01       	movw	r26, r28
    3074:	ab 5a       	subi	r26, 0xAB	; 171
    3076:	bf 4f       	sbci	r27, 0xFF	; 255
    3078:	fe 01       	movw	r30, r28
    307a:	e7 5a       	subi	r30, 0xA7	; 167
    307c:	ff 4f       	sbci	r31, 0xFF	; 255
    307e:	80 81       	ld	r24, Z
    3080:	91 81       	ldd	r25, Z+1	; 0x01
    3082:	8d 93       	st	X+, r24
    3084:	9c 93       	st	X, r25
    3086:	fe 01       	movw	r30, r28
    3088:	eb 5a       	subi	r30, 0xAB	; 171
    308a:	ff 4f       	sbci	r31, 0xFF	; 255
    308c:	80 81       	ld	r24, Z
    308e:	91 81       	ldd	r25, Z+1	; 0x01
    3090:	01 97       	sbiw	r24, 0x01	; 1
    3092:	f1 f7       	brne	.-4      	; 0x3090 <__stack+0xe91>
    3094:	fe 01       	movw	r30, r28
    3096:	eb 5a       	subi	r30, 0xAB	; 171
    3098:	ff 4f       	sbci	r31, 0xFF	; 255
    309a:	91 83       	std	Z+1, r25	; 0x01
    309c:	80 83       	st	Z, r24
				_delay_ms(1000);				// that holds the gripper
			
			}

			data='0';
    309e:	80 e3       	ldi	r24, 0x30	; 48
    30a0:	80 93 1e 03 	sts	0x031E, r24

			sharp = ADC_Conversion(11);							//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
    30a4:	8b e0       	ldi	r24, 0x0B	; 11
    30a6:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <ADC_Conversion>
    30aa:	80 93 23 03 	sts	0x0323, r24
			value = Sharp_GP2D12_estimation(sharp);				//Stores Distance calsulated in a variable "value".
    30ae:	80 91 23 03 	lds	r24, 0x0323
    30b2:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <Sharp_GP2D12_estimation>
    30b6:	fe 01       	movw	r30, r28
    30b8:	ea 51       	subi	r30, 0x1A	; 26
    30ba:	ff 4f       	sbci	r31, 0xFF	; 255
    30bc:	91 83       	std	Z+1, r25	; 0x01
    30be:	80 83       	st	Z, r24
			//value=(int)sharp;
			lcd_print(1,1,value,3);
    30c0:	fe 01       	movw	r30, r28
    30c2:	ea 51       	subi	r30, 0x1A	; 26
    30c4:	ff 4f       	sbci	r31, 0xFF	; 255
    30c6:	20 81       	ld	r18, Z
    30c8:	31 81       	ldd	r19, Z+1	; 0x01
    30ca:	81 e0       	ldi	r24, 0x01	; 1
    30cc:	61 e0       	ldi	r22, 0x01	; 1
    30ce:	a9 01       	movw	r20, r18
    30d0:	23 e0       	ldi	r18, 0x03	; 3
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
		
			sharp1 = ADC_Conversion(9);						//Stores the Analog value of front sharp connected to ADC channel 10 into variable "sharp"
    30d8:	89 e0       	ldi	r24, 0x09	; 9
    30da:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <ADC_Conversion>
    30de:	80 93 1b 03 	sts	0x031B, r24
			value1 = Sharp_GP2D12_estimation(sharp1);			//Stores Distance calsulated in a variable "value".
    30e2:	80 91 1b 03 	lds	r24, 0x031B
    30e6:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <Sharp_GP2D12_estimation>
    30ea:	fe 01       	movw	r30, r28
    30ec:	ec 51       	subi	r30, 0x1C	; 28
    30ee:	ff 4f       	sbci	r31, 0xFF	; 255
    30f0:	91 83       	std	Z+1, r25	; 0x01
    30f2:	80 83       	st	Z, r24
			//value1=(int)sharp1;
			lcd_print(1,5,value1,3);
    30f4:	fe 01       	movw	r30, r28
    30f6:	ec 51       	subi	r30, 0x1C	; 28
    30f8:	ff 4f       	sbci	r31, 0xFF	; 255
    30fa:	20 81       	ld	r18, Z
    30fc:	31 81       	ldd	r19, Z+1	; 0x01
    30fe:	81 e0       	ldi	r24, 0x01	; 1
    3100:	65 e0       	ldi	r22, 0x05	; 5
    3102:	a9 01       	movw	r20, r18
    3104:	23 e0       	ldi	r18, 0x03	; 3
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
		sharp1 = ADC_Conversion(9);						//Stores the Analog value of front sharp connected to ADC channel 10 into variable "sharp"
		value1 = Sharp_GP2D12_estimation(sharp1);			//Stores Distance calsulated in a variable "value".
		//value1=(int)sharp1;
		lcd_print(1,5,value1,3);

		while(value>115 && value1>240)
    310c:	fe 01       	movw	r30, r28
    310e:	ea 51       	subi	r30, 0x1A	; 26
    3110:	ff 4f       	sbci	r31, 0xFF	; 255
    3112:	80 81       	ld	r24, Z
    3114:	91 81       	ldd	r25, Z+1	; 0x01
    3116:	84 37       	cpi	r24, 0x74	; 116
    3118:	91 05       	cpc	r25, r1
    311a:	50 f0       	brcs	.+20     	; 0x3130 <__stack+0xf31>
    311c:	fe 01       	movw	r30, r28
    311e:	ec 51       	subi	r30, 0x1C	; 28
    3120:	ff 4f       	sbci	r31, 0xFF	; 255
    3122:	80 81       	ld	r24, Z
    3124:	91 81       	ldd	r25, Z+1	; 0x01
    3126:	81 3f       	cpi	r24, 0xF1	; 241
    3128:	91 05       	cpc	r25, r1
    312a:	10 f0       	brcs	.+4      	; 0x3130 <__stack+0xf31>
    312c:	0c 94 88 10 	jmp	0x2110	; 0x2110 <main+0x146>
			sharp1 = ADC_Conversion(9);						//Stores the Analog value of front sharp connected to ADC channel 10 into variable "sharp"
			value1 = Sharp_GP2D12_estimation(sharp1);			//Stores Distance calsulated in a variable "value".
			//value1=(int)sharp1;
			lcd_print(1,5,value1,3);
		}
		if(mode == 0)
    3130:	fe 01       	movw	r30, r28
    3132:	ee 51       	subi	r30, 0x1E	; 30
    3134:	ff 4f       	sbci	r31, 0xFF	; 255
    3136:	80 81       	ld	r24, Z
    3138:	91 81       	ldd	r25, Z+1	; 0x01
    313a:	00 97       	sbiw	r24, 0x00	; 0
    313c:	09 f0       	breq	.+2      	; 0x3140 <__stack+0xf41>
    313e:	c0 c2       	rjmp	.+1408   	; 0x36c0 <__stack+0x14c1>
		{
			stop();
    3140:	0e 94 42 0b 	call	0x1684	; 0x1684 <stop>
			servo_3(80);
    3144:	80 e5       	ldi	r24, 0x50	; 80
    3146:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <servo_3>
    314a:	fe 01       	movw	r30, r28
    314c:	ef 5a       	subi	r30, 0xAF	; 175
    314e:	ff 4f       	sbci	r31, 0xFF	; 255
    3150:	80 e0       	ldi	r24, 0x00	; 0
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	aa e7       	ldi	r26, 0x7A	; 122
    3156:	b4 e4       	ldi	r27, 0x44	; 68
    3158:	80 83       	st	Z, r24
    315a:	91 83       	std	Z+1, r25	; 0x01
    315c:	a2 83       	std	Z+2, r26	; 0x02
    315e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3160:	8e 01       	movw	r16, r28
    3162:	03 5b       	subi	r16, 0xB3	; 179
    3164:	1f 4f       	sbci	r17, 0xFF	; 255
    3166:	fe 01       	movw	r30, r28
    3168:	ef 5a       	subi	r30, 0xAF	; 175
    316a:	ff 4f       	sbci	r31, 0xFF	; 255
    316c:	60 81       	ld	r22, Z
    316e:	71 81       	ldd	r23, Z+1	; 0x01
    3170:	82 81       	ldd	r24, Z+2	; 0x02
    3172:	93 81       	ldd	r25, Z+3	; 0x03
    3174:	2d ec       	ldi	r18, 0xCD	; 205
    3176:	3c ec       	ldi	r19, 0xCC	; 204
    3178:	4c e2       	ldi	r20, 0x2C	; 44
    317a:	55 e4       	ldi	r21, 0x45	; 69
    317c:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    3180:	dc 01       	movw	r26, r24
    3182:	cb 01       	movw	r24, r22
    3184:	f8 01       	movw	r30, r16
    3186:	80 83       	st	Z, r24
    3188:	91 83       	std	Z+1, r25	; 0x01
    318a:	a2 83       	std	Z+2, r26	; 0x02
    318c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    318e:	fe 01       	movw	r30, r28
    3190:	e3 5b       	subi	r30, 0xB3	; 179
    3192:	ff 4f       	sbci	r31, 0xFF	; 255
    3194:	60 81       	ld	r22, Z
    3196:	71 81       	ldd	r23, Z+1	; 0x01
    3198:	82 81       	ldd	r24, Z+2	; 0x02
    319a:	93 81       	ldd	r25, Z+3	; 0x03
    319c:	20 e0       	ldi	r18, 0x00	; 0
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	40 e8       	ldi	r20, 0x80	; 128
    31a2:	5f e3       	ldi	r21, 0x3F	; 63
    31a4:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__ltsf2>
    31a8:	88 23       	and	r24, r24
    31aa:	44 f4       	brge	.+16     	; 0x31bc <__stack+0xfbd>
		__ticks = 1;
    31ac:	fe 01       	movw	r30, r28
    31ae:	e5 5b       	subi	r30, 0xB5	; 181
    31b0:	ff 4f       	sbci	r31, 0xFF	; 255
    31b2:	81 e0       	ldi	r24, 0x01	; 1
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	91 83       	std	Z+1, r25	; 0x01
    31b8:	80 83       	st	Z, r24
    31ba:	64 c0       	rjmp	.+200    	; 0x3284 <__stack+0x1085>
	else if (__tmp > 65535)
    31bc:	fe 01       	movw	r30, r28
    31be:	e3 5b       	subi	r30, 0xB3	; 179
    31c0:	ff 4f       	sbci	r31, 0xFF	; 255
    31c2:	60 81       	ld	r22, Z
    31c4:	71 81       	ldd	r23, Z+1	; 0x01
    31c6:	82 81       	ldd	r24, Z+2	; 0x02
    31c8:	93 81       	ldd	r25, Z+3	; 0x03
    31ca:	20 e0       	ldi	r18, 0x00	; 0
    31cc:	3f ef       	ldi	r19, 0xFF	; 255
    31ce:	4f e7       	ldi	r20, 0x7F	; 127
    31d0:	57 e4       	ldi	r21, 0x47	; 71
    31d2:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__gtsf2>
    31d6:	18 16       	cp	r1, r24
    31d8:	0c f0       	brlt	.+2      	; 0x31dc <__stack+0xfdd>
    31da:	43 c0       	rjmp	.+134    	; 0x3262 <__stack+0x1063>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31dc:	fe 01       	movw	r30, r28
    31de:	ef 5a       	subi	r30, 0xAF	; 175
    31e0:	ff 4f       	sbci	r31, 0xFF	; 255
    31e2:	60 81       	ld	r22, Z
    31e4:	71 81       	ldd	r23, Z+1	; 0x01
    31e6:	82 81       	ldd	r24, Z+2	; 0x02
    31e8:	93 81       	ldd	r25, Z+3	; 0x03
    31ea:	20 e0       	ldi	r18, 0x00	; 0
    31ec:	30 e0       	ldi	r19, 0x00	; 0
    31ee:	40 e2       	ldi	r20, 0x20	; 32
    31f0:	51 e4       	ldi	r21, 0x41	; 65
    31f2:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    31f6:	dc 01       	movw	r26, r24
    31f8:	cb 01       	movw	r24, r22
    31fa:	8e 01       	movw	r16, r28
    31fc:	05 5b       	subi	r16, 0xB5	; 181
    31fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3200:	bc 01       	movw	r22, r24
    3202:	cd 01       	movw	r24, r26
    3204:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    3208:	dc 01       	movw	r26, r24
    320a:	cb 01       	movw	r24, r22
    320c:	f8 01       	movw	r30, r16
    320e:	91 83       	std	Z+1, r25	; 0x01
    3210:	80 83       	st	Z, r24
    3212:	1f c0       	rjmp	.+62     	; 0x3252 <__stack+0x1053>
    3214:	fe 01       	movw	r30, r28
    3216:	e7 5b       	subi	r30, 0xB7	; 183
    3218:	ff 4f       	sbci	r31, 0xFF	; 255
    321a:	84 e1       	ldi	r24, 0x14	; 20
    321c:	91 e0       	ldi	r25, 0x01	; 1
    321e:	91 83       	std	Z+1, r25	; 0x01
    3220:	80 83       	st	Z, r24
    3222:	fe 01       	movw	r30, r28
    3224:	e7 5b       	subi	r30, 0xB7	; 183
    3226:	ff 4f       	sbci	r31, 0xFF	; 255
    3228:	80 81       	ld	r24, Z
    322a:	91 81       	ldd	r25, Z+1	; 0x01
    322c:	01 97       	sbiw	r24, 0x01	; 1
    322e:	f1 f7       	brne	.-4      	; 0x322c <__stack+0x102d>
    3230:	fe 01       	movw	r30, r28
    3232:	e7 5b       	subi	r30, 0xB7	; 183
    3234:	ff 4f       	sbci	r31, 0xFF	; 255
    3236:	91 83       	std	Z+1, r25	; 0x01
    3238:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    323a:	de 01       	movw	r26, r28
    323c:	a5 5b       	subi	r26, 0xB5	; 181
    323e:	bf 4f       	sbci	r27, 0xFF	; 255
    3240:	fe 01       	movw	r30, r28
    3242:	e5 5b       	subi	r30, 0xB5	; 181
    3244:	ff 4f       	sbci	r31, 0xFF	; 255
    3246:	80 81       	ld	r24, Z
    3248:	91 81       	ldd	r25, Z+1	; 0x01
    324a:	01 97       	sbiw	r24, 0x01	; 1
    324c:	11 96       	adiw	r26, 0x01	; 1
    324e:	9c 93       	st	X, r25
    3250:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3252:	fe 01       	movw	r30, r28
    3254:	e5 5b       	subi	r30, 0xB5	; 181
    3256:	ff 4f       	sbci	r31, 0xFF	; 255
    3258:	80 81       	ld	r24, Z
    325a:	91 81       	ldd	r25, Z+1	; 0x01
    325c:	00 97       	sbiw	r24, 0x00	; 0
    325e:	d1 f6       	brne	.-76     	; 0x3214 <__stack+0x1015>
    3260:	27 c0       	rjmp	.+78     	; 0x32b0 <__stack+0x10b1>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3262:	8e 01       	movw	r16, r28
    3264:	05 5b       	subi	r16, 0xB5	; 181
    3266:	1f 4f       	sbci	r17, 0xFF	; 255
    3268:	fe 01       	movw	r30, r28
    326a:	e3 5b       	subi	r30, 0xB3	; 179
    326c:	ff 4f       	sbci	r31, 0xFF	; 255
    326e:	60 81       	ld	r22, Z
    3270:	71 81       	ldd	r23, Z+1	; 0x01
    3272:	82 81       	ldd	r24, Z+2	; 0x02
    3274:	93 81       	ldd	r25, Z+3	; 0x03
    3276:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    327a:	dc 01       	movw	r26, r24
    327c:	cb 01       	movw	r24, r22
    327e:	f8 01       	movw	r30, r16
    3280:	91 83       	std	Z+1, r25	; 0x01
    3282:	80 83       	st	Z, r24
    3284:	de 01       	movw	r26, r28
    3286:	a9 5b       	subi	r26, 0xB9	; 185
    3288:	bf 4f       	sbci	r27, 0xFF	; 255
    328a:	fe 01       	movw	r30, r28
    328c:	e5 5b       	subi	r30, 0xB5	; 181
    328e:	ff 4f       	sbci	r31, 0xFF	; 255
    3290:	80 81       	ld	r24, Z
    3292:	91 81       	ldd	r25, Z+1	; 0x01
    3294:	8d 93       	st	X+, r24
    3296:	9c 93       	st	X, r25
    3298:	fe 01       	movw	r30, r28
    329a:	e9 5b       	subi	r30, 0xB9	; 185
    329c:	ff 4f       	sbci	r31, 0xFF	; 255
    329e:	80 81       	ld	r24, Z
    32a0:	91 81       	ldd	r25, Z+1	; 0x01
    32a2:	01 97       	sbiw	r24, 0x01	; 1
    32a4:	f1 f7       	brne	.-4      	; 0x32a2 <__stack+0x10a3>
    32a6:	fe 01       	movw	r30, r28
    32a8:	e9 5b       	subi	r30, 0xB9	; 185
    32aa:	ff 4f       	sbci	r31, 0xFF	; 255
    32ac:	91 83       	std	Z+1, r25	; 0x01
    32ae:	80 83       	st	Z, r24
			_delay_ms(1000);
			servo_1(160);								//code the open the gripper arm
    32b0:	80 ea       	ldi	r24, 0xA0	; 160
    32b2:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <servo_1>
			servo_2(140);
    32b6:	8c e8       	ldi	r24, 0x8C	; 140
    32b8:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <servo_2>
    32bc:	fe 01       	movw	r30, r28
    32be:	ed 5b       	subi	r30, 0xBD	; 189
    32c0:	ff 4f       	sbci	r31, 0xFF	; 255
    32c2:	80 e0       	ldi	r24, 0x00	; 0
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	aa e7       	ldi	r26, 0x7A	; 122
    32c8:	b4 e4       	ldi	r27, 0x44	; 68
    32ca:	80 83       	st	Z, r24
    32cc:	91 83       	std	Z+1, r25	; 0x01
    32ce:	a2 83       	std	Z+2, r26	; 0x02
    32d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32d2:	8e 01       	movw	r16, r28
    32d4:	01 5c       	subi	r16, 0xC1	; 193
    32d6:	1f 4f       	sbci	r17, 0xFF	; 255
    32d8:	fe 01       	movw	r30, r28
    32da:	ed 5b       	subi	r30, 0xBD	; 189
    32dc:	ff 4f       	sbci	r31, 0xFF	; 255
    32de:	60 81       	ld	r22, Z
    32e0:	71 81       	ldd	r23, Z+1	; 0x01
    32e2:	82 81       	ldd	r24, Z+2	; 0x02
    32e4:	93 81       	ldd	r25, Z+3	; 0x03
    32e6:	2d ec       	ldi	r18, 0xCD	; 205
    32e8:	3c ec       	ldi	r19, 0xCC	; 204
    32ea:	4c e2       	ldi	r20, 0x2C	; 44
    32ec:	55 e4       	ldi	r21, 0x45	; 69
    32ee:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    32f2:	dc 01       	movw	r26, r24
    32f4:	cb 01       	movw	r24, r22
    32f6:	f8 01       	movw	r30, r16
    32f8:	80 83       	st	Z, r24
    32fa:	91 83       	std	Z+1, r25	; 0x01
    32fc:	a2 83       	std	Z+2, r26	; 0x02
    32fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3300:	fe 01       	movw	r30, r28
    3302:	ff 96       	adiw	r30, 0x3f	; 63
    3304:	60 81       	ld	r22, Z
    3306:	71 81       	ldd	r23, Z+1	; 0x01
    3308:	82 81       	ldd	r24, Z+2	; 0x02
    330a:	93 81       	ldd	r25, Z+3	; 0x03
    330c:	20 e0       	ldi	r18, 0x00	; 0
    330e:	30 e0       	ldi	r19, 0x00	; 0
    3310:	40 e8       	ldi	r20, 0x80	; 128
    3312:	5f e3       	ldi	r21, 0x3F	; 63
    3314:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__ltsf2>
    3318:	88 23       	and	r24, r24
    331a:	2c f4       	brge	.+10     	; 0x3326 <__stack+0x1127>
		__ticks = 1;
    331c:	81 e0       	ldi	r24, 0x01	; 1
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	9e af       	std	Y+62, r25	; 0x3e
    3322:	8d af       	std	Y+61, r24	; 0x3d
    3324:	46 c0       	rjmp	.+140    	; 0x33b2 <__stack+0x11b3>
	else if (__tmp > 65535)
    3326:	fe 01       	movw	r30, r28
    3328:	ff 96       	adiw	r30, 0x3f	; 63
    332a:	60 81       	ld	r22, Z
    332c:	71 81       	ldd	r23, Z+1	; 0x01
    332e:	82 81       	ldd	r24, Z+2	; 0x02
    3330:	93 81       	ldd	r25, Z+3	; 0x03
    3332:	20 e0       	ldi	r18, 0x00	; 0
    3334:	3f ef       	ldi	r19, 0xFF	; 255
    3336:	4f e7       	ldi	r20, 0x7F	; 127
    3338:	57 e4       	ldi	r21, 0x47	; 71
    333a:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__gtsf2>
    333e:	18 16       	cp	r1, r24
    3340:	64 f5       	brge	.+88     	; 0x339a <__stack+0x119b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3342:	fe 01       	movw	r30, r28
    3344:	ed 5b       	subi	r30, 0xBD	; 189
    3346:	ff 4f       	sbci	r31, 0xFF	; 255
    3348:	60 81       	ld	r22, Z
    334a:	71 81       	ldd	r23, Z+1	; 0x01
    334c:	82 81       	ldd	r24, Z+2	; 0x02
    334e:	93 81       	ldd	r25, Z+3	; 0x03
    3350:	20 e0       	ldi	r18, 0x00	; 0
    3352:	30 e0       	ldi	r19, 0x00	; 0
    3354:	40 e2       	ldi	r20, 0x20	; 32
    3356:	51 e4       	ldi	r21, 0x41	; 65
    3358:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    335c:	dc 01       	movw	r26, r24
    335e:	cb 01       	movw	r24, r22
    3360:	bc 01       	movw	r22, r24
    3362:	cd 01       	movw	r24, r26
    3364:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    3368:	dc 01       	movw	r26, r24
    336a:	cb 01       	movw	r24, r22
    336c:	9e af       	std	Y+62, r25	; 0x3e
    336e:	8d af       	std	Y+61, r24	; 0x3d
    3370:	0f c0       	rjmp	.+30     	; 0x3390 <__stack+0x1191>
    3372:	84 e1       	ldi	r24, 0x14	; 20
    3374:	91 e0       	ldi	r25, 0x01	; 1
    3376:	9c af       	std	Y+60, r25	; 0x3c
    3378:	8b af       	std	Y+59, r24	; 0x3b
    337a:	8b ad       	ldd	r24, Y+59	; 0x3b
    337c:	9c ad       	ldd	r25, Y+60	; 0x3c
    337e:	01 97       	sbiw	r24, 0x01	; 1
    3380:	f1 f7       	brne	.-4      	; 0x337e <__stack+0x117f>
    3382:	9c af       	std	Y+60, r25	; 0x3c
    3384:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3386:	8d ad       	ldd	r24, Y+61	; 0x3d
    3388:	9e ad       	ldd	r25, Y+62	; 0x3e
    338a:	01 97       	sbiw	r24, 0x01	; 1
    338c:	9e af       	std	Y+62, r25	; 0x3e
    338e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3390:	8d ad       	ldd	r24, Y+61	; 0x3d
    3392:	9e ad       	ldd	r25, Y+62	; 0x3e
    3394:	00 97       	sbiw	r24, 0x00	; 0
    3396:	69 f7       	brne	.-38     	; 0x3372 <__stack+0x1173>
    3398:	16 c0       	rjmp	.+44     	; 0x33c6 <__stack+0x11c7>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    339a:	fe 01       	movw	r30, r28
    339c:	ff 96       	adiw	r30, 0x3f	; 63
    339e:	60 81       	ld	r22, Z
    33a0:	71 81       	ldd	r23, Z+1	; 0x01
    33a2:	82 81       	ldd	r24, Z+2	; 0x02
    33a4:	93 81       	ldd	r25, Z+3	; 0x03
    33a6:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    33aa:	dc 01       	movw	r26, r24
    33ac:	cb 01       	movw	r24, r22
    33ae:	9e af       	std	Y+62, r25	; 0x3e
    33b0:	8d af       	std	Y+61, r24	; 0x3d
    33b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    33b4:	9e ad       	ldd	r25, Y+62	; 0x3e
    33b6:	9a af       	std	Y+58, r25	; 0x3a
    33b8:	89 af       	std	Y+57, r24	; 0x39
    33ba:	89 ad       	ldd	r24, Y+57	; 0x39
    33bc:	9a ad       	ldd	r25, Y+58	; 0x3a
    33be:	01 97       	sbiw	r24, 0x01	; 1
    33c0:	f1 f7       	brne	.-4      	; 0x33be <__stack+0x11bf>
    33c2:	9a af       	std	Y+58, r25	; 0x3a
    33c4:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(1000);


			servo_3(120);
    33c6:	88 e7       	ldi	r24, 0x78	; 120
    33c8:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <servo_3>
    33cc:	80 e0       	ldi	r24, 0x00	; 0
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	aa e7       	ldi	r26, 0x7A	; 122
    33d2:	b4 e4       	ldi	r27, 0x44	; 68
    33d4:	8d ab       	std	Y+53, r24	; 0x35
    33d6:	9e ab       	std	Y+54, r25	; 0x36
    33d8:	af ab       	std	Y+55, r26	; 0x37
    33da:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33dc:	6d a9       	ldd	r22, Y+53	; 0x35
    33de:	7e a9       	ldd	r23, Y+54	; 0x36
    33e0:	8f a9       	ldd	r24, Y+55	; 0x37
    33e2:	98 ad       	ldd	r25, Y+56	; 0x38
    33e4:	2d ec       	ldi	r18, 0xCD	; 205
    33e6:	3c ec       	ldi	r19, 0xCC	; 204
    33e8:	4c e2       	ldi	r20, 0x2C	; 44
    33ea:	55 e4       	ldi	r21, 0x45	; 69
    33ec:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    33f0:	dc 01       	movw	r26, r24
    33f2:	cb 01       	movw	r24, r22
    33f4:	89 ab       	std	Y+49, r24	; 0x31
    33f6:	9a ab       	std	Y+50, r25	; 0x32
    33f8:	ab ab       	std	Y+51, r26	; 0x33
    33fa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    33fc:	69 a9       	ldd	r22, Y+49	; 0x31
    33fe:	7a a9       	ldd	r23, Y+50	; 0x32
    3400:	8b a9       	ldd	r24, Y+51	; 0x33
    3402:	9c a9       	ldd	r25, Y+52	; 0x34
    3404:	20 e0       	ldi	r18, 0x00	; 0
    3406:	30 e0       	ldi	r19, 0x00	; 0
    3408:	40 e8       	ldi	r20, 0x80	; 128
    340a:	5f e3       	ldi	r21, 0x3F	; 63
    340c:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__ltsf2>
    3410:	88 23       	and	r24, r24
    3412:	2c f4       	brge	.+10     	; 0x341e <__stack+0x121f>
		__ticks = 1;
    3414:	81 e0       	ldi	r24, 0x01	; 1
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	98 ab       	std	Y+48, r25	; 0x30
    341a:	8f a7       	std	Y+47, r24	; 0x2f
    341c:	3f c0       	rjmp	.+126    	; 0x349c <__stack+0x129d>
	else if (__tmp > 65535)
    341e:	69 a9       	ldd	r22, Y+49	; 0x31
    3420:	7a a9       	ldd	r23, Y+50	; 0x32
    3422:	8b a9       	ldd	r24, Y+51	; 0x33
    3424:	9c a9       	ldd	r25, Y+52	; 0x34
    3426:	20 e0       	ldi	r18, 0x00	; 0
    3428:	3f ef       	ldi	r19, 0xFF	; 255
    342a:	4f e7       	ldi	r20, 0x7F	; 127
    342c:	57 e4       	ldi	r21, 0x47	; 71
    342e:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__gtsf2>
    3432:	18 16       	cp	r1, r24
    3434:	4c f5       	brge	.+82     	; 0x3488 <__stack+0x1289>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3436:	6d a9       	ldd	r22, Y+53	; 0x35
    3438:	7e a9       	ldd	r23, Y+54	; 0x36
    343a:	8f a9       	ldd	r24, Y+55	; 0x37
    343c:	98 ad       	ldd	r25, Y+56	; 0x38
    343e:	20 e0       	ldi	r18, 0x00	; 0
    3440:	30 e0       	ldi	r19, 0x00	; 0
    3442:	40 e2       	ldi	r20, 0x20	; 32
    3444:	51 e4       	ldi	r21, 0x41	; 65
    3446:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    344a:	dc 01       	movw	r26, r24
    344c:	cb 01       	movw	r24, r22
    344e:	bc 01       	movw	r22, r24
    3450:	cd 01       	movw	r24, r26
    3452:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    3456:	dc 01       	movw	r26, r24
    3458:	cb 01       	movw	r24, r22
    345a:	98 ab       	std	Y+48, r25	; 0x30
    345c:	8f a7       	std	Y+47, r24	; 0x2f
    345e:	0f c0       	rjmp	.+30     	; 0x347e <__stack+0x127f>
    3460:	84 e1       	ldi	r24, 0x14	; 20
    3462:	91 e0       	ldi	r25, 0x01	; 1
    3464:	9e a7       	std	Y+46, r25	; 0x2e
    3466:	8d a7       	std	Y+45, r24	; 0x2d
    3468:	8d a5       	ldd	r24, Y+45	; 0x2d
    346a:	9e a5       	ldd	r25, Y+46	; 0x2e
    346c:	01 97       	sbiw	r24, 0x01	; 1
    346e:	f1 f7       	brne	.-4      	; 0x346c <__stack+0x126d>
    3470:	9e a7       	std	Y+46, r25	; 0x2e
    3472:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3474:	8f a5       	ldd	r24, Y+47	; 0x2f
    3476:	98 a9       	ldd	r25, Y+48	; 0x30
    3478:	01 97       	sbiw	r24, 0x01	; 1
    347a:	98 ab       	std	Y+48, r25	; 0x30
    347c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    347e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3480:	98 a9       	ldd	r25, Y+48	; 0x30
    3482:	00 97       	sbiw	r24, 0x00	; 0
    3484:	69 f7       	brne	.-38     	; 0x3460 <__stack+0x1261>
    3486:	14 c0       	rjmp	.+40     	; 0x34b0 <__stack+0x12b1>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3488:	69 a9       	ldd	r22, Y+49	; 0x31
    348a:	7a a9       	ldd	r23, Y+50	; 0x32
    348c:	8b a9       	ldd	r24, Y+51	; 0x33
    348e:	9c a9       	ldd	r25, Y+52	; 0x34
    3490:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    3494:	dc 01       	movw	r26, r24
    3496:	cb 01       	movw	r24, r22
    3498:	98 ab       	std	Y+48, r25	; 0x30
    349a:	8f a7       	std	Y+47, r24	; 0x2f
    349c:	8f a5       	ldd	r24, Y+47	; 0x2f
    349e:	98 a9       	ldd	r25, Y+48	; 0x30
    34a0:	9c a7       	std	Y+44, r25	; 0x2c
    34a2:	8b a7       	std	Y+43, r24	; 0x2b
    34a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    34a6:	9c a5       	ldd	r25, Y+44	; 0x2c
    34a8:	01 97       	sbiw	r24, 0x01	; 1
    34aa:	f1 f7       	brne	.-4      	; 0x34a8 <__stack+0x12a9>
    34ac:	9c a7       	std	Y+44, r25	; 0x2c
    34ae:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1000);
			servo_1(30);							//Grab the ball and close the arm
    34b0:	8e e1       	ldi	r24, 0x1E	; 30
    34b2:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <servo_1>
		  	servo_2(250);
    34b6:	8a ef       	ldi	r24, 0xFA	; 250
    34b8:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <servo_2>
    34bc:	80 e0       	ldi	r24, 0x00	; 0
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	aa e7       	ldi	r26, 0x7A	; 122
    34c2:	b4 e4       	ldi	r27, 0x44	; 68
    34c4:	8f a3       	std	Y+39, r24	; 0x27
    34c6:	98 a7       	std	Y+40, r25	; 0x28
    34c8:	a9 a7       	std	Y+41, r26	; 0x29
    34ca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34cc:	6f a1       	ldd	r22, Y+39	; 0x27
    34ce:	78 a5       	ldd	r23, Y+40	; 0x28
    34d0:	89 a5       	ldd	r24, Y+41	; 0x29
    34d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    34d4:	2d ec       	ldi	r18, 0xCD	; 205
    34d6:	3c ec       	ldi	r19, 0xCC	; 204
    34d8:	4c e2       	ldi	r20, 0x2C	; 44
    34da:	55 e4       	ldi	r21, 0x45	; 69
    34dc:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    34e0:	dc 01       	movw	r26, r24
    34e2:	cb 01       	movw	r24, r22
    34e4:	8b a3       	std	Y+35, r24	; 0x23
    34e6:	9c a3       	std	Y+36, r25	; 0x24
    34e8:	ad a3       	std	Y+37, r26	; 0x25
    34ea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    34ec:	6b a1       	ldd	r22, Y+35	; 0x23
    34ee:	7c a1       	ldd	r23, Y+36	; 0x24
    34f0:	8d a1       	ldd	r24, Y+37	; 0x25
    34f2:	9e a1       	ldd	r25, Y+38	; 0x26
    34f4:	20 e0       	ldi	r18, 0x00	; 0
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	40 e8       	ldi	r20, 0x80	; 128
    34fa:	5f e3       	ldi	r21, 0x3F	; 63
    34fc:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__ltsf2>
    3500:	88 23       	and	r24, r24
    3502:	2c f4       	brge	.+10     	; 0x350e <__stack+0x130f>
		__ticks = 1;
    3504:	81 e0       	ldi	r24, 0x01	; 1
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	9a a3       	std	Y+34, r25	; 0x22
    350a:	89 a3       	std	Y+33, r24	; 0x21
    350c:	3f c0       	rjmp	.+126    	; 0x358c <__stack+0x138d>
	else if (__tmp > 65535)
    350e:	6b a1       	ldd	r22, Y+35	; 0x23
    3510:	7c a1       	ldd	r23, Y+36	; 0x24
    3512:	8d a1       	ldd	r24, Y+37	; 0x25
    3514:	9e a1       	ldd	r25, Y+38	; 0x26
    3516:	20 e0       	ldi	r18, 0x00	; 0
    3518:	3f ef       	ldi	r19, 0xFF	; 255
    351a:	4f e7       	ldi	r20, 0x7F	; 127
    351c:	57 e4       	ldi	r21, 0x47	; 71
    351e:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__gtsf2>
    3522:	18 16       	cp	r1, r24
    3524:	4c f5       	brge	.+82     	; 0x3578 <__stack+0x1379>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3526:	6f a1       	ldd	r22, Y+39	; 0x27
    3528:	78 a5       	ldd	r23, Y+40	; 0x28
    352a:	89 a5       	ldd	r24, Y+41	; 0x29
    352c:	9a a5       	ldd	r25, Y+42	; 0x2a
    352e:	20 e0       	ldi	r18, 0x00	; 0
    3530:	30 e0       	ldi	r19, 0x00	; 0
    3532:	40 e2       	ldi	r20, 0x20	; 32
    3534:	51 e4       	ldi	r21, 0x41	; 65
    3536:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    353a:	dc 01       	movw	r26, r24
    353c:	cb 01       	movw	r24, r22
    353e:	bc 01       	movw	r22, r24
    3540:	cd 01       	movw	r24, r26
    3542:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    3546:	dc 01       	movw	r26, r24
    3548:	cb 01       	movw	r24, r22
    354a:	9a a3       	std	Y+34, r25	; 0x22
    354c:	89 a3       	std	Y+33, r24	; 0x21
    354e:	0f c0       	rjmp	.+30     	; 0x356e <__stack+0x136f>
    3550:	84 e1       	ldi	r24, 0x14	; 20
    3552:	91 e0       	ldi	r25, 0x01	; 1
    3554:	98 a3       	std	Y+32, r25	; 0x20
    3556:	8f 8f       	std	Y+31, r24	; 0x1f
    3558:	8f 8d       	ldd	r24, Y+31	; 0x1f
    355a:	98 a1       	ldd	r25, Y+32	; 0x20
    355c:	01 97       	sbiw	r24, 0x01	; 1
    355e:	f1 f7       	brne	.-4      	; 0x355c <__stack+0x135d>
    3560:	98 a3       	std	Y+32, r25	; 0x20
    3562:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3564:	89 a1       	ldd	r24, Y+33	; 0x21
    3566:	9a a1       	ldd	r25, Y+34	; 0x22
    3568:	01 97       	sbiw	r24, 0x01	; 1
    356a:	9a a3       	std	Y+34, r25	; 0x22
    356c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    356e:	89 a1       	ldd	r24, Y+33	; 0x21
    3570:	9a a1       	ldd	r25, Y+34	; 0x22
    3572:	00 97       	sbiw	r24, 0x00	; 0
    3574:	69 f7       	brne	.-38     	; 0x3550 <__stack+0x1351>
    3576:	14 c0       	rjmp	.+40     	; 0x35a0 <__stack+0x13a1>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3578:	6b a1       	ldd	r22, Y+35	; 0x23
    357a:	7c a1       	ldd	r23, Y+36	; 0x24
    357c:	8d a1       	ldd	r24, Y+37	; 0x25
    357e:	9e a1       	ldd	r25, Y+38	; 0x26
    3580:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    3584:	dc 01       	movw	r26, r24
    3586:	cb 01       	movw	r24, r22
    3588:	9a a3       	std	Y+34, r25	; 0x22
    358a:	89 a3       	std	Y+33, r24	; 0x21
    358c:	89 a1       	ldd	r24, Y+33	; 0x21
    358e:	9a a1       	ldd	r25, Y+34	; 0x22
    3590:	9e 8f       	std	Y+30, r25	; 0x1e
    3592:	8d 8f       	std	Y+29, r24	; 0x1d
    3594:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3596:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3598:	01 97       	sbiw	r24, 0x01	; 1
    359a:	f1 f7       	brne	.-4      	; 0x3598 <__stack+0x1399>
    359c:	9e 8f       	std	Y+30, r25	; 0x1e
    359e:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1000);				// that holds the gripper

			lcd_print(1,1,value,3);
    35a0:	fe 01       	movw	r30, r28
    35a2:	ea 51       	subi	r30, 0x1A	; 26
    35a4:	ff 4f       	sbci	r31, 0xFF	; 255
    35a6:	20 81       	ld	r18, Z
    35a8:	31 81       	ldd	r19, Z+1	; 0x01
    35aa:	81 e0       	ldi	r24, 0x01	; 1
    35ac:	61 e0       	ldi	r22, 0x01	; 1
    35ae:	a9 01       	movw	r20, r18
    35b0:	23 e0       	ldi	r18, 0x03	; 3
    35b2:	30 e0       	ldi	r19, 0x00	; 0
    35b4:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
			lcd_print(1,5,value1,3);
    35b8:	fe 01       	movw	r30, r28
    35ba:	ec 51       	subi	r30, 0x1C	; 28
    35bc:	ff 4f       	sbci	r31, 0xFF	; 255
    35be:	20 81       	ld	r18, Z
    35c0:	31 81       	ldd	r19, Z+1	; 0x01
    35c2:	81 e0       	ldi	r24, 0x01	; 1
    35c4:	65 e0       	ldi	r22, 0x05	; 5
    35c6:	a9 01       	movw	r20, r18
    35c8:	23 e0       	ldi	r18, 0x03	; 3
    35ca:	30 e0       	ldi	r19, 0x00	; 0
    35cc:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
			
			back();
    35d0:	0e 94 37 0b 	call	0x166e	; 0x166e <back>
    35d4:	80 e0       	ldi	r24, 0x00	; 0
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	aa e7       	ldi	r26, 0x7A	; 122
    35da:	b4 e4       	ldi	r27, 0x44	; 68
    35dc:	89 8f       	std	Y+25, r24	; 0x19
    35de:	9a 8f       	std	Y+26, r25	; 0x1a
    35e0:	ab 8f       	std	Y+27, r26	; 0x1b
    35e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35e4:	69 8d       	ldd	r22, Y+25	; 0x19
    35e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35ec:	2d ec       	ldi	r18, 0xCD	; 205
    35ee:	3c ec       	ldi	r19, 0xCC	; 204
    35f0:	4c e2       	ldi	r20, 0x2C	; 44
    35f2:	55 e4       	ldi	r21, 0x45	; 69
    35f4:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    35f8:	dc 01       	movw	r26, r24
    35fa:	cb 01       	movw	r24, r22
    35fc:	8d 8b       	std	Y+21, r24	; 0x15
    35fe:	9e 8b       	std	Y+22, r25	; 0x16
    3600:	af 8b       	std	Y+23, r26	; 0x17
    3602:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3604:	6d 89       	ldd	r22, Y+21	; 0x15
    3606:	7e 89       	ldd	r23, Y+22	; 0x16
    3608:	8f 89       	ldd	r24, Y+23	; 0x17
    360a:	98 8d       	ldd	r25, Y+24	; 0x18
    360c:	20 e0       	ldi	r18, 0x00	; 0
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	40 e8       	ldi	r20, 0x80	; 128
    3612:	5f e3       	ldi	r21, 0x3F	; 63
    3614:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__ltsf2>
    3618:	88 23       	and	r24, r24
    361a:	2c f4       	brge	.+10     	; 0x3626 <__stack+0x1427>
		__ticks = 1;
    361c:	81 e0       	ldi	r24, 0x01	; 1
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	9c 8b       	std	Y+20, r25	; 0x14
    3622:	8b 8b       	std	Y+19, r24	; 0x13
    3624:	3f c0       	rjmp	.+126    	; 0x36a4 <__stack+0x14a5>
	else if (__tmp > 65535)
    3626:	6d 89       	ldd	r22, Y+21	; 0x15
    3628:	7e 89       	ldd	r23, Y+22	; 0x16
    362a:	8f 89       	ldd	r24, Y+23	; 0x17
    362c:	98 8d       	ldd	r25, Y+24	; 0x18
    362e:	20 e0       	ldi	r18, 0x00	; 0
    3630:	3f ef       	ldi	r19, 0xFF	; 255
    3632:	4f e7       	ldi	r20, 0x7F	; 127
    3634:	57 e4       	ldi	r21, 0x47	; 71
    3636:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__gtsf2>
    363a:	18 16       	cp	r1, r24
    363c:	4c f5       	brge	.+82     	; 0x3690 <__stack+0x1491>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    363e:	69 8d       	ldd	r22, Y+25	; 0x19
    3640:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3642:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3644:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3646:	20 e0       	ldi	r18, 0x00	; 0
    3648:	30 e0       	ldi	r19, 0x00	; 0
    364a:	40 e2       	ldi	r20, 0x20	; 32
    364c:	51 e4       	ldi	r21, 0x41	; 65
    364e:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    3652:	dc 01       	movw	r26, r24
    3654:	cb 01       	movw	r24, r22
    3656:	bc 01       	movw	r22, r24
    3658:	cd 01       	movw	r24, r26
    365a:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    365e:	dc 01       	movw	r26, r24
    3660:	cb 01       	movw	r24, r22
    3662:	9c 8b       	std	Y+20, r25	; 0x14
    3664:	8b 8b       	std	Y+19, r24	; 0x13
    3666:	0f c0       	rjmp	.+30     	; 0x3686 <__stack+0x1487>
    3668:	84 e1       	ldi	r24, 0x14	; 20
    366a:	91 e0       	ldi	r25, 0x01	; 1
    366c:	9a 8b       	std	Y+18, r25	; 0x12
    366e:	89 8b       	std	Y+17, r24	; 0x11
    3670:	89 89       	ldd	r24, Y+17	; 0x11
    3672:	9a 89       	ldd	r25, Y+18	; 0x12
    3674:	01 97       	sbiw	r24, 0x01	; 1
    3676:	f1 f7       	brne	.-4      	; 0x3674 <__stack+0x1475>
    3678:	9a 8b       	std	Y+18, r25	; 0x12
    367a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    367c:	8b 89       	ldd	r24, Y+19	; 0x13
    367e:	9c 89       	ldd	r25, Y+20	; 0x14
    3680:	01 97       	sbiw	r24, 0x01	; 1
    3682:	9c 8b       	std	Y+20, r25	; 0x14
    3684:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3686:	8b 89       	ldd	r24, Y+19	; 0x13
    3688:	9c 89       	ldd	r25, Y+20	; 0x14
    368a:	00 97       	sbiw	r24, 0x00	; 0
    368c:	69 f7       	brne	.-38     	; 0x3668 <__stack+0x1469>
    368e:	14 c0       	rjmp	.+40     	; 0x36b8 <__stack+0x14b9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3690:	6d 89       	ldd	r22, Y+21	; 0x15
    3692:	7e 89       	ldd	r23, Y+22	; 0x16
    3694:	8f 89       	ldd	r24, Y+23	; 0x17
    3696:	98 8d       	ldd	r25, Y+24	; 0x18
    3698:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    369c:	dc 01       	movw	r26, r24
    369e:	cb 01       	movw	r24, r22
    36a0:	9c 8b       	std	Y+20, r25	; 0x14
    36a2:	8b 8b       	std	Y+19, r24	; 0x13
    36a4:	8b 89       	ldd	r24, Y+19	; 0x13
    36a6:	9c 89       	ldd	r25, Y+20	; 0x14
    36a8:	98 8b       	std	Y+16, r25	; 0x10
    36aa:	8f 87       	std	Y+15, r24	; 0x0f
    36ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    36ae:	98 89       	ldd	r25, Y+16	; 0x10
    36b0:	01 97       	sbiw	r24, 0x01	; 1
    36b2:	f1 f7       	brne	.-4      	; 0x36b0 <__stack+0x14b1>
    36b4:	98 8b       	std	Y+16, r25	; 0x10
    36b6:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			stop();
    36b8:	0e 94 42 0b 	call	0x1684	; 0x1684 <stop>
    36bc:	0c 94 52 10 	jmp	0x20a4	; 0x20a4 <main+0xda>
		}
		else
		{
			stop();
    36c0:	0e 94 42 0b 	call	0x1684	; 0x1684 <stop>
			back();
    36c4:	0e 94 37 0b 	call	0x166e	; 0x166e <back>
    36c8:	80 e0       	ldi	r24, 0x00	; 0
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	a8 ec       	ldi	r26, 0xC8	; 200
    36ce:	b2 e4       	ldi	r27, 0x42	; 66
    36d0:	8b 87       	std	Y+11, r24	; 0x0b
    36d2:	9c 87       	std	Y+12, r25	; 0x0c
    36d4:	ad 87       	std	Y+13, r26	; 0x0d
    36d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    36da:	7c 85       	ldd	r23, Y+12	; 0x0c
    36dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    36de:	9e 85       	ldd	r25, Y+14	; 0x0e
    36e0:	2d ec       	ldi	r18, 0xCD	; 205
    36e2:	3c ec       	ldi	r19, 0xCC	; 204
    36e4:	4c e2       	ldi	r20, 0x2C	; 44
    36e6:	55 e4       	ldi	r21, 0x45	; 69
    36e8:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    36ec:	dc 01       	movw	r26, r24
    36ee:	cb 01       	movw	r24, r22
    36f0:	8f 83       	std	Y+7, r24	; 0x07
    36f2:	98 87       	std	Y+8, r25	; 0x08
    36f4:	a9 87       	std	Y+9, r26	; 0x09
    36f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36f8:	6f 81       	ldd	r22, Y+7	; 0x07
    36fa:	78 85       	ldd	r23, Y+8	; 0x08
    36fc:	89 85       	ldd	r24, Y+9	; 0x09
    36fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3700:	20 e0       	ldi	r18, 0x00	; 0
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	40 e8       	ldi	r20, 0x80	; 128
    3706:	5f e3       	ldi	r21, 0x3F	; 63
    3708:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__ltsf2>
    370c:	88 23       	and	r24, r24
    370e:	2c f4       	brge	.+10     	; 0x371a <__stack+0x151b>
		__ticks = 1;
    3710:	81 e0       	ldi	r24, 0x01	; 1
    3712:	90 e0       	ldi	r25, 0x00	; 0
    3714:	9e 83       	std	Y+6, r25	; 0x06
    3716:	8d 83       	std	Y+5, r24	; 0x05
    3718:	3f c0       	rjmp	.+126    	; 0x3798 <__stack+0x1599>
	else if (__tmp > 65535)
    371a:	6f 81       	ldd	r22, Y+7	; 0x07
    371c:	78 85       	ldd	r23, Y+8	; 0x08
    371e:	89 85       	ldd	r24, Y+9	; 0x09
    3720:	9a 85       	ldd	r25, Y+10	; 0x0a
    3722:	20 e0       	ldi	r18, 0x00	; 0
    3724:	3f ef       	ldi	r19, 0xFF	; 255
    3726:	4f e7       	ldi	r20, 0x7F	; 127
    3728:	57 e4       	ldi	r21, 0x47	; 71
    372a:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__gtsf2>
    372e:	18 16       	cp	r1, r24
    3730:	4c f5       	brge	.+82     	; 0x3784 <__stack+0x1585>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3732:	6b 85       	ldd	r22, Y+11	; 0x0b
    3734:	7c 85       	ldd	r23, Y+12	; 0x0c
    3736:	8d 85       	ldd	r24, Y+13	; 0x0d
    3738:	9e 85       	ldd	r25, Y+14	; 0x0e
    373a:	20 e0       	ldi	r18, 0x00	; 0
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	40 e2       	ldi	r20, 0x20	; 32
    3740:	51 e4       	ldi	r21, 0x41	; 65
    3742:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__mulsf3>
    3746:	dc 01       	movw	r26, r24
    3748:	cb 01       	movw	r24, r22
    374a:	bc 01       	movw	r22, r24
    374c:	cd 01       	movw	r24, r26
    374e:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    3752:	dc 01       	movw	r26, r24
    3754:	cb 01       	movw	r24, r22
    3756:	9e 83       	std	Y+6, r25	; 0x06
    3758:	8d 83       	std	Y+5, r24	; 0x05
    375a:	0f c0       	rjmp	.+30     	; 0x377a <__stack+0x157b>
    375c:	84 e1       	ldi	r24, 0x14	; 20
    375e:	91 e0       	ldi	r25, 0x01	; 1
    3760:	9c 83       	std	Y+4, r25	; 0x04
    3762:	8b 83       	std	Y+3, r24	; 0x03
    3764:	8b 81       	ldd	r24, Y+3	; 0x03
    3766:	9c 81       	ldd	r25, Y+4	; 0x04
    3768:	01 97       	sbiw	r24, 0x01	; 1
    376a:	f1 f7       	brne	.-4      	; 0x3768 <__stack+0x1569>
    376c:	9c 83       	std	Y+4, r25	; 0x04
    376e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3770:	8d 81       	ldd	r24, Y+5	; 0x05
    3772:	9e 81       	ldd	r25, Y+6	; 0x06
    3774:	01 97       	sbiw	r24, 0x01	; 1
    3776:	9e 83       	std	Y+6, r25	; 0x06
    3778:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    377a:	8d 81       	ldd	r24, Y+5	; 0x05
    377c:	9e 81       	ldd	r25, Y+6	; 0x06
    377e:	00 97       	sbiw	r24, 0x00	; 0
    3780:	69 f7       	brne	.-38     	; 0x375c <__stack+0x155d>
    3782:	14 c0       	rjmp	.+40     	; 0x37ac <__stack+0x15ad>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3784:	6f 81       	ldd	r22, Y+7	; 0x07
    3786:	78 85       	ldd	r23, Y+8	; 0x08
    3788:	89 85       	ldd	r24, Y+9	; 0x09
    378a:	9a 85       	ldd	r25, Y+10	; 0x0a
    378c:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fixunssfsi>
    3790:	dc 01       	movw	r26, r24
    3792:	cb 01       	movw	r24, r22
    3794:	9e 83       	std	Y+6, r25	; 0x06
    3796:	8d 83       	std	Y+5, r24	; 0x05
    3798:	8d 81       	ldd	r24, Y+5	; 0x05
    379a:	9e 81       	ldd	r25, Y+6	; 0x06
    379c:	9a 83       	std	Y+2, r25	; 0x02
    379e:	89 83       	std	Y+1, r24	; 0x01
    37a0:	89 81       	ldd	r24, Y+1	; 0x01
    37a2:	9a 81       	ldd	r25, Y+2	; 0x02
    37a4:	01 97       	sbiw	r24, 0x01	; 1
    37a6:	f1 f7       	brne	.-4      	; 0x37a4 <__stack+0x15a5>
    37a8:	9a 83       	std	Y+2, r25	; 0x02
    37aa:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(100);
			stop();
    37ac:	0e 94 42 0b 	call	0x1684	; 0x1684 <stop>
    37b0:	0c 94 52 10 	jmp	0x20a4	; 0x20a4 <main+0xda>

000037b4 <__fixunssfsi>:
    37b4:	ef 92       	push	r14
    37b6:	ff 92       	push	r15
    37b8:	0f 93       	push	r16
    37ba:	1f 93       	push	r17
    37bc:	7b 01       	movw	r14, r22
    37be:	8c 01       	movw	r16, r24
    37c0:	20 e0       	ldi	r18, 0x00	; 0
    37c2:	30 e0       	ldi	r19, 0x00	; 0
    37c4:	40 e0       	ldi	r20, 0x00	; 0
    37c6:	5f e4       	ldi	r21, 0x4F	; 79
    37c8:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__gesf2>
    37cc:	88 23       	and	r24, r24
    37ce:	8c f0       	brlt	.+34     	; 0x37f2 <__fixunssfsi+0x3e>
    37d0:	c8 01       	movw	r24, r16
    37d2:	b7 01       	movw	r22, r14
    37d4:	20 e0       	ldi	r18, 0x00	; 0
    37d6:	30 e0       	ldi	r19, 0x00	; 0
    37d8:	40 e0       	ldi	r20, 0x00	; 0
    37da:	5f e4       	ldi	r21, 0x4F	; 79
    37dc:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <__subsf3>
    37e0:	0e 94 44 20 	call	0x4088	; 0x4088 <__fixsfsi>
    37e4:	9b 01       	movw	r18, r22
    37e6:	ac 01       	movw	r20, r24
    37e8:	20 50       	subi	r18, 0x00	; 0
    37ea:	30 40       	sbci	r19, 0x00	; 0
    37ec:	40 40       	sbci	r20, 0x00	; 0
    37ee:	50 48       	sbci	r21, 0x80	; 128
    37f0:	06 c0       	rjmp	.+12     	; 0x37fe <__fixunssfsi+0x4a>
    37f2:	c8 01       	movw	r24, r16
    37f4:	b7 01       	movw	r22, r14
    37f6:	0e 94 44 20 	call	0x4088	; 0x4088 <__fixsfsi>
    37fa:	9b 01       	movw	r18, r22
    37fc:	ac 01       	movw	r20, r24
    37fe:	b9 01       	movw	r22, r18
    3800:	ca 01       	movw	r24, r20
    3802:	1f 91       	pop	r17
    3804:	0f 91       	pop	r16
    3806:	ff 90       	pop	r15
    3808:	ef 90       	pop	r14
    380a:	08 95       	ret

0000380c <_fpadd_parts>:
    380c:	a0 e0       	ldi	r26, 0x00	; 0
    380e:	b0 e0       	ldi	r27, 0x00	; 0
    3810:	ec e0       	ldi	r30, 0x0C	; 12
    3812:	fc e1       	ldi	r31, 0x1C	; 28
    3814:	0c 94 1a 23 	jmp	0x4634	; 0x4634 <__prologue_saves__>
    3818:	dc 01       	movw	r26, r24
    381a:	2b 01       	movw	r4, r22
    381c:	fa 01       	movw	r30, r20
    381e:	9c 91       	ld	r25, X
    3820:	92 30       	cpi	r25, 0x02	; 2
    3822:	08 f4       	brcc	.+2      	; 0x3826 <_fpadd_parts+0x1a>
    3824:	39 c1       	rjmp	.+626    	; 0x3a98 <_fpadd_parts+0x28c>
    3826:	eb 01       	movw	r28, r22
    3828:	88 81       	ld	r24, Y
    382a:	82 30       	cpi	r24, 0x02	; 2
    382c:	08 f4       	brcc	.+2      	; 0x3830 <_fpadd_parts+0x24>
    382e:	33 c1       	rjmp	.+614    	; 0x3a96 <_fpadd_parts+0x28a>
    3830:	94 30       	cpi	r25, 0x04	; 4
    3832:	69 f4       	brne	.+26     	; 0x384e <_fpadd_parts+0x42>
    3834:	84 30       	cpi	r24, 0x04	; 4
    3836:	09 f0       	breq	.+2      	; 0x383a <_fpadd_parts+0x2e>
    3838:	2f c1       	rjmp	.+606    	; 0x3a98 <_fpadd_parts+0x28c>
    383a:	11 96       	adiw	r26, 0x01	; 1
    383c:	9c 91       	ld	r25, X
    383e:	11 97       	sbiw	r26, 0x01	; 1
    3840:	89 81       	ldd	r24, Y+1	; 0x01
    3842:	98 17       	cp	r25, r24
    3844:	09 f4       	brne	.+2      	; 0x3848 <_fpadd_parts+0x3c>
    3846:	28 c1       	rjmp	.+592    	; 0x3a98 <_fpadd_parts+0x28c>
    3848:	a0 e0       	ldi	r26, 0x00	; 0
    384a:	b2 e0       	ldi	r27, 0x02	; 2
    384c:	25 c1       	rjmp	.+586    	; 0x3a98 <_fpadd_parts+0x28c>
    384e:	84 30       	cpi	r24, 0x04	; 4
    3850:	09 f4       	brne	.+2      	; 0x3854 <_fpadd_parts+0x48>
    3852:	21 c1       	rjmp	.+578    	; 0x3a96 <_fpadd_parts+0x28a>
    3854:	82 30       	cpi	r24, 0x02	; 2
    3856:	a9 f4       	brne	.+42     	; 0x3882 <_fpadd_parts+0x76>
    3858:	92 30       	cpi	r25, 0x02	; 2
    385a:	09 f0       	breq	.+2      	; 0x385e <_fpadd_parts+0x52>
    385c:	1d c1       	rjmp	.+570    	; 0x3a98 <_fpadd_parts+0x28c>
    385e:	9a 01       	movw	r18, r20
    3860:	ad 01       	movw	r20, r26
    3862:	88 e0       	ldi	r24, 0x08	; 8
    3864:	ea 01       	movw	r28, r20
    3866:	09 90       	ld	r0, Y+
    3868:	ae 01       	movw	r20, r28
    386a:	e9 01       	movw	r28, r18
    386c:	09 92       	st	Y+, r0
    386e:	9e 01       	movw	r18, r28
    3870:	81 50       	subi	r24, 0x01	; 1
    3872:	c1 f7       	brne	.-16     	; 0x3864 <_fpadd_parts+0x58>
    3874:	e2 01       	movw	r28, r4
    3876:	89 81       	ldd	r24, Y+1	; 0x01
    3878:	11 96       	adiw	r26, 0x01	; 1
    387a:	9c 91       	ld	r25, X
    387c:	89 23       	and	r24, r25
    387e:	81 83       	std	Z+1, r24	; 0x01
    3880:	08 c1       	rjmp	.+528    	; 0x3a92 <_fpadd_parts+0x286>
    3882:	92 30       	cpi	r25, 0x02	; 2
    3884:	09 f4       	brne	.+2      	; 0x3888 <_fpadd_parts+0x7c>
    3886:	07 c1       	rjmp	.+526    	; 0x3a96 <_fpadd_parts+0x28a>
    3888:	12 96       	adiw	r26, 0x02	; 2
    388a:	2d 90       	ld	r2, X+
    388c:	3c 90       	ld	r3, X
    388e:	13 97       	sbiw	r26, 0x03	; 3
    3890:	eb 01       	movw	r28, r22
    3892:	8a 81       	ldd	r24, Y+2	; 0x02
    3894:	9b 81       	ldd	r25, Y+3	; 0x03
    3896:	14 96       	adiw	r26, 0x04	; 4
    3898:	ad 90       	ld	r10, X+
    389a:	bd 90       	ld	r11, X+
    389c:	cd 90       	ld	r12, X+
    389e:	dc 90       	ld	r13, X
    38a0:	17 97       	sbiw	r26, 0x07	; 7
    38a2:	ec 80       	ldd	r14, Y+4	; 0x04
    38a4:	fd 80       	ldd	r15, Y+5	; 0x05
    38a6:	0e 81       	ldd	r16, Y+6	; 0x06
    38a8:	1f 81       	ldd	r17, Y+7	; 0x07
    38aa:	91 01       	movw	r18, r2
    38ac:	28 1b       	sub	r18, r24
    38ae:	39 0b       	sbc	r19, r25
    38b0:	b9 01       	movw	r22, r18
    38b2:	37 ff       	sbrs	r19, 7
    38b4:	04 c0       	rjmp	.+8      	; 0x38be <_fpadd_parts+0xb2>
    38b6:	66 27       	eor	r22, r22
    38b8:	77 27       	eor	r23, r23
    38ba:	62 1b       	sub	r22, r18
    38bc:	73 0b       	sbc	r23, r19
    38be:	60 32       	cpi	r22, 0x20	; 32
    38c0:	71 05       	cpc	r23, r1
    38c2:	0c f0       	brlt	.+2      	; 0x38c6 <_fpadd_parts+0xba>
    38c4:	61 c0       	rjmp	.+194    	; 0x3988 <_fpadd_parts+0x17c>
    38c6:	12 16       	cp	r1, r18
    38c8:	13 06       	cpc	r1, r19
    38ca:	6c f5       	brge	.+90     	; 0x3926 <_fpadd_parts+0x11a>
    38cc:	37 01       	movw	r6, r14
    38ce:	48 01       	movw	r8, r16
    38d0:	06 2e       	mov	r0, r22
    38d2:	04 c0       	rjmp	.+8      	; 0x38dc <_fpadd_parts+0xd0>
    38d4:	96 94       	lsr	r9
    38d6:	87 94       	ror	r8
    38d8:	77 94       	ror	r7
    38da:	67 94       	ror	r6
    38dc:	0a 94       	dec	r0
    38de:	d2 f7       	brpl	.-12     	; 0x38d4 <_fpadd_parts+0xc8>
    38e0:	21 e0       	ldi	r18, 0x01	; 1
    38e2:	30 e0       	ldi	r19, 0x00	; 0
    38e4:	40 e0       	ldi	r20, 0x00	; 0
    38e6:	50 e0       	ldi	r21, 0x00	; 0
    38e8:	04 c0       	rjmp	.+8      	; 0x38f2 <_fpadd_parts+0xe6>
    38ea:	22 0f       	add	r18, r18
    38ec:	33 1f       	adc	r19, r19
    38ee:	44 1f       	adc	r20, r20
    38f0:	55 1f       	adc	r21, r21
    38f2:	6a 95       	dec	r22
    38f4:	d2 f7       	brpl	.-12     	; 0x38ea <_fpadd_parts+0xde>
    38f6:	21 50       	subi	r18, 0x01	; 1
    38f8:	30 40       	sbci	r19, 0x00	; 0
    38fa:	40 40       	sbci	r20, 0x00	; 0
    38fc:	50 40       	sbci	r21, 0x00	; 0
    38fe:	2e 21       	and	r18, r14
    3900:	3f 21       	and	r19, r15
    3902:	40 23       	and	r20, r16
    3904:	51 23       	and	r21, r17
    3906:	21 15       	cp	r18, r1
    3908:	31 05       	cpc	r19, r1
    390a:	41 05       	cpc	r20, r1
    390c:	51 05       	cpc	r21, r1
    390e:	21 f0       	breq	.+8      	; 0x3918 <_fpadd_parts+0x10c>
    3910:	21 e0       	ldi	r18, 0x01	; 1
    3912:	30 e0       	ldi	r19, 0x00	; 0
    3914:	40 e0       	ldi	r20, 0x00	; 0
    3916:	50 e0       	ldi	r21, 0x00	; 0
    3918:	79 01       	movw	r14, r18
    391a:	8a 01       	movw	r16, r20
    391c:	e6 28       	or	r14, r6
    391e:	f7 28       	or	r15, r7
    3920:	08 29       	or	r16, r8
    3922:	19 29       	or	r17, r9
    3924:	3c c0       	rjmp	.+120    	; 0x399e <_fpadd_parts+0x192>
    3926:	23 2b       	or	r18, r19
    3928:	d1 f1       	breq	.+116    	; 0x399e <_fpadd_parts+0x192>
    392a:	26 0e       	add	r2, r22
    392c:	37 1e       	adc	r3, r23
    392e:	35 01       	movw	r6, r10
    3930:	46 01       	movw	r8, r12
    3932:	06 2e       	mov	r0, r22
    3934:	04 c0       	rjmp	.+8      	; 0x393e <_fpadd_parts+0x132>
    3936:	96 94       	lsr	r9
    3938:	87 94       	ror	r8
    393a:	77 94       	ror	r7
    393c:	67 94       	ror	r6
    393e:	0a 94       	dec	r0
    3940:	d2 f7       	brpl	.-12     	; 0x3936 <_fpadd_parts+0x12a>
    3942:	21 e0       	ldi	r18, 0x01	; 1
    3944:	30 e0       	ldi	r19, 0x00	; 0
    3946:	40 e0       	ldi	r20, 0x00	; 0
    3948:	50 e0       	ldi	r21, 0x00	; 0
    394a:	04 c0       	rjmp	.+8      	; 0x3954 <_fpadd_parts+0x148>
    394c:	22 0f       	add	r18, r18
    394e:	33 1f       	adc	r19, r19
    3950:	44 1f       	adc	r20, r20
    3952:	55 1f       	adc	r21, r21
    3954:	6a 95       	dec	r22
    3956:	d2 f7       	brpl	.-12     	; 0x394c <_fpadd_parts+0x140>
    3958:	21 50       	subi	r18, 0x01	; 1
    395a:	30 40       	sbci	r19, 0x00	; 0
    395c:	40 40       	sbci	r20, 0x00	; 0
    395e:	50 40       	sbci	r21, 0x00	; 0
    3960:	2a 21       	and	r18, r10
    3962:	3b 21       	and	r19, r11
    3964:	4c 21       	and	r20, r12
    3966:	5d 21       	and	r21, r13
    3968:	21 15       	cp	r18, r1
    396a:	31 05       	cpc	r19, r1
    396c:	41 05       	cpc	r20, r1
    396e:	51 05       	cpc	r21, r1
    3970:	21 f0       	breq	.+8      	; 0x397a <_fpadd_parts+0x16e>
    3972:	21 e0       	ldi	r18, 0x01	; 1
    3974:	30 e0       	ldi	r19, 0x00	; 0
    3976:	40 e0       	ldi	r20, 0x00	; 0
    3978:	50 e0       	ldi	r21, 0x00	; 0
    397a:	59 01       	movw	r10, r18
    397c:	6a 01       	movw	r12, r20
    397e:	a6 28       	or	r10, r6
    3980:	b7 28       	or	r11, r7
    3982:	c8 28       	or	r12, r8
    3984:	d9 28       	or	r13, r9
    3986:	0b c0       	rjmp	.+22     	; 0x399e <_fpadd_parts+0x192>
    3988:	82 15       	cp	r24, r2
    398a:	93 05       	cpc	r25, r3
    398c:	2c f0       	brlt	.+10     	; 0x3998 <_fpadd_parts+0x18c>
    398e:	1c 01       	movw	r2, r24
    3990:	aa 24       	eor	r10, r10
    3992:	bb 24       	eor	r11, r11
    3994:	65 01       	movw	r12, r10
    3996:	03 c0       	rjmp	.+6      	; 0x399e <_fpadd_parts+0x192>
    3998:	ee 24       	eor	r14, r14
    399a:	ff 24       	eor	r15, r15
    399c:	87 01       	movw	r16, r14
    399e:	11 96       	adiw	r26, 0x01	; 1
    39a0:	9c 91       	ld	r25, X
    39a2:	d2 01       	movw	r26, r4
    39a4:	11 96       	adiw	r26, 0x01	; 1
    39a6:	8c 91       	ld	r24, X
    39a8:	98 17       	cp	r25, r24
    39aa:	09 f4       	brne	.+2      	; 0x39ae <_fpadd_parts+0x1a2>
    39ac:	45 c0       	rjmp	.+138    	; 0x3a38 <_fpadd_parts+0x22c>
    39ae:	99 23       	and	r25, r25
    39b0:	39 f0       	breq	.+14     	; 0x39c0 <_fpadd_parts+0x1b4>
    39b2:	a8 01       	movw	r20, r16
    39b4:	97 01       	movw	r18, r14
    39b6:	2a 19       	sub	r18, r10
    39b8:	3b 09       	sbc	r19, r11
    39ba:	4c 09       	sbc	r20, r12
    39bc:	5d 09       	sbc	r21, r13
    39be:	06 c0       	rjmp	.+12     	; 0x39cc <_fpadd_parts+0x1c0>
    39c0:	a6 01       	movw	r20, r12
    39c2:	95 01       	movw	r18, r10
    39c4:	2e 19       	sub	r18, r14
    39c6:	3f 09       	sbc	r19, r15
    39c8:	40 0b       	sbc	r20, r16
    39ca:	51 0b       	sbc	r21, r17
    39cc:	57 fd       	sbrc	r21, 7
    39ce:	08 c0       	rjmp	.+16     	; 0x39e0 <_fpadd_parts+0x1d4>
    39d0:	11 82       	std	Z+1, r1	; 0x01
    39d2:	33 82       	std	Z+3, r3	; 0x03
    39d4:	22 82       	std	Z+2, r2	; 0x02
    39d6:	24 83       	std	Z+4, r18	; 0x04
    39d8:	35 83       	std	Z+5, r19	; 0x05
    39da:	46 83       	std	Z+6, r20	; 0x06
    39dc:	57 83       	std	Z+7, r21	; 0x07
    39de:	1d c0       	rjmp	.+58     	; 0x3a1a <_fpadd_parts+0x20e>
    39e0:	81 e0       	ldi	r24, 0x01	; 1
    39e2:	81 83       	std	Z+1, r24	; 0x01
    39e4:	33 82       	std	Z+3, r3	; 0x03
    39e6:	22 82       	std	Z+2, r2	; 0x02
    39e8:	88 27       	eor	r24, r24
    39ea:	99 27       	eor	r25, r25
    39ec:	dc 01       	movw	r26, r24
    39ee:	82 1b       	sub	r24, r18
    39f0:	93 0b       	sbc	r25, r19
    39f2:	a4 0b       	sbc	r26, r20
    39f4:	b5 0b       	sbc	r27, r21
    39f6:	84 83       	std	Z+4, r24	; 0x04
    39f8:	95 83       	std	Z+5, r25	; 0x05
    39fa:	a6 83       	std	Z+6, r26	; 0x06
    39fc:	b7 83       	std	Z+7, r27	; 0x07
    39fe:	0d c0       	rjmp	.+26     	; 0x3a1a <_fpadd_parts+0x20e>
    3a00:	22 0f       	add	r18, r18
    3a02:	33 1f       	adc	r19, r19
    3a04:	44 1f       	adc	r20, r20
    3a06:	55 1f       	adc	r21, r21
    3a08:	24 83       	std	Z+4, r18	; 0x04
    3a0a:	35 83       	std	Z+5, r19	; 0x05
    3a0c:	46 83       	std	Z+6, r20	; 0x06
    3a0e:	57 83       	std	Z+7, r21	; 0x07
    3a10:	82 81       	ldd	r24, Z+2	; 0x02
    3a12:	93 81       	ldd	r25, Z+3	; 0x03
    3a14:	01 97       	sbiw	r24, 0x01	; 1
    3a16:	93 83       	std	Z+3, r25	; 0x03
    3a18:	82 83       	std	Z+2, r24	; 0x02
    3a1a:	24 81       	ldd	r18, Z+4	; 0x04
    3a1c:	35 81       	ldd	r19, Z+5	; 0x05
    3a1e:	46 81       	ldd	r20, Z+6	; 0x06
    3a20:	57 81       	ldd	r21, Z+7	; 0x07
    3a22:	da 01       	movw	r26, r20
    3a24:	c9 01       	movw	r24, r18
    3a26:	01 97       	sbiw	r24, 0x01	; 1
    3a28:	a1 09       	sbc	r26, r1
    3a2a:	b1 09       	sbc	r27, r1
    3a2c:	8f 5f       	subi	r24, 0xFF	; 255
    3a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a30:	af 4f       	sbci	r26, 0xFF	; 255
    3a32:	bf 43       	sbci	r27, 0x3F	; 63
    3a34:	28 f3       	brcs	.-54     	; 0x3a00 <_fpadd_parts+0x1f4>
    3a36:	0b c0       	rjmp	.+22     	; 0x3a4e <_fpadd_parts+0x242>
    3a38:	91 83       	std	Z+1, r25	; 0x01
    3a3a:	33 82       	std	Z+3, r3	; 0x03
    3a3c:	22 82       	std	Z+2, r2	; 0x02
    3a3e:	ea 0c       	add	r14, r10
    3a40:	fb 1c       	adc	r15, r11
    3a42:	0c 1d       	adc	r16, r12
    3a44:	1d 1d       	adc	r17, r13
    3a46:	e4 82       	std	Z+4, r14	; 0x04
    3a48:	f5 82       	std	Z+5, r15	; 0x05
    3a4a:	06 83       	std	Z+6, r16	; 0x06
    3a4c:	17 83       	std	Z+7, r17	; 0x07
    3a4e:	83 e0       	ldi	r24, 0x03	; 3
    3a50:	80 83       	st	Z, r24
    3a52:	24 81       	ldd	r18, Z+4	; 0x04
    3a54:	35 81       	ldd	r19, Z+5	; 0x05
    3a56:	46 81       	ldd	r20, Z+6	; 0x06
    3a58:	57 81       	ldd	r21, Z+7	; 0x07
    3a5a:	57 ff       	sbrs	r21, 7
    3a5c:	1a c0       	rjmp	.+52     	; 0x3a92 <_fpadd_parts+0x286>
    3a5e:	c9 01       	movw	r24, r18
    3a60:	aa 27       	eor	r26, r26
    3a62:	97 fd       	sbrc	r25, 7
    3a64:	a0 95       	com	r26
    3a66:	ba 2f       	mov	r27, r26
    3a68:	81 70       	andi	r24, 0x01	; 1
    3a6a:	90 70       	andi	r25, 0x00	; 0
    3a6c:	a0 70       	andi	r26, 0x00	; 0
    3a6e:	b0 70       	andi	r27, 0x00	; 0
    3a70:	56 95       	lsr	r21
    3a72:	47 95       	ror	r20
    3a74:	37 95       	ror	r19
    3a76:	27 95       	ror	r18
    3a78:	82 2b       	or	r24, r18
    3a7a:	93 2b       	or	r25, r19
    3a7c:	a4 2b       	or	r26, r20
    3a7e:	b5 2b       	or	r27, r21
    3a80:	84 83       	std	Z+4, r24	; 0x04
    3a82:	95 83       	std	Z+5, r25	; 0x05
    3a84:	a6 83       	std	Z+6, r26	; 0x06
    3a86:	b7 83       	std	Z+7, r27	; 0x07
    3a88:	82 81       	ldd	r24, Z+2	; 0x02
    3a8a:	93 81       	ldd	r25, Z+3	; 0x03
    3a8c:	01 96       	adiw	r24, 0x01	; 1
    3a8e:	93 83       	std	Z+3, r25	; 0x03
    3a90:	82 83       	std	Z+2, r24	; 0x02
    3a92:	df 01       	movw	r26, r30
    3a94:	01 c0       	rjmp	.+2      	; 0x3a98 <_fpadd_parts+0x28c>
    3a96:	d2 01       	movw	r26, r4
    3a98:	cd 01       	movw	r24, r26
    3a9a:	cd b7       	in	r28, 0x3d	; 61
    3a9c:	de b7       	in	r29, 0x3e	; 62
    3a9e:	e2 e1       	ldi	r30, 0x12	; 18
    3aa0:	0c 94 36 23 	jmp	0x466c	; 0x466c <__epilogue_restores__>

00003aa4 <__subsf3>:
    3aa4:	a0 e2       	ldi	r26, 0x20	; 32
    3aa6:	b0 e0       	ldi	r27, 0x00	; 0
    3aa8:	e8 e5       	ldi	r30, 0x58	; 88
    3aaa:	fd e1       	ldi	r31, 0x1D	; 29
    3aac:	0c 94 26 23 	jmp	0x464c	; 0x464c <__prologue_saves__+0x18>
    3ab0:	69 83       	std	Y+1, r22	; 0x01
    3ab2:	7a 83       	std	Y+2, r23	; 0x02
    3ab4:	8b 83       	std	Y+3, r24	; 0x03
    3ab6:	9c 83       	std	Y+4, r25	; 0x04
    3ab8:	2d 83       	std	Y+5, r18	; 0x05
    3aba:	3e 83       	std	Y+6, r19	; 0x06
    3abc:	4f 83       	std	Y+7, r20	; 0x07
    3abe:	58 87       	std	Y+8, r21	; 0x08
    3ac0:	e9 e0       	ldi	r30, 0x09	; 9
    3ac2:	ee 2e       	mov	r14, r30
    3ac4:	f1 2c       	mov	r15, r1
    3ac6:	ec 0e       	add	r14, r28
    3ac8:	fd 1e       	adc	r15, r29
    3aca:	ce 01       	movw	r24, r28
    3acc:	01 96       	adiw	r24, 0x01	; 1
    3ace:	b7 01       	movw	r22, r14
    3ad0:	0e 94 35 22 	call	0x446a	; 0x446a <__unpack_f>
    3ad4:	8e 01       	movw	r16, r28
    3ad6:	0f 5e       	subi	r16, 0xEF	; 239
    3ad8:	1f 4f       	sbci	r17, 0xFF	; 255
    3ada:	ce 01       	movw	r24, r28
    3adc:	05 96       	adiw	r24, 0x05	; 5
    3ade:	b8 01       	movw	r22, r16
    3ae0:	0e 94 35 22 	call	0x446a	; 0x446a <__unpack_f>
    3ae4:	8a 89       	ldd	r24, Y+18	; 0x12
    3ae6:	91 e0       	ldi	r25, 0x01	; 1
    3ae8:	89 27       	eor	r24, r25
    3aea:	8a 8b       	std	Y+18, r24	; 0x12
    3aec:	c7 01       	movw	r24, r14
    3aee:	b8 01       	movw	r22, r16
    3af0:	ae 01       	movw	r20, r28
    3af2:	47 5e       	subi	r20, 0xE7	; 231
    3af4:	5f 4f       	sbci	r21, 0xFF	; 255
    3af6:	0e 94 06 1c 	call	0x380c	; 0x380c <_fpadd_parts>
    3afa:	0e 94 60 21 	call	0x42c0	; 0x42c0 <__pack_f>
    3afe:	a0 96       	adiw	r28, 0x20	; 32
    3b00:	e6 e0       	ldi	r30, 0x06	; 6
    3b02:	0c 94 42 23 	jmp	0x4684	; 0x4684 <__epilogue_restores__+0x18>

00003b06 <__addsf3>:
    3b06:	a0 e2       	ldi	r26, 0x20	; 32
    3b08:	b0 e0       	ldi	r27, 0x00	; 0
    3b0a:	e9 e8       	ldi	r30, 0x89	; 137
    3b0c:	fd e1       	ldi	r31, 0x1D	; 29
    3b0e:	0c 94 26 23 	jmp	0x464c	; 0x464c <__prologue_saves__+0x18>
    3b12:	69 83       	std	Y+1, r22	; 0x01
    3b14:	7a 83       	std	Y+2, r23	; 0x02
    3b16:	8b 83       	std	Y+3, r24	; 0x03
    3b18:	9c 83       	std	Y+4, r25	; 0x04
    3b1a:	2d 83       	std	Y+5, r18	; 0x05
    3b1c:	3e 83       	std	Y+6, r19	; 0x06
    3b1e:	4f 83       	std	Y+7, r20	; 0x07
    3b20:	58 87       	std	Y+8, r21	; 0x08
    3b22:	f9 e0       	ldi	r31, 0x09	; 9
    3b24:	ef 2e       	mov	r14, r31
    3b26:	f1 2c       	mov	r15, r1
    3b28:	ec 0e       	add	r14, r28
    3b2a:	fd 1e       	adc	r15, r29
    3b2c:	ce 01       	movw	r24, r28
    3b2e:	01 96       	adiw	r24, 0x01	; 1
    3b30:	b7 01       	movw	r22, r14
    3b32:	0e 94 35 22 	call	0x446a	; 0x446a <__unpack_f>
    3b36:	8e 01       	movw	r16, r28
    3b38:	0f 5e       	subi	r16, 0xEF	; 239
    3b3a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b3c:	ce 01       	movw	r24, r28
    3b3e:	05 96       	adiw	r24, 0x05	; 5
    3b40:	b8 01       	movw	r22, r16
    3b42:	0e 94 35 22 	call	0x446a	; 0x446a <__unpack_f>
    3b46:	c7 01       	movw	r24, r14
    3b48:	b8 01       	movw	r22, r16
    3b4a:	ae 01       	movw	r20, r28
    3b4c:	47 5e       	subi	r20, 0xE7	; 231
    3b4e:	5f 4f       	sbci	r21, 0xFF	; 255
    3b50:	0e 94 06 1c 	call	0x380c	; 0x380c <_fpadd_parts>
    3b54:	0e 94 60 21 	call	0x42c0	; 0x42c0 <__pack_f>
    3b58:	a0 96       	adiw	r28, 0x20	; 32
    3b5a:	e6 e0       	ldi	r30, 0x06	; 6
    3b5c:	0c 94 42 23 	jmp	0x4684	; 0x4684 <__epilogue_restores__+0x18>

00003b60 <__mulsf3>:
    3b60:	a0 e2       	ldi	r26, 0x20	; 32
    3b62:	b0 e0       	ldi	r27, 0x00	; 0
    3b64:	e6 eb       	ldi	r30, 0xB6	; 182
    3b66:	fd e1       	ldi	r31, 0x1D	; 29
    3b68:	0c 94 1a 23 	jmp	0x4634	; 0x4634 <__prologue_saves__>
    3b6c:	69 83       	std	Y+1, r22	; 0x01
    3b6e:	7a 83       	std	Y+2, r23	; 0x02
    3b70:	8b 83       	std	Y+3, r24	; 0x03
    3b72:	9c 83       	std	Y+4, r25	; 0x04
    3b74:	2d 83       	std	Y+5, r18	; 0x05
    3b76:	3e 83       	std	Y+6, r19	; 0x06
    3b78:	4f 83       	std	Y+7, r20	; 0x07
    3b7a:	58 87       	std	Y+8, r21	; 0x08
    3b7c:	ce 01       	movw	r24, r28
    3b7e:	01 96       	adiw	r24, 0x01	; 1
    3b80:	be 01       	movw	r22, r28
    3b82:	67 5f       	subi	r22, 0xF7	; 247
    3b84:	7f 4f       	sbci	r23, 0xFF	; 255
    3b86:	0e 94 35 22 	call	0x446a	; 0x446a <__unpack_f>
    3b8a:	ce 01       	movw	r24, r28
    3b8c:	05 96       	adiw	r24, 0x05	; 5
    3b8e:	be 01       	movw	r22, r28
    3b90:	6f 5e       	subi	r22, 0xEF	; 239
    3b92:	7f 4f       	sbci	r23, 0xFF	; 255
    3b94:	0e 94 35 22 	call	0x446a	; 0x446a <__unpack_f>
    3b98:	99 85       	ldd	r25, Y+9	; 0x09
    3b9a:	92 30       	cpi	r25, 0x02	; 2
    3b9c:	88 f0       	brcs	.+34     	; 0x3bc0 <__mulsf3+0x60>
    3b9e:	89 89       	ldd	r24, Y+17	; 0x11
    3ba0:	82 30       	cpi	r24, 0x02	; 2
    3ba2:	c8 f0       	brcs	.+50     	; 0x3bd6 <__mulsf3+0x76>
    3ba4:	94 30       	cpi	r25, 0x04	; 4
    3ba6:	19 f4       	brne	.+6      	; 0x3bae <__mulsf3+0x4e>
    3ba8:	82 30       	cpi	r24, 0x02	; 2
    3baa:	51 f4       	brne	.+20     	; 0x3bc0 <__mulsf3+0x60>
    3bac:	04 c0       	rjmp	.+8      	; 0x3bb6 <__mulsf3+0x56>
    3bae:	84 30       	cpi	r24, 0x04	; 4
    3bb0:	29 f4       	brne	.+10     	; 0x3bbc <__mulsf3+0x5c>
    3bb2:	92 30       	cpi	r25, 0x02	; 2
    3bb4:	81 f4       	brne	.+32     	; 0x3bd6 <__mulsf3+0x76>
    3bb6:	80 e0       	ldi	r24, 0x00	; 0
    3bb8:	92 e0       	ldi	r25, 0x02	; 2
    3bba:	c6 c0       	rjmp	.+396    	; 0x3d48 <__mulsf3+0x1e8>
    3bbc:	92 30       	cpi	r25, 0x02	; 2
    3bbe:	49 f4       	brne	.+18     	; 0x3bd2 <__mulsf3+0x72>
    3bc0:	20 e0       	ldi	r18, 0x00	; 0
    3bc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bc4:	8a 89       	ldd	r24, Y+18	; 0x12
    3bc6:	98 13       	cpse	r25, r24
    3bc8:	21 e0       	ldi	r18, 0x01	; 1
    3bca:	2a 87       	std	Y+10, r18	; 0x0a
    3bcc:	ce 01       	movw	r24, r28
    3bce:	09 96       	adiw	r24, 0x09	; 9
    3bd0:	bb c0       	rjmp	.+374    	; 0x3d48 <__mulsf3+0x1e8>
    3bd2:	82 30       	cpi	r24, 0x02	; 2
    3bd4:	49 f4       	brne	.+18     	; 0x3be8 <__mulsf3+0x88>
    3bd6:	20 e0       	ldi	r18, 0x00	; 0
    3bd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bda:	8a 89       	ldd	r24, Y+18	; 0x12
    3bdc:	98 13       	cpse	r25, r24
    3bde:	21 e0       	ldi	r18, 0x01	; 1
    3be0:	2a 8b       	std	Y+18, r18	; 0x12
    3be2:	ce 01       	movw	r24, r28
    3be4:	41 96       	adiw	r24, 0x11	; 17
    3be6:	b0 c0       	rjmp	.+352    	; 0x3d48 <__mulsf3+0x1e8>
    3be8:	2d 84       	ldd	r2, Y+13	; 0x0d
    3bea:	3e 84       	ldd	r3, Y+14	; 0x0e
    3bec:	4f 84       	ldd	r4, Y+15	; 0x0f
    3bee:	58 88       	ldd	r5, Y+16	; 0x10
    3bf0:	6d 88       	ldd	r6, Y+21	; 0x15
    3bf2:	7e 88       	ldd	r7, Y+22	; 0x16
    3bf4:	8f 88       	ldd	r8, Y+23	; 0x17
    3bf6:	98 8c       	ldd	r9, Y+24	; 0x18
    3bf8:	ee 24       	eor	r14, r14
    3bfa:	ff 24       	eor	r15, r15
    3bfc:	87 01       	movw	r16, r14
    3bfe:	aa 24       	eor	r10, r10
    3c00:	bb 24       	eor	r11, r11
    3c02:	65 01       	movw	r12, r10
    3c04:	40 e0       	ldi	r20, 0x00	; 0
    3c06:	50 e0       	ldi	r21, 0x00	; 0
    3c08:	60 e0       	ldi	r22, 0x00	; 0
    3c0a:	70 e0       	ldi	r23, 0x00	; 0
    3c0c:	e0 e0       	ldi	r30, 0x00	; 0
    3c0e:	f0 e0       	ldi	r31, 0x00	; 0
    3c10:	c1 01       	movw	r24, r2
    3c12:	81 70       	andi	r24, 0x01	; 1
    3c14:	90 70       	andi	r25, 0x00	; 0
    3c16:	89 2b       	or	r24, r25
    3c18:	e9 f0       	breq	.+58     	; 0x3c54 <__mulsf3+0xf4>
    3c1a:	e6 0c       	add	r14, r6
    3c1c:	f7 1c       	adc	r15, r7
    3c1e:	08 1d       	adc	r16, r8
    3c20:	19 1d       	adc	r17, r9
    3c22:	9a 01       	movw	r18, r20
    3c24:	ab 01       	movw	r20, r22
    3c26:	2a 0d       	add	r18, r10
    3c28:	3b 1d       	adc	r19, r11
    3c2a:	4c 1d       	adc	r20, r12
    3c2c:	5d 1d       	adc	r21, r13
    3c2e:	80 e0       	ldi	r24, 0x00	; 0
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	a0 e0       	ldi	r26, 0x00	; 0
    3c34:	b0 e0       	ldi	r27, 0x00	; 0
    3c36:	e6 14       	cp	r14, r6
    3c38:	f7 04       	cpc	r15, r7
    3c3a:	08 05       	cpc	r16, r8
    3c3c:	19 05       	cpc	r17, r9
    3c3e:	20 f4       	brcc	.+8      	; 0x3c48 <__mulsf3+0xe8>
    3c40:	81 e0       	ldi	r24, 0x01	; 1
    3c42:	90 e0       	ldi	r25, 0x00	; 0
    3c44:	a0 e0       	ldi	r26, 0x00	; 0
    3c46:	b0 e0       	ldi	r27, 0x00	; 0
    3c48:	ba 01       	movw	r22, r20
    3c4a:	a9 01       	movw	r20, r18
    3c4c:	48 0f       	add	r20, r24
    3c4e:	59 1f       	adc	r21, r25
    3c50:	6a 1f       	adc	r22, r26
    3c52:	7b 1f       	adc	r23, r27
    3c54:	aa 0c       	add	r10, r10
    3c56:	bb 1c       	adc	r11, r11
    3c58:	cc 1c       	adc	r12, r12
    3c5a:	dd 1c       	adc	r13, r13
    3c5c:	97 fe       	sbrs	r9, 7
    3c5e:	08 c0       	rjmp	.+16     	; 0x3c70 <__mulsf3+0x110>
    3c60:	81 e0       	ldi	r24, 0x01	; 1
    3c62:	90 e0       	ldi	r25, 0x00	; 0
    3c64:	a0 e0       	ldi	r26, 0x00	; 0
    3c66:	b0 e0       	ldi	r27, 0x00	; 0
    3c68:	a8 2a       	or	r10, r24
    3c6a:	b9 2a       	or	r11, r25
    3c6c:	ca 2a       	or	r12, r26
    3c6e:	db 2a       	or	r13, r27
    3c70:	31 96       	adiw	r30, 0x01	; 1
    3c72:	e0 32       	cpi	r30, 0x20	; 32
    3c74:	f1 05       	cpc	r31, r1
    3c76:	49 f0       	breq	.+18     	; 0x3c8a <__mulsf3+0x12a>
    3c78:	66 0c       	add	r6, r6
    3c7a:	77 1c       	adc	r7, r7
    3c7c:	88 1c       	adc	r8, r8
    3c7e:	99 1c       	adc	r9, r9
    3c80:	56 94       	lsr	r5
    3c82:	47 94       	ror	r4
    3c84:	37 94       	ror	r3
    3c86:	27 94       	ror	r2
    3c88:	c3 cf       	rjmp	.-122    	; 0x3c10 <__mulsf3+0xb0>
    3c8a:	fa 85       	ldd	r31, Y+10	; 0x0a
    3c8c:	ea 89       	ldd	r30, Y+18	; 0x12
    3c8e:	2b 89       	ldd	r18, Y+19	; 0x13
    3c90:	3c 89       	ldd	r19, Y+20	; 0x14
    3c92:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c94:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c96:	28 0f       	add	r18, r24
    3c98:	39 1f       	adc	r19, r25
    3c9a:	2e 5f       	subi	r18, 0xFE	; 254
    3c9c:	3f 4f       	sbci	r19, 0xFF	; 255
    3c9e:	17 c0       	rjmp	.+46     	; 0x3cce <__mulsf3+0x16e>
    3ca0:	ca 01       	movw	r24, r20
    3ca2:	81 70       	andi	r24, 0x01	; 1
    3ca4:	90 70       	andi	r25, 0x00	; 0
    3ca6:	89 2b       	or	r24, r25
    3ca8:	61 f0       	breq	.+24     	; 0x3cc2 <__mulsf3+0x162>
    3caa:	16 95       	lsr	r17
    3cac:	07 95       	ror	r16
    3cae:	f7 94       	ror	r15
    3cb0:	e7 94       	ror	r14
    3cb2:	80 e0       	ldi	r24, 0x00	; 0
    3cb4:	90 e0       	ldi	r25, 0x00	; 0
    3cb6:	a0 e0       	ldi	r26, 0x00	; 0
    3cb8:	b0 e8       	ldi	r27, 0x80	; 128
    3cba:	e8 2a       	or	r14, r24
    3cbc:	f9 2a       	or	r15, r25
    3cbe:	0a 2b       	or	r16, r26
    3cc0:	1b 2b       	or	r17, r27
    3cc2:	76 95       	lsr	r23
    3cc4:	67 95       	ror	r22
    3cc6:	57 95       	ror	r21
    3cc8:	47 95       	ror	r20
    3cca:	2f 5f       	subi	r18, 0xFF	; 255
    3ccc:	3f 4f       	sbci	r19, 0xFF	; 255
    3cce:	77 fd       	sbrc	r23, 7
    3cd0:	e7 cf       	rjmp	.-50     	; 0x3ca0 <__mulsf3+0x140>
    3cd2:	0c c0       	rjmp	.+24     	; 0x3cec <__mulsf3+0x18c>
    3cd4:	44 0f       	add	r20, r20
    3cd6:	55 1f       	adc	r21, r21
    3cd8:	66 1f       	adc	r22, r22
    3cda:	77 1f       	adc	r23, r23
    3cdc:	17 fd       	sbrc	r17, 7
    3cde:	41 60       	ori	r20, 0x01	; 1
    3ce0:	ee 0c       	add	r14, r14
    3ce2:	ff 1c       	adc	r15, r15
    3ce4:	00 1f       	adc	r16, r16
    3ce6:	11 1f       	adc	r17, r17
    3ce8:	21 50       	subi	r18, 0x01	; 1
    3cea:	30 40       	sbci	r19, 0x00	; 0
    3cec:	40 30       	cpi	r20, 0x00	; 0
    3cee:	90 e0       	ldi	r25, 0x00	; 0
    3cf0:	59 07       	cpc	r21, r25
    3cf2:	90 e0       	ldi	r25, 0x00	; 0
    3cf4:	69 07       	cpc	r22, r25
    3cf6:	90 e4       	ldi	r25, 0x40	; 64
    3cf8:	79 07       	cpc	r23, r25
    3cfa:	60 f3       	brcs	.-40     	; 0x3cd4 <__mulsf3+0x174>
    3cfc:	2b 8f       	std	Y+27, r18	; 0x1b
    3cfe:	3c 8f       	std	Y+28, r19	; 0x1c
    3d00:	db 01       	movw	r26, r22
    3d02:	ca 01       	movw	r24, r20
    3d04:	8f 77       	andi	r24, 0x7F	; 127
    3d06:	90 70       	andi	r25, 0x00	; 0
    3d08:	a0 70       	andi	r26, 0x00	; 0
    3d0a:	b0 70       	andi	r27, 0x00	; 0
    3d0c:	80 34       	cpi	r24, 0x40	; 64
    3d0e:	91 05       	cpc	r25, r1
    3d10:	a1 05       	cpc	r26, r1
    3d12:	b1 05       	cpc	r27, r1
    3d14:	61 f4       	brne	.+24     	; 0x3d2e <__mulsf3+0x1ce>
    3d16:	47 fd       	sbrc	r20, 7
    3d18:	0a c0       	rjmp	.+20     	; 0x3d2e <__mulsf3+0x1ce>
    3d1a:	e1 14       	cp	r14, r1
    3d1c:	f1 04       	cpc	r15, r1
    3d1e:	01 05       	cpc	r16, r1
    3d20:	11 05       	cpc	r17, r1
    3d22:	29 f0       	breq	.+10     	; 0x3d2e <__mulsf3+0x1ce>
    3d24:	40 5c       	subi	r20, 0xC0	; 192
    3d26:	5f 4f       	sbci	r21, 0xFF	; 255
    3d28:	6f 4f       	sbci	r22, 0xFF	; 255
    3d2a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d2c:	40 78       	andi	r20, 0x80	; 128
    3d2e:	1a 8e       	std	Y+26, r1	; 0x1a
    3d30:	fe 17       	cp	r31, r30
    3d32:	11 f0       	breq	.+4      	; 0x3d38 <__mulsf3+0x1d8>
    3d34:	81 e0       	ldi	r24, 0x01	; 1
    3d36:	8a 8f       	std	Y+26, r24	; 0x1a
    3d38:	4d 8f       	std	Y+29, r20	; 0x1d
    3d3a:	5e 8f       	std	Y+30, r21	; 0x1e
    3d3c:	6f 8f       	std	Y+31, r22	; 0x1f
    3d3e:	78 a3       	std	Y+32, r23	; 0x20
    3d40:	83 e0       	ldi	r24, 0x03	; 3
    3d42:	89 8f       	std	Y+25, r24	; 0x19
    3d44:	ce 01       	movw	r24, r28
    3d46:	49 96       	adiw	r24, 0x19	; 25
    3d48:	0e 94 60 21 	call	0x42c0	; 0x42c0 <__pack_f>
    3d4c:	a0 96       	adiw	r28, 0x20	; 32
    3d4e:	e2 e1       	ldi	r30, 0x12	; 18
    3d50:	0c 94 36 23 	jmp	0x466c	; 0x466c <__epilogue_restores__>

00003d54 <__divsf3>:
    3d54:	a8 e1       	ldi	r26, 0x18	; 24
    3d56:	b0 e0       	ldi	r27, 0x00	; 0
    3d58:	e0 eb       	ldi	r30, 0xB0	; 176
    3d5a:	fe e1       	ldi	r31, 0x1E	; 30
    3d5c:	0c 94 22 23 	jmp	0x4644	; 0x4644 <__prologue_saves__+0x10>
    3d60:	69 83       	std	Y+1, r22	; 0x01
    3d62:	7a 83       	std	Y+2, r23	; 0x02
    3d64:	8b 83       	std	Y+3, r24	; 0x03
    3d66:	9c 83       	std	Y+4, r25	; 0x04
    3d68:	2d 83       	std	Y+5, r18	; 0x05
    3d6a:	3e 83       	std	Y+6, r19	; 0x06
    3d6c:	4f 83       	std	Y+7, r20	; 0x07
    3d6e:	58 87       	std	Y+8, r21	; 0x08
    3d70:	b9 e0       	ldi	r27, 0x09	; 9
    3d72:	eb 2e       	mov	r14, r27
    3d74:	f1 2c       	mov	r15, r1
    3d76:	ec 0e       	add	r14, r28
    3d78:	fd 1e       	adc	r15, r29
    3d7a:	ce 01       	movw	r24, r28
    3d7c:	01 96       	adiw	r24, 0x01	; 1
    3d7e:	b7 01       	movw	r22, r14
    3d80:	0e 94 35 22 	call	0x446a	; 0x446a <__unpack_f>
    3d84:	8e 01       	movw	r16, r28
    3d86:	0f 5e       	subi	r16, 0xEF	; 239
    3d88:	1f 4f       	sbci	r17, 0xFF	; 255
    3d8a:	ce 01       	movw	r24, r28
    3d8c:	05 96       	adiw	r24, 0x05	; 5
    3d8e:	b8 01       	movw	r22, r16
    3d90:	0e 94 35 22 	call	0x446a	; 0x446a <__unpack_f>
    3d94:	29 85       	ldd	r18, Y+9	; 0x09
    3d96:	22 30       	cpi	r18, 0x02	; 2
    3d98:	08 f4       	brcc	.+2      	; 0x3d9c <__divsf3+0x48>
    3d9a:	7e c0       	rjmp	.+252    	; 0x3e98 <__divsf3+0x144>
    3d9c:	39 89       	ldd	r19, Y+17	; 0x11
    3d9e:	32 30       	cpi	r19, 0x02	; 2
    3da0:	10 f4       	brcc	.+4      	; 0x3da6 <__divsf3+0x52>
    3da2:	b8 01       	movw	r22, r16
    3da4:	7c c0       	rjmp	.+248    	; 0x3e9e <__divsf3+0x14a>
    3da6:	8a 85       	ldd	r24, Y+10	; 0x0a
    3da8:	9a 89       	ldd	r25, Y+18	; 0x12
    3daa:	89 27       	eor	r24, r25
    3dac:	8a 87       	std	Y+10, r24	; 0x0a
    3dae:	24 30       	cpi	r18, 0x04	; 4
    3db0:	11 f0       	breq	.+4      	; 0x3db6 <__divsf3+0x62>
    3db2:	22 30       	cpi	r18, 0x02	; 2
    3db4:	31 f4       	brne	.+12     	; 0x3dc2 <__divsf3+0x6e>
    3db6:	23 17       	cp	r18, r19
    3db8:	09 f0       	breq	.+2      	; 0x3dbc <__divsf3+0x68>
    3dba:	6e c0       	rjmp	.+220    	; 0x3e98 <__divsf3+0x144>
    3dbc:	60 e0       	ldi	r22, 0x00	; 0
    3dbe:	72 e0       	ldi	r23, 0x02	; 2
    3dc0:	6e c0       	rjmp	.+220    	; 0x3e9e <__divsf3+0x14a>
    3dc2:	34 30       	cpi	r19, 0x04	; 4
    3dc4:	39 f4       	brne	.+14     	; 0x3dd4 <__divsf3+0x80>
    3dc6:	1d 86       	std	Y+13, r1	; 0x0d
    3dc8:	1e 86       	std	Y+14, r1	; 0x0e
    3dca:	1f 86       	std	Y+15, r1	; 0x0f
    3dcc:	18 8a       	std	Y+16, r1	; 0x10
    3dce:	1c 86       	std	Y+12, r1	; 0x0c
    3dd0:	1b 86       	std	Y+11, r1	; 0x0b
    3dd2:	04 c0       	rjmp	.+8      	; 0x3ddc <__divsf3+0x88>
    3dd4:	32 30       	cpi	r19, 0x02	; 2
    3dd6:	21 f4       	brne	.+8      	; 0x3de0 <__divsf3+0x8c>
    3dd8:	84 e0       	ldi	r24, 0x04	; 4
    3dda:	89 87       	std	Y+9, r24	; 0x09
    3ddc:	b7 01       	movw	r22, r14
    3dde:	5f c0       	rjmp	.+190    	; 0x3e9e <__divsf3+0x14a>
    3de0:	2b 85       	ldd	r18, Y+11	; 0x0b
    3de2:	3c 85       	ldd	r19, Y+12	; 0x0c
    3de4:	8b 89       	ldd	r24, Y+19	; 0x13
    3de6:	9c 89       	ldd	r25, Y+20	; 0x14
    3de8:	28 1b       	sub	r18, r24
    3dea:	39 0b       	sbc	r19, r25
    3dec:	3c 87       	std	Y+12, r19	; 0x0c
    3dee:	2b 87       	std	Y+11, r18	; 0x0b
    3df0:	ed 84       	ldd	r14, Y+13	; 0x0d
    3df2:	fe 84       	ldd	r15, Y+14	; 0x0e
    3df4:	0f 85       	ldd	r16, Y+15	; 0x0f
    3df6:	18 89       	ldd	r17, Y+16	; 0x10
    3df8:	ad 88       	ldd	r10, Y+21	; 0x15
    3dfa:	be 88       	ldd	r11, Y+22	; 0x16
    3dfc:	cf 88       	ldd	r12, Y+23	; 0x17
    3dfe:	d8 8c       	ldd	r13, Y+24	; 0x18
    3e00:	ea 14       	cp	r14, r10
    3e02:	fb 04       	cpc	r15, r11
    3e04:	0c 05       	cpc	r16, r12
    3e06:	1d 05       	cpc	r17, r13
    3e08:	40 f4       	brcc	.+16     	; 0x3e1a <__divsf3+0xc6>
    3e0a:	ee 0c       	add	r14, r14
    3e0c:	ff 1c       	adc	r15, r15
    3e0e:	00 1f       	adc	r16, r16
    3e10:	11 1f       	adc	r17, r17
    3e12:	21 50       	subi	r18, 0x01	; 1
    3e14:	30 40       	sbci	r19, 0x00	; 0
    3e16:	3c 87       	std	Y+12, r19	; 0x0c
    3e18:	2b 87       	std	Y+11, r18	; 0x0b
    3e1a:	20 e0       	ldi	r18, 0x00	; 0
    3e1c:	30 e0       	ldi	r19, 0x00	; 0
    3e1e:	40 e0       	ldi	r20, 0x00	; 0
    3e20:	50 e0       	ldi	r21, 0x00	; 0
    3e22:	80 e0       	ldi	r24, 0x00	; 0
    3e24:	90 e0       	ldi	r25, 0x00	; 0
    3e26:	a0 e0       	ldi	r26, 0x00	; 0
    3e28:	b0 e4       	ldi	r27, 0x40	; 64
    3e2a:	60 e0       	ldi	r22, 0x00	; 0
    3e2c:	70 e0       	ldi	r23, 0x00	; 0
    3e2e:	ea 14       	cp	r14, r10
    3e30:	fb 04       	cpc	r15, r11
    3e32:	0c 05       	cpc	r16, r12
    3e34:	1d 05       	cpc	r17, r13
    3e36:	40 f0       	brcs	.+16     	; 0x3e48 <__divsf3+0xf4>
    3e38:	28 2b       	or	r18, r24
    3e3a:	39 2b       	or	r19, r25
    3e3c:	4a 2b       	or	r20, r26
    3e3e:	5b 2b       	or	r21, r27
    3e40:	ea 18       	sub	r14, r10
    3e42:	fb 08       	sbc	r15, r11
    3e44:	0c 09       	sbc	r16, r12
    3e46:	1d 09       	sbc	r17, r13
    3e48:	b6 95       	lsr	r27
    3e4a:	a7 95       	ror	r26
    3e4c:	97 95       	ror	r25
    3e4e:	87 95       	ror	r24
    3e50:	ee 0c       	add	r14, r14
    3e52:	ff 1c       	adc	r15, r15
    3e54:	00 1f       	adc	r16, r16
    3e56:	11 1f       	adc	r17, r17
    3e58:	6f 5f       	subi	r22, 0xFF	; 255
    3e5a:	7f 4f       	sbci	r23, 0xFF	; 255
    3e5c:	6f 31       	cpi	r22, 0x1F	; 31
    3e5e:	71 05       	cpc	r23, r1
    3e60:	31 f7       	brne	.-52     	; 0x3e2e <__divsf3+0xda>
    3e62:	da 01       	movw	r26, r20
    3e64:	c9 01       	movw	r24, r18
    3e66:	8f 77       	andi	r24, 0x7F	; 127
    3e68:	90 70       	andi	r25, 0x00	; 0
    3e6a:	a0 70       	andi	r26, 0x00	; 0
    3e6c:	b0 70       	andi	r27, 0x00	; 0
    3e6e:	80 34       	cpi	r24, 0x40	; 64
    3e70:	91 05       	cpc	r25, r1
    3e72:	a1 05       	cpc	r26, r1
    3e74:	b1 05       	cpc	r27, r1
    3e76:	61 f4       	brne	.+24     	; 0x3e90 <__divsf3+0x13c>
    3e78:	27 fd       	sbrc	r18, 7
    3e7a:	0a c0       	rjmp	.+20     	; 0x3e90 <__divsf3+0x13c>
    3e7c:	e1 14       	cp	r14, r1
    3e7e:	f1 04       	cpc	r15, r1
    3e80:	01 05       	cpc	r16, r1
    3e82:	11 05       	cpc	r17, r1
    3e84:	29 f0       	breq	.+10     	; 0x3e90 <__divsf3+0x13c>
    3e86:	20 5c       	subi	r18, 0xC0	; 192
    3e88:	3f 4f       	sbci	r19, 0xFF	; 255
    3e8a:	4f 4f       	sbci	r20, 0xFF	; 255
    3e8c:	5f 4f       	sbci	r21, 0xFF	; 255
    3e8e:	20 78       	andi	r18, 0x80	; 128
    3e90:	2d 87       	std	Y+13, r18	; 0x0d
    3e92:	3e 87       	std	Y+14, r19	; 0x0e
    3e94:	4f 87       	std	Y+15, r20	; 0x0f
    3e96:	58 8b       	std	Y+16, r21	; 0x10
    3e98:	be 01       	movw	r22, r28
    3e9a:	67 5f       	subi	r22, 0xF7	; 247
    3e9c:	7f 4f       	sbci	r23, 0xFF	; 255
    3e9e:	cb 01       	movw	r24, r22
    3ea0:	0e 94 60 21 	call	0x42c0	; 0x42c0 <__pack_f>
    3ea4:	68 96       	adiw	r28, 0x18	; 24
    3ea6:	ea e0       	ldi	r30, 0x0A	; 10
    3ea8:	0c 94 3e 23 	jmp	0x467c	; 0x467c <__epilogue_restores__+0x10>

00003eac <__gtsf2>:
    3eac:	a8 e1       	ldi	r26, 0x18	; 24
    3eae:	b0 e0       	ldi	r27, 0x00	; 0
    3eb0:	ec e5       	ldi	r30, 0x5C	; 92
    3eb2:	ff e1       	ldi	r31, 0x1F	; 31
    3eb4:	0c 94 26 23 	jmp	0x464c	; 0x464c <__prologue_saves__+0x18>
    3eb8:	69 83       	std	Y+1, r22	; 0x01
    3eba:	7a 83       	std	Y+2, r23	; 0x02
    3ebc:	8b 83       	std	Y+3, r24	; 0x03
    3ebe:	9c 83       	std	Y+4, r25	; 0x04
    3ec0:	2d 83       	std	Y+5, r18	; 0x05
    3ec2:	3e 83       	std	Y+6, r19	; 0x06
    3ec4:	4f 83       	std	Y+7, r20	; 0x07
    3ec6:	58 87       	std	Y+8, r21	; 0x08
    3ec8:	89 e0       	ldi	r24, 0x09	; 9
    3eca:	e8 2e       	mov	r14, r24
    3ecc:	f1 2c       	mov	r15, r1
    3ece:	ec 0e       	add	r14, r28
    3ed0:	fd 1e       	adc	r15, r29
    3ed2:	ce 01       	movw	r24, r28
    3ed4:	01 96       	adiw	r24, 0x01	; 1
    3ed6:	b7 01       	movw	r22, r14
    3ed8:	0e 94 35 22 	call	0x446a	; 0x446a <__unpack_f>
    3edc:	8e 01       	movw	r16, r28
    3ede:	0f 5e       	subi	r16, 0xEF	; 239
    3ee0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ee2:	ce 01       	movw	r24, r28
    3ee4:	05 96       	adiw	r24, 0x05	; 5
    3ee6:	b8 01       	movw	r22, r16
    3ee8:	0e 94 35 22 	call	0x446a	; 0x446a <__unpack_f>
    3eec:	89 85       	ldd	r24, Y+9	; 0x09
    3eee:	82 30       	cpi	r24, 0x02	; 2
    3ef0:	40 f0       	brcs	.+16     	; 0x3f02 <__gtsf2+0x56>
    3ef2:	89 89       	ldd	r24, Y+17	; 0x11
    3ef4:	82 30       	cpi	r24, 0x02	; 2
    3ef6:	28 f0       	brcs	.+10     	; 0x3f02 <__gtsf2+0x56>
    3ef8:	c7 01       	movw	r24, r14
    3efa:	b8 01       	movw	r22, r16
    3efc:	0e 94 ad 22 	call	0x455a	; 0x455a <__fpcmp_parts_f>
    3f00:	01 c0       	rjmp	.+2      	; 0x3f04 <__gtsf2+0x58>
    3f02:	8f ef       	ldi	r24, 0xFF	; 255
    3f04:	68 96       	adiw	r28, 0x18	; 24
    3f06:	e6 e0       	ldi	r30, 0x06	; 6
    3f08:	0c 94 42 23 	jmp	0x4684	; 0x4684 <__epilogue_restores__+0x18>

00003f0c <__gesf2>:
    3f0c:	a8 e1       	ldi	r26, 0x18	; 24
    3f0e:	b0 e0       	ldi	r27, 0x00	; 0
    3f10:	ec e8       	ldi	r30, 0x8C	; 140
    3f12:	ff e1       	ldi	r31, 0x1F	; 31
    3f14:	0c 94 26 23 	jmp	0x464c	; 0x464c <__prologue_saves__+0x18>
    3f18:	69 83       	std	Y+1, r22	; 0x01
    3f1a:	7a 83       	std	Y+2, r23	; 0x02
    3f1c:	8b 83       	std	Y+3, r24	; 0x03
    3f1e:	9c 83       	std	Y+4, r25	; 0x04
    3f20:	2d 83       	std	Y+5, r18	; 0x05
    3f22:	3e 83       	std	Y+6, r19	; 0x06
    3f24:	4f 83       	std	Y+7, r20	; 0x07
    3f26:	58 87       	std	Y+8, r21	; 0x08
    3f28:	89 e0       	ldi	r24, 0x09	; 9
    3f2a:	e8 2e       	mov	r14, r24
    3f2c:	f1 2c       	mov	r15, r1
    3f2e:	ec 0e       	add	r14, r28
    3f30:	fd 1e       	adc	r15, r29
    3f32:	ce 01       	movw	r24, r28
    3f34:	01 96       	adiw	r24, 0x01	; 1
    3f36:	b7 01       	movw	r22, r14
    3f38:	0e 94 35 22 	call	0x446a	; 0x446a <__unpack_f>
    3f3c:	8e 01       	movw	r16, r28
    3f3e:	0f 5e       	subi	r16, 0xEF	; 239
    3f40:	1f 4f       	sbci	r17, 0xFF	; 255
    3f42:	ce 01       	movw	r24, r28
    3f44:	05 96       	adiw	r24, 0x05	; 5
    3f46:	b8 01       	movw	r22, r16
    3f48:	0e 94 35 22 	call	0x446a	; 0x446a <__unpack_f>
    3f4c:	89 85       	ldd	r24, Y+9	; 0x09
    3f4e:	82 30       	cpi	r24, 0x02	; 2
    3f50:	40 f0       	brcs	.+16     	; 0x3f62 <__gesf2+0x56>
    3f52:	89 89       	ldd	r24, Y+17	; 0x11
    3f54:	82 30       	cpi	r24, 0x02	; 2
    3f56:	28 f0       	brcs	.+10     	; 0x3f62 <__gesf2+0x56>
    3f58:	c7 01       	movw	r24, r14
    3f5a:	b8 01       	movw	r22, r16
    3f5c:	0e 94 ad 22 	call	0x455a	; 0x455a <__fpcmp_parts_f>
    3f60:	01 c0       	rjmp	.+2      	; 0x3f64 <__gesf2+0x58>
    3f62:	8f ef       	ldi	r24, 0xFF	; 255
    3f64:	68 96       	adiw	r28, 0x18	; 24
    3f66:	e6 e0       	ldi	r30, 0x06	; 6
    3f68:	0c 94 42 23 	jmp	0x4684	; 0x4684 <__epilogue_restores__+0x18>

00003f6c <__ltsf2>:
    3f6c:	a8 e1       	ldi	r26, 0x18	; 24
    3f6e:	b0 e0       	ldi	r27, 0x00	; 0
    3f70:	ec eb       	ldi	r30, 0xBC	; 188
    3f72:	ff e1       	ldi	r31, 0x1F	; 31
    3f74:	0c 94 26 23 	jmp	0x464c	; 0x464c <__prologue_saves__+0x18>
    3f78:	69 83       	std	Y+1, r22	; 0x01
    3f7a:	7a 83       	std	Y+2, r23	; 0x02
    3f7c:	8b 83       	std	Y+3, r24	; 0x03
    3f7e:	9c 83       	std	Y+4, r25	; 0x04
    3f80:	2d 83       	std	Y+5, r18	; 0x05
    3f82:	3e 83       	std	Y+6, r19	; 0x06
    3f84:	4f 83       	std	Y+7, r20	; 0x07
    3f86:	58 87       	std	Y+8, r21	; 0x08
    3f88:	89 e0       	ldi	r24, 0x09	; 9
    3f8a:	e8 2e       	mov	r14, r24
    3f8c:	f1 2c       	mov	r15, r1
    3f8e:	ec 0e       	add	r14, r28
    3f90:	fd 1e       	adc	r15, r29
    3f92:	ce 01       	movw	r24, r28
    3f94:	01 96       	adiw	r24, 0x01	; 1
    3f96:	b7 01       	movw	r22, r14
    3f98:	0e 94 35 22 	call	0x446a	; 0x446a <__unpack_f>
    3f9c:	8e 01       	movw	r16, r28
    3f9e:	0f 5e       	subi	r16, 0xEF	; 239
    3fa0:	1f 4f       	sbci	r17, 0xFF	; 255
    3fa2:	ce 01       	movw	r24, r28
    3fa4:	05 96       	adiw	r24, 0x05	; 5
    3fa6:	b8 01       	movw	r22, r16
    3fa8:	0e 94 35 22 	call	0x446a	; 0x446a <__unpack_f>
    3fac:	89 85       	ldd	r24, Y+9	; 0x09
    3fae:	82 30       	cpi	r24, 0x02	; 2
    3fb0:	40 f0       	brcs	.+16     	; 0x3fc2 <__ltsf2+0x56>
    3fb2:	89 89       	ldd	r24, Y+17	; 0x11
    3fb4:	82 30       	cpi	r24, 0x02	; 2
    3fb6:	28 f0       	brcs	.+10     	; 0x3fc2 <__ltsf2+0x56>
    3fb8:	c7 01       	movw	r24, r14
    3fba:	b8 01       	movw	r22, r16
    3fbc:	0e 94 ad 22 	call	0x455a	; 0x455a <__fpcmp_parts_f>
    3fc0:	01 c0       	rjmp	.+2      	; 0x3fc4 <__ltsf2+0x58>
    3fc2:	81 e0       	ldi	r24, 0x01	; 1
    3fc4:	68 96       	adiw	r28, 0x18	; 24
    3fc6:	e6 e0       	ldi	r30, 0x06	; 6
    3fc8:	0c 94 42 23 	jmp	0x4684	; 0x4684 <__epilogue_restores__+0x18>

00003fcc <__floatsisf>:
    3fcc:	a8 e0       	ldi	r26, 0x08	; 8
    3fce:	b0 e0       	ldi	r27, 0x00	; 0
    3fd0:	ec ee       	ldi	r30, 0xEC	; 236
    3fd2:	ff e1       	ldi	r31, 0x1F	; 31
    3fd4:	0c 94 23 23 	jmp	0x4646	; 0x4646 <__prologue_saves__+0x12>
    3fd8:	9b 01       	movw	r18, r22
    3fda:	ac 01       	movw	r20, r24
    3fdc:	83 e0       	ldi	r24, 0x03	; 3
    3fde:	89 83       	std	Y+1, r24	; 0x01
    3fe0:	da 01       	movw	r26, r20
    3fe2:	c9 01       	movw	r24, r18
    3fe4:	88 27       	eor	r24, r24
    3fe6:	b7 fd       	sbrc	r27, 7
    3fe8:	83 95       	inc	r24
    3fea:	99 27       	eor	r25, r25
    3fec:	aa 27       	eor	r26, r26
    3fee:	bb 27       	eor	r27, r27
    3ff0:	b8 2e       	mov	r11, r24
    3ff2:	21 15       	cp	r18, r1
    3ff4:	31 05       	cpc	r19, r1
    3ff6:	41 05       	cpc	r20, r1
    3ff8:	51 05       	cpc	r21, r1
    3ffa:	19 f4       	brne	.+6      	; 0x4002 <__floatsisf+0x36>
    3ffc:	82 e0       	ldi	r24, 0x02	; 2
    3ffe:	89 83       	std	Y+1, r24	; 0x01
    4000:	3a c0       	rjmp	.+116    	; 0x4076 <__floatsisf+0xaa>
    4002:	88 23       	and	r24, r24
    4004:	a9 f0       	breq	.+42     	; 0x4030 <__floatsisf+0x64>
    4006:	20 30       	cpi	r18, 0x00	; 0
    4008:	80 e0       	ldi	r24, 0x00	; 0
    400a:	38 07       	cpc	r19, r24
    400c:	80 e0       	ldi	r24, 0x00	; 0
    400e:	48 07       	cpc	r20, r24
    4010:	80 e8       	ldi	r24, 0x80	; 128
    4012:	58 07       	cpc	r21, r24
    4014:	29 f4       	brne	.+10     	; 0x4020 <__floatsisf+0x54>
    4016:	60 e0       	ldi	r22, 0x00	; 0
    4018:	70 e0       	ldi	r23, 0x00	; 0
    401a:	80 e0       	ldi	r24, 0x00	; 0
    401c:	9f ec       	ldi	r25, 0xCF	; 207
    401e:	30 c0       	rjmp	.+96     	; 0x4080 <__floatsisf+0xb4>
    4020:	ee 24       	eor	r14, r14
    4022:	ff 24       	eor	r15, r15
    4024:	87 01       	movw	r16, r14
    4026:	e2 1a       	sub	r14, r18
    4028:	f3 0a       	sbc	r15, r19
    402a:	04 0b       	sbc	r16, r20
    402c:	15 0b       	sbc	r17, r21
    402e:	02 c0       	rjmp	.+4      	; 0x4034 <__floatsisf+0x68>
    4030:	79 01       	movw	r14, r18
    4032:	8a 01       	movw	r16, r20
    4034:	8e e1       	ldi	r24, 0x1E	; 30
    4036:	c8 2e       	mov	r12, r24
    4038:	d1 2c       	mov	r13, r1
    403a:	dc 82       	std	Y+4, r13	; 0x04
    403c:	cb 82       	std	Y+3, r12	; 0x03
    403e:	ed 82       	std	Y+5, r14	; 0x05
    4040:	fe 82       	std	Y+6, r15	; 0x06
    4042:	0f 83       	std	Y+7, r16	; 0x07
    4044:	18 87       	std	Y+8, r17	; 0x08
    4046:	c8 01       	movw	r24, r16
    4048:	b7 01       	movw	r22, r14
    404a:	0e 94 11 21 	call	0x4222	; 0x4222 <__clzsi2>
    404e:	01 97       	sbiw	r24, 0x01	; 1
    4050:	18 16       	cp	r1, r24
    4052:	19 06       	cpc	r1, r25
    4054:	84 f4       	brge	.+32     	; 0x4076 <__floatsisf+0xaa>
    4056:	08 2e       	mov	r0, r24
    4058:	04 c0       	rjmp	.+8      	; 0x4062 <__floatsisf+0x96>
    405a:	ee 0c       	add	r14, r14
    405c:	ff 1c       	adc	r15, r15
    405e:	00 1f       	adc	r16, r16
    4060:	11 1f       	adc	r17, r17
    4062:	0a 94       	dec	r0
    4064:	d2 f7       	brpl	.-12     	; 0x405a <__floatsisf+0x8e>
    4066:	ed 82       	std	Y+5, r14	; 0x05
    4068:	fe 82       	std	Y+6, r15	; 0x06
    406a:	0f 83       	std	Y+7, r16	; 0x07
    406c:	18 87       	std	Y+8, r17	; 0x08
    406e:	c8 1a       	sub	r12, r24
    4070:	d9 0a       	sbc	r13, r25
    4072:	dc 82       	std	Y+4, r13	; 0x04
    4074:	cb 82       	std	Y+3, r12	; 0x03
    4076:	ba 82       	std	Y+2, r11	; 0x02
    4078:	ce 01       	movw	r24, r28
    407a:	01 96       	adiw	r24, 0x01	; 1
    407c:	0e 94 60 21 	call	0x42c0	; 0x42c0 <__pack_f>
    4080:	28 96       	adiw	r28, 0x08	; 8
    4082:	e9 e0       	ldi	r30, 0x09	; 9
    4084:	0c 94 3f 23 	jmp	0x467e	; 0x467e <__epilogue_restores__+0x12>

00004088 <__fixsfsi>:
    4088:	ac e0       	ldi	r26, 0x0C	; 12
    408a:	b0 e0       	ldi	r27, 0x00	; 0
    408c:	ea e4       	ldi	r30, 0x4A	; 74
    408e:	f0 e2       	ldi	r31, 0x20	; 32
    4090:	0c 94 2a 23 	jmp	0x4654	; 0x4654 <__prologue_saves__+0x20>
    4094:	69 83       	std	Y+1, r22	; 0x01
    4096:	7a 83       	std	Y+2, r23	; 0x02
    4098:	8b 83       	std	Y+3, r24	; 0x03
    409a:	9c 83       	std	Y+4, r25	; 0x04
    409c:	ce 01       	movw	r24, r28
    409e:	01 96       	adiw	r24, 0x01	; 1
    40a0:	be 01       	movw	r22, r28
    40a2:	6b 5f       	subi	r22, 0xFB	; 251
    40a4:	7f 4f       	sbci	r23, 0xFF	; 255
    40a6:	0e 94 35 22 	call	0x446a	; 0x446a <__unpack_f>
    40aa:	8d 81       	ldd	r24, Y+5	; 0x05
    40ac:	82 30       	cpi	r24, 0x02	; 2
    40ae:	61 f1       	breq	.+88     	; 0x4108 <__fixsfsi+0x80>
    40b0:	82 30       	cpi	r24, 0x02	; 2
    40b2:	50 f1       	brcs	.+84     	; 0x4108 <__fixsfsi+0x80>
    40b4:	84 30       	cpi	r24, 0x04	; 4
    40b6:	21 f4       	brne	.+8      	; 0x40c0 <__fixsfsi+0x38>
    40b8:	8e 81       	ldd	r24, Y+6	; 0x06
    40ba:	88 23       	and	r24, r24
    40bc:	51 f1       	breq	.+84     	; 0x4112 <__fixsfsi+0x8a>
    40be:	2e c0       	rjmp	.+92     	; 0x411c <__fixsfsi+0x94>
    40c0:	2f 81       	ldd	r18, Y+7	; 0x07
    40c2:	38 85       	ldd	r19, Y+8	; 0x08
    40c4:	37 fd       	sbrc	r19, 7
    40c6:	20 c0       	rjmp	.+64     	; 0x4108 <__fixsfsi+0x80>
    40c8:	6e 81       	ldd	r22, Y+6	; 0x06
    40ca:	2f 31       	cpi	r18, 0x1F	; 31
    40cc:	31 05       	cpc	r19, r1
    40ce:	1c f0       	brlt	.+6      	; 0x40d6 <__fixsfsi+0x4e>
    40d0:	66 23       	and	r22, r22
    40d2:	f9 f0       	breq	.+62     	; 0x4112 <__fixsfsi+0x8a>
    40d4:	23 c0       	rjmp	.+70     	; 0x411c <__fixsfsi+0x94>
    40d6:	8e e1       	ldi	r24, 0x1E	; 30
    40d8:	90 e0       	ldi	r25, 0x00	; 0
    40da:	82 1b       	sub	r24, r18
    40dc:	93 0b       	sbc	r25, r19
    40de:	29 85       	ldd	r18, Y+9	; 0x09
    40e0:	3a 85       	ldd	r19, Y+10	; 0x0a
    40e2:	4b 85       	ldd	r20, Y+11	; 0x0b
    40e4:	5c 85       	ldd	r21, Y+12	; 0x0c
    40e6:	04 c0       	rjmp	.+8      	; 0x40f0 <__fixsfsi+0x68>
    40e8:	56 95       	lsr	r21
    40ea:	47 95       	ror	r20
    40ec:	37 95       	ror	r19
    40ee:	27 95       	ror	r18
    40f0:	8a 95       	dec	r24
    40f2:	d2 f7       	brpl	.-12     	; 0x40e8 <__fixsfsi+0x60>
    40f4:	66 23       	and	r22, r22
    40f6:	b1 f0       	breq	.+44     	; 0x4124 <__fixsfsi+0x9c>
    40f8:	50 95       	com	r21
    40fa:	40 95       	com	r20
    40fc:	30 95       	com	r19
    40fe:	21 95       	neg	r18
    4100:	3f 4f       	sbci	r19, 0xFF	; 255
    4102:	4f 4f       	sbci	r20, 0xFF	; 255
    4104:	5f 4f       	sbci	r21, 0xFF	; 255
    4106:	0e c0       	rjmp	.+28     	; 0x4124 <__fixsfsi+0x9c>
    4108:	20 e0       	ldi	r18, 0x00	; 0
    410a:	30 e0       	ldi	r19, 0x00	; 0
    410c:	40 e0       	ldi	r20, 0x00	; 0
    410e:	50 e0       	ldi	r21, 0x00	; 0
    4110:	09 c0       	rjmp	.+18     	; 0x4124 <__fixsfsi+0x9c>
    4112:	2f ef       	ldi	r18, 0xFF	; 255
    4114:	3f ef       	ldi	r19, 0xFF	; 255
    4116:	4f ef       	ldi	r20, 0xFF	; 255
    4118:	5f e7       	ldi	r21, 0x7F	; 127
    411a:	04 c0       	rjmp	.+8      	; 0x4124 <__fixsfsi+0x9c>
    411c:	20 e0       	ldi	r18, 0x00	; 0
    411e:	30 e0       	ldi	r19, 0x00	; 0
    4120:	40 e0       	ldi	r20, 0x00	; 0
    4122:	50 e8       	ldi	r21, 0x80	; 128
    4124:	b9 01       	movw	r22, r18
    4126:	ca 01       	movw	r24, r20
    4128:	2c 96       	adiw	r28, 0x0c	; 12
    412a:	e2 e0       	ldi	r30, 0x02	; 2
    412c:	0c 94 46 23 	jmp	0x468c	; 0x468c <__epilogue_restores__+0x20>

00004130 <__floatunsisf>:
    4130:	a8 e0       	ldi	r26, 0x08	; 8
    4132:	b0 e0       	ldi	r27, 0x00	; 0
    4134:	ee e9       	ldi	r30, 0x9E	; 158
    4136:	f0 e2       	ldi	r31, 0x20	; 32
    4138:	0c 94 22 23 	jmp	0x4644	; 0x4644 <__prologue_saves__+0x10>
    413c:	7b 01       	movw	r14, r22
    413e:	8c 01       	movw	r16, r24
    4140:	61 15       	cp	r22, r1
    4142:	71 05       	cpc	r23, r1
    4144:	81 05       	cpc	r24, r1
    4146:	91 05       	cpc	r25, r1
    4148:	19 f4       	brne	.+6      	; 0x4150 <__floatunsisf+0x20>
    414a:	82 e0       	ldi	r24, 0x02	; 2
    414c:	89 83       	std	Y+1, r24	; 0x01
    414e:	60 c0       	rjmp	.+192    	; 0x4210 <__floatunsisf+0xe0>
    4150:	83 e0       	ldi	r24, 0x03	; 3
    4152:	89 83       	std	Y+1, r24	; 0x01
    4154:	8e e1       	ldi	r24, 0x1E	; 30
    4156:	c8 2e       	mov	r12, r24
    4158:	d1 2c       	mov	r13, r1
    415a:	dc 82       	std	Y+4, r13	; 0x04
    415c:	cb 82       	std	Y+3, r12	; 0x03
    415e:	ed 82       	std	Y+5, r14	; 0x05
    4160:	fe 82       	std	Y+6, r15	; 0x06
    4162:	0f 83       	std	Y+7, r16	; 0x07
    4164:	18 87       	std	Y+8, r17	; 0x08
    4166:	c8 01       	movw	r24, r16
    4168:	b7 01       	movw	r22, r14
    416a:	0e 94 11 21 	call	0x4222	; 0x4222 <__clzsi2>
    416e:	fc 01       	movw	r30, r24
    4170:	31 97       	sbiw	r30, 0x01	; 1
    4172:	f7 ff       	sbrs	r31, 7
    4174:	3b c0       	rjmp	.+118    	; 0x41ec <__floatunsisf+0xbc>
    4176:	22 27       	eor	r18, r18
    4178:	33 27       	eor	r19, r19
    417a:	2e 1b       	sub	r18, r30
    417c:	3f 0b       	sbc	r19, r31
    417e:	57 01       	movw	r10, r14
    4180:	68 01       	movw	r12, r16
    4182:	02 2e       	mov	r0, r18
    4184:	04 c0       	rjmp	.+8      	; 0x418e <__floatunsisf+0x5e>
    4186:	d6 94       	lsr	r13
    4188:	c7 94       	ror	r12
    418a:	b7 94       	ror	r11
    418c:	a7 94       	ror	r10
    418e:	0a 94       	dec	r0
    4190:	d2 f7       	brpl	.-12     	; 0x4186 <__floatunsisf+0x56>
    4192:	40 e0       	ldi	r20, 0x00	; 0
    4194:	50 e0       	ldi	r21, 0x00	; 0
    4196:	60 e0       	ldi	r22, 0x00	; 0
    4198:	70 e0       	ldi	r23, 0x00	; 0
    419a:	81 e0       	ldi	r24, 0x01	; 1
    419c:	90 e0       	ldi	r25, 0x00	; 0
    419e:	a0 e0       	ldi	r26, 0x00	; 0
    41a0:	b0 e0       	ldi	r27, 0x00	; 0
    41a2:	04 c0       	rjmp	.+8      	; 0x41ac <__floatunsisf+0x7c>
    41a4:	88 0f       	add	r24, r24
    41a6:	99 1f       	adc	r25, r25
    41a8:	aa 1f       	adc	r26, r26
    41aa:	bb 1f       	adc	r27, r27
    41ac:	2a 95       	dec	r18
    41ae:	d2 f7       	brpl	.-12     	; 0x41a4 <__floatunsisf+0x74>
    41b0:	01 97       	sbiw	r24, 0x01	; 1
    41b2:	a1 09       	sbc	r26, r1
    41b4:	b1 09       	sbc	r27, r1
    41b6:	8e 21       	and	r24, r14
    41b8:	9f 21       	and	r25, r15
    41ba:	a0 23       	and	r26, r16
    41bc:	b1 23       	and	r27, r17
    41be:	00 97       	sbiw	r24, 0x00	; 0
    41c0:	a1 05       	cpc	r26, r1
    41c2:	b1 05       	cpc	r27, r1
    41c4:	21 f0       	breq	.+8      	; 0x41ce <__floatunsisf+0x9e>
    41c6:	41 e0       	ldi	r20, 0x01	; 1
    41c8:	50 e0       	ldi	r21, 0x00	; 0
    41ca:	60 e0       	ldi	r22, 0x00	; 0
    41cc:	70 e0       	ldi	r23, 0x00	; 0
    41ce:	4a 29       	or	r20, r10
    41d0:	5b 29       	or	r21, r11
    41d2:	6c 29       	or	r22, r12
    41d4:	7d 29       	or	r23, r13
    41d6:	4d 83       	std	Y+5, r20	; 0x05
    41d8:	5e 83       	std	Y+6, r21	; 0x06
    41da:	6f 83       	std	Y+7, r22	; 0x07
    41dc:	78 87       	std	Y+8, r23	; 0x08
    41de:	8e e1       	ldi	r24, 0x1E	; 30
    41e0:	90 e0       	ldi	r25, 0x00	; 0
    41e2:	8e 1b       	sub	r24, r30
    41e4:	9f 0b       	sbc	r25, r31
    41e6:	9c 83       	std	Y+4, r25	; 0x04
    41e8:	8b 83       	std	Y+3, r24	; 0x03
    41ea:	12 c0       	rjmp	.+36     	; 0x4210 <__floatunsisf+0xe0>
    41ec:	30 97       	sbiw	r30, 0x00	; 0
    41ee:	81 f0       	breq	.+32     	; 0x4210 <__floatunsisf+0xe0>
    41f0:	0e 2e       	mov	r0, r30
    41f2:	04 c0       	rjmp	.+8      	; 0x41fc <__floatunsisf+0xcc>
    41f4:	ee 0c       	add	r14, r14
    41f6:	ff 1c       	adc	r15, r15
    41f8:	00 1f       	adc	r16, r16
    41fa:	11 1f       	adc	r17, r17
    41fc:	0a 94       	dec	r0
    41fe:	d2 f7       	brpl	.-12     	; 0x41f4 <__floatunsisf+0xc4>
    4200:	ed 82       	std	Y+5, r14	; 0x05
    4202:	fe 82       	std	Y+6, r15	; 0x06
    4204:	0f 83       	std	Y+7, r16	; 0x07
    4206:	18 87       	std	Y+8, r17	; 0x08
    4208:	ce 1a       	sub	r12, r30
    420a:	df 0a       	sbc	r13, r31
    420c:	dc 82       	std	Y+4, r13	; 0x04
    420e:	cb 82       	std	Y+3, r12	; 0x03
    4210:	1a 82       	std	Y+2, r1	; 0x02
    4212:	ce 01       	movw	r24, r28
    4214:	01 96       	adiw	r24, 0x01	; 1
    4216:	0e 94 60 21 	call	0x42c0	; 0x42c0 <__pack_f>
    421a:	28 96       	adiw	r28, 0x08	; 8
    421c:	ea e0       	ldi	r30, 0x0A	; 10
    421e:	0c 94 3e 23 	jmp	0x467c	; 0x467c <__epilogue_restores__+0x10>

00004222 <__clzsi2>:
    4222:	ef 92       	push	r14
    4224:	ff 92       	push	r15
    4226:	0f 93       	push	r16
    4228:	1f 93       	push	r17
    422a:	7b 01       	movw	r14, r22
    422c:	8c 01       	movw	r16, r24
    422e:	80 e0       	ldi	r24, 0x00	; 0
    4230:	e8 16       	cp	r14, r24
    4232:	80 e0       	ldi	r24, 0x00	; 0
    4234:	f8 06       	cpc	r15, r24
    4236:	81 e0       	ldi	r24, 0x01	; 1
    4238:	08 07       	cpc	r16, r24
    423a:	80 e0       	ldi	r24, 0x00	; 0
    423c:	18 07       	cpc	r17, r24
    423e:	88 f4       	brcc	.+34     	; 0x4262 <__clzsi2+0x40>
    4240:	8f ef       	ldi	r24, 0xFF	; 255
    4242:	e8 16       	cp	r14, r24
    4244:	f1 04       	cpc	r15, r1
    4246:	01 05       	cpc	r16, r1
    4248:	11 05       	cpc	r17, r1
    424a:	31 f0       	breq	.+12     	; 0x4258 <__clzsi2+0x36>
    424c:	28 f0       	brcs	.+10     	; 0x4258 <__clzsi2+0x36>
    424e:	88 e0       	ldi	r24, 0x08	; 8
    4250:	90 e0       	ldi	r25, 0x00	; 0
    4252:	a0 e0       	ldi	r26, 0x00	; 0
    4254:	b0 e0       	ldi	r27, 0x00	; 0
    4256:	17 c0       	rjmp	.+46     	; 0x4286 <__clzsi2+0x64>
    4258:	80 e0       	ldi	r24, 0x00	; 0
    425a:	90 e0       	ldi	r25, 0x00	; 0
    425c:	a0 e0       	ldi	r26, 0x00	; 0
    425e:	b0 e0       	ldi	r27, 0x00	; 0
    4260:	12 c0       	rjmp	.+36     	; 0x4286 <__clzsi2+0x64>
    4262:	80 e0       	ldi	r24, 0x00	; 0
    4264:	e8 16       	cp	r14, r24
    4266:	80 e0       	ldi	r24, 0x00	; 0
    4268:	f8 06       	cpc	r15, r24
    426a:	80 e0       	ldi	r24, 0x00	; 0
    426c:	08 07       	cpc	r16, r24
    426e:	81 e0       	ldi	r24, 0x01	; 1
    4270:	18 07       	cpc	r17, r24
    4272:	28 f0       	brcs	.+10     	; 0x427e <__clzsi2+0x5c>
    4274:	88 e1       	ldi	r24, 0x18	; 24
    4276:	90 e0       	ldi	r25, 0x00	; 0
    4278:	a0 e0       	ldi	r26, 0x00	; 0
    427a:	b0 e0       	ldi	r27, 0x00	; 0
    427c:	04 c0       	rjmp	.+8      	; 0x4286 <__clzsi2+0x64>
    427e:	80 e1       	ldi	r24, 0x10	; 16
    4280:	90 e0       	ldi	r25, 0x00	; 0
    4282:	a0 e0       	ldi	r26, 0x00	; 0
    4284:	b0 e0       	ldi	r27, 0x00	; 0
    4286:	20 e2       	ldi	r18, 0x20	; 32
    4288:	30 e0       	ldi	r19, 0x00	; 0
    428a:	40 e0       	ldi	r20, 0x00	; 0
    428c:	50 e0       	ldi	r21, 0x00	; 0
    428e:	28 1b       	sub	r18, r24
    4290:	39 0b       	sbc	r19, r25
    4292:	4a 0b       	sbc	r20, r26
    4294:	5b 0b       	sbc	r21, r27
    4296:	04 c0       	rjmp	.+8      	; 0x42a0 <__clzsi2+0x7e>
    4298:	16 95       	lsr	r17
    429a:	07 95       	ror	r16
    429c:	f7 94       	ror	r15
    429e:	e7 94       	ror	r14
    42a0:	8a 95       	dec	r24
    42a2:	d2 f7       	brpl	.-12     	; 0x4298 <__clzsi2+0x76>
    42a4:	f7 01       	movw	r30, r14
    42a6:	e8 5f       	subi	r30, 0xF8	; 248
    42a8:	fd 4f       	sbci	r31, 0xFD	; 253
    42aa:	80 81       	ld	r24, Z
    42ac:	28 1b       	sub	r18, r24
    42ae:	31 09       	sbc	r19, r1
    42b0:	41 09       	sbc	r20, r1
    42b2:	51 09       	sbc	r21, r1
    42b4:	c9 01       	movw	r24, r18
    42b6:	1f 91       	pop	r17
    42b8:	0f 91       	pop	r16
    42ba:	ff 90       	pop	r15
    42bc:	ef 90       	pop	r14
    42be:	08 95       	ret

000042c0 <__pack_f>:
    42c0:	df 92       	push	r13
    42c2:	ef 92       	push	r14
    42c4:	ff 92       	push	r15
    42c6:	0f 93       	push	r16
    42c8:	1f 93       	push	r17
    42ca:	fc 01       	movw	r30, r24
    42cc:	e4 80       	ldd	r14, Z+4	; 0x04
    42ce:	f5 80       	ldd	r15, Z+5	; 0x05
    42d0:	06 81       	ldd	r16, Z+6	; 0x06
    42d2:	17 81       	ldd	r17, Z+7	; 0x07
    42d4:	d1 80       	ldd	r13, Z+1	; 0x01
    42d6:	80 81       	ld	r24, Z
    42d8:	82 30       	cpi	r24, 0x02	; 2
    42da:	48 f4       	brcc	.+18     	; 0x42ee <__pack_f+0x2e>
    42dc:	80 e0       	ldi	r24, 0x00	; 0
    42de:	90 e0       	ldi	r25, 0x00	; 0
    42e0:	a0 e1       	ldi	r26, 0x10	; 16
    42e2:	b0 e0       	ldi	r27, 0x00	; 0
    42e4:	e8 2a       	or	r14, r24
    42e6:	f9 2a       	or	r15, r25
    42e8:	0a 2b       	or	r16, r26
    42ea:	1b 2b       	or	r17, r27
    42ec:	a5 c0       	rjmp	.+330    	; 0x4438 <__pack_f+0x178>
    42ee:	84 30       	cpi	r24, 0x04	; 4
    42f0:	09 f4       	brne	.+2      	; 0x42f4 <__pack_f+0x34>
    42f2:	9f c0       	rjmp	.+318    	; 0x4432 <__pack_f+0x172>
    42f4:	82 30       	cpi	r24, 0x02	; 2
    42f6:	21 f4       	brne	.+8      	; 0x4300 <__pack_f+0x40>
    42f8:	ee 24       	eor	r14, r14
    42fa:	ff 24       	eor	r15, r15
    42fc:	87 01       	movw	r16, r14
    42fe:	05 c0       	rjmp	.+10     	; 0x430a <__pack_f+0x4a>
    4300:	e1 14       	cp	r14, r1
    4302:	f1 04       	cpc	r15, r1
    4304:	01 05       	cpc	r16, r1
    4306:	11 05       	cpc	r17, r1
    4308:	19 f4       	brne	.+6      	; 0x4310 <__pack_f+0x50>
    430a:	e0 e0       	ldi	r30, 0x00	; 0
    430c:	f0 e0       	ldi	r31, 0x00	; 0
    430e:	96 c0       	rjmp	.+300    	; 0x443c <__pack_f+0x17c>
    4310:	62 81       	ldd	r22, Z+2	; 0x02
    4312:	73 81       	ldd	r23, Z+3	; 0x03
    4314:	9f ef       	ldi	r25, 0xFF	; 255
    4316:	62 38       	cpi	r22, 0x82	; 130
    4318:	79 07       	cpc	r23, r25
    431a:	0c f0       	brlt	.+2      	; 0x431e <__pack_f+0x5e>
    431c:	5b c0       	rjmp	.+182    	; 0x43d4 <__pack_f+0x114>
    431e:	22 e8       	ldi	r18, 0x82	; 130
    4320:	3f ef       	ldi	r19, 0xFF	; 255
    4322:	26 1b       	sub	r18, r22
    4324:	37 0b       	sbc	r19, r23
    4326:	2a 31       	cpi	r18, 0x1A	; 26
    4328:	31 05       	cpc	r19, r1
    432a:	2c f0       	brlt	.+10     	; 0x4336 <__pack_f+0x76>
    432c:	20 e0       	ldi	r18, 0x00	; 0
    432e:	30 e0       	ldi	r19, 0x00	; 0
    4330:	40 e0       	ldi	r20, 0x00	; 0
    4332:	50 e0       	ldi	r21, 0x00	; 0
    4334:	2a c0       	rjmp	.+84     	; 0x438a <__pack_f+0xca>
    4336:	b8 01       	movw	r22, r16
    4338:	a7 01       	movw	r20, r14
    433a:	02 2e       	mov	r0, r18
    433c:	04 c0       	rjmp	.+8      	; 0x4346 <__pack_f+0x86>
    433e:	76 95       	lsr	r23
    4340:	67 95       	ror	r22
    4342:	57 95       	ror	r21
    4344:	47 95       	ror	r20
    4346:	0a 94       	dec	r0
    4348:	d2 f7       	brpl	.-12     	; 0x433e <__pack_f+0x7e>
    434a:	81 e0       	ldi	r24, 0x01	; 1
    434c:	90 e0       	ldi	r25, 0x00	; 0
    434e:	a0 e0       	ldi	r26, 0x00	; 0
    4350:	b0 e0       	ldi	r27, 0x00	; 0
    4352:	04 c0       	rjmp	.+8      	; 0x435c <__pack_f+0x9c>
    4354:	88 0f       	add	r24, r24
    4356:	99 1f       	adc	r25, r25
    4358:	aa 1f       	adc	r26, r26
    435a:	bb 1f       	adc	r27, r27
    435c:	2a 95       	dec	r18
    435e:	d2 f7       	brpl	.-12     	; 0x4354 <__pack_f+0x94>
    4360:	01 97       	sbiw	r24, 0x01	; 1
    4362:	a1 09       	sbc	r26, r1
    4364:	b1 09       	sbc	r27, r1
    4366:	8e 21       	and	r24, r14
    4368:	9f 21       	and	r25, r15
    436a:	a0 23       	and	r26, r16
    436c:	b1 23       	and	r27, r17
    436e:	00 97       	sbiw	r24, 0x00	; 0
    4370:	a1 05       	cpc	r26, r1
    4372:	b1 05       	cpc	r27, r1
    4374:	21 f0       	breq	.+8      	; 0x437e <__pack_f+0xbe>
    4376:	81 e0       	ldi	r24, 0x01	; 1
    4378:	90 e0       	ldi	r25, 0x00	; 0
    437a:	a0 e0       	ldi	r26, 0x00	; 0
    437c:	b0 e0       	ldi	r27, 0x00	; 0
    437e:	9a 01       	movw	r18, r20
    4380:	ab 01       	movw	r20, r22
    4382:	28 2b       	or	r18, r24
    4384:	39 2b       	or	r19, r25
    4386:	4a 2b       	or	r20, r26
    4388:	5b 2b       	or	r21, r27
    438a:	da 01       	movw	r26, r20
    438c:	c9 01       	movw	r24, r18
    438e:	8f 77       	andi	r24, 0x7F	; 127
    4390:	90 70       	andi	r25, 0x00	; 0
    4392:	a0 70       	andi	r26, 0x00	; 0
    4394:	b0 70       	andi	r27, 0x00	; 0
    4396:	80 34       	cpi	r24, 0x40	; 64
    4398:	91 05       	cpc	r25, r1
    439a:	a1 05       	cpc	r26, r1
    439c:	b1 05       	cpc	r27, r1
    439e:	39 f4       	brne	.+14     	; 0x43ae <__pack_f+0xee>
    43a0:	27 ff       	sbrs	r18, 7
    43a2:	09 c0       	rjmp	.+18     	; 0x43b6 <__pack_f+0xf6>
    43a4:	20 5c       	subi	r18, 0xC0	; 192
    43a6:	3f 4f       	sbci	r19, 0xFF	; 255
    43a8:	4f 4f       	sbci	r20, 0xFF	; 255
    43aa:	5f 4f       	sbci	r21, 0xFF	; 255
    43ac:	04 c0       	rjmp	.+8      	; 0x43b6 <__pack_f+0xf6>
    43ae:	21 5c       	subi	r18, 0xC1	; 193
    43b0:	3f 4f       	sbci	r19, 0xFF	; 255
    43b2:	4f 4f       	sbci	r20, 0xFF	; 255
    43b4:	5f 4f       	sbci	r21, 0xFF	; 255
    43b6:	e0 e0       	ldi	r30, 0x00	; 0
    43b8:	f0 e0       	ldi	r31, 0x00	; 0
    43ba:	20 30       	cpi	r18, 0x00	; 0
    43bc:	a0 e0       	ldi	r26, 0x00	; 0
    43be:	3a 07       	cpc	r19, r26
    43c0:	a0 e0       	ldi	r26, 0x00	; 0
    43c2:	4a 07       	cpc	r20, r26
    43c4:	a0 e4       	ldi	r26, 0x40	; 64
    43c6:	5a 07       	cpc	r21, r26
    43c8:	10 f0       	brcs	.+4      	; 0x43ce <__pack_f+0x10e>
    43ca:	e1 e0       	ldi	r30, 0x01	; 1
    43cc:	f0 e0       	ldi	r31, 0x00	; 0
    43ce:	79 01       	movw	r14, r18
    43d0:	8a 01       	movw	r16, r20
    43d2:	27 c0       	rjmp	.+78     	; 0x4422 <__pack_f+0x162>
    43d4:	60 38       	cpi	r22, 0x80	; 128
    43d6:	71 05       	cpc	r23, r1
    43d8:	64 f5       	brge	.+88     	; 0x4432 <__pack_f+0x172>
    43da:	fb 01       	movw	r30, r22
    43dc:	e1 58       	subi	r30, 0x81	; 129
    43de:	ff 4f       	sbci	r31, 0xFF	; 255
    43e0:	d8 01       	movw	r26, r16
    43e2:	c7 01       	movw	r24, r14
    43e4:	8f 77       	andi	r24, 0x7F	; 127
    43e6:	90 70       	andi	r25, 0x00	; 0
    43e8:	a0 70       	andi	r26, 0x00	; 0
    43ea:	b0 70       	andi	r27, 0x00	; 0
    43ec:	80 34       	cpi	r24, 0x40	; 64
    43ee:	91 05       	cpc	r25, r1
    43f0:	a1 05       	cpc	r26, r1
    43f2:	b1 05       	cpc	r27, r1
    43f4:	39 f4       	brne	.+14     	; 0x4404 <__pack_f+0x144>
    43f6:	e7 fe       	sbrs	r14, 7
    43f8:	0d c0       	rjmp	.+26     	; 0x4414 <__pack_f+0x154>
    43fa:	80 e4       	ldi	r24, 0x40	; 64
    43fc:	90 e0       	ldi	r25, 0x00	; 0
    43fe:	a0 e0       	ldi	r26, 0x00	; 0
    4400:	b0 e0       	ldi	r27, 0x00	; 0
    4402:	04 c0       	rjmp	.+8      	; 0x440c <__pack_f+0x14c>
    4404:	8f e3       	ldi	r24, 0x3F	; 63
    4406:	90 e0       	ldi	r25, 0x00	; 0
    4408:	a0 e0       	ldi	r26, 0x00	; 0
    440a:	b0 e0       	ldi	r27, 0x00	; 0
    440c:	e8 0e       	add	r14, r24
    440e:	f9 1e       	adc	r15, r25
    4410:	0a 1f       	adc	r16, r26
    4412:	1b 1f       	adc	r17, r27
    4414:	17 ff       	sbrs	r17, 7
    4416:	05 c0       	rjmp	.+10     	; 0x4422 <__pack_f+0x162>
    4418:	16 95       	lsr	r17
    441a:	07 95       	ror	r16
    441c:	f7 94       	ror	r15
    441e:	e7 94       	ror	r14
    4420:	31 96       	adiw	r30, 0x01	; 1
    4422:	87 e0       	ldi	r24, 0x07	; 7
    4424:	16 95       	lsr	r17
    4426:	07 95       	ror	r16
    4428:	f7 94       	ror	r15
    442a:	e7 94       	ror	r14
    442c:	8a 95       	dec	r24
    442e:	d1 f7       	brne	.-12     	; 0x4424 <__pack_f+0x164>
    4430:	05 c0       	rjmp	.+10     	; 0x443c <__pack_f+0x17c>
    4432:	ee 24       	eor	r14, r14
    4434:	ff 24       	eor	r15, r15
    4436:	87 01       	movw	r16, r14
    4438:	ef ef       	ldi	r30, 0xFF	; 255
    443a:	f0 e0       	ldi	r31, 0x00	; 0
    443c:	6e 2f       	mov	r22, r30
    443e:	67 95       	ror	r22
    4440:	66 27       	eor	r22, r22
    4442:	67 95       	ror	r22
    4444:	90 2f       	mov	r25, r16
    4446:	9f 77       	andi	r25, 0x7F	; 127
    4448:	d7 94       	ror	r13
    444a:	dd 24       	eor	r13, r13
    444c:	d7 94       	ror	r13
    444e:	8e 2f       	mov	r24, r30
    4450:	86 95       	lsr	r24
    4452:	49 2f       	mov	r20, r25
    4454:	46 2b       	or	r20, r22
    4456:	58 2f       	mov	r21, r24
    4458:	5d 29       	or	r21, r13
    445a:	b7 01       	movw	r22, r14
    445c:	ca 01       	movw	r24, r20
    445e:	1f 91       	pop	r17
    4460:	0f 91       	pop	r16
    4462:	ff 90       	pop	r15
    4464:	ef 90       	pop	r14
    4466:	df 90       	pop	r13
    4468:	08 95       	ret

0000446a <__unpack_f>:
    446a:	fc 01       	movw	r30, r24
    446c:	db 01       	movw	r26, r22
    446e:	40 81       	ld	r20, Z
    4470:	51 81       	ldd	r21, Z+1	; 0x01
    4472:	22 81       	ldd	r18, Z+2	; 0x02
    4474:	62 2f       	mov	r22, r18
    4476:	6f 77       	andi	r22, 0x7F	; 127
    4478:	70 e0       	ldi	r23, 0x00	; 0
    447a:	22 1f       	adc	r18, r18
    447c:	22 27       	eor	r18, r18
    447e:	22 1f       	adc	r18, r18
    4480:	93 81       	ldd	r25, Z+3	; 0x03
    4482:	89 2f       	mov	r24, r25
    4484:	88 0f       	add	r24, r24
    4486:	82 2b       	or	r24, r18
    4488:	28 2f       	mov	r18, r24
    448a:	30 e0       	ldi	r19, 0x00	; 0
    448c:	99 1f       	adc	r25, r25
    448e:	99 27       	eor	r25, r25
    4490:	99 1f       	adc	r25, r25
    4492:	11 96       	adiw	r26, 0x01	; 1
    4494:	9c 93       	st	X, r25
    4496:	11 97       	sbiw	r26, 0x01	; 1
    4498:	21 15       	cp	r18, r1
    449a:	31 05       	cpc	r19, r1
    449c:	a9 f5       	brne	.+106    	; 0x4508 <__unpack_f+0x9e>
    449e:	41 15       	cp	r20, r1
    44a0:	51 05       	cpc	r21, r1
    44a2:	61 05       	cpc	r22, r1
    44a4:	71 05       	cpc	r23, r1
    44a6:	11 f4       	brne	.+4      	; 0x44ac <__unpack_f+0x42>
    44a8:	82 e0       	ldi	r24, 0x02	; 2
    44aa:	37 c0       	rjmp	.+110    	; 0x451a <__unpack_f+0xb0>
    44ac:	82 e8       	ldi	r24, 0x82	; 130
    44ae:	9f ef       	ldi	r25, 0xFF	; 255
    44b0:	13 96       	adiw	r26, 0x03	; 3
    44b2:	9c 93       	st	X, r25
    44b4:	8e 93       	st	-X, r24
    44b6:	12 97       	sbiw	r26, 0x02	; 2
    44b8:	9a 01       	movw	r18, r20
    44ba:	ab 01       	movw	r20, r22
    44bc:	67 e0       	ldi	r22, 0x07	; 7
    44be:	22 0f       	add	r18, r18
    44c0:	33 1f       	adc	r19, r19
    44c2:	44 1f       	adc	r20, r20
    44c4:	55 1f       	adc	r21, r21
    44c6:	6a 95       	dec	r22
    44c8:	d1 f7       	brne	.-12     	; 0x44be <__unpack_f+0x54>
    44ca:	83 e0       	ldi	r24, 0x03	; 3
    44cc:	8c 93       	st	X, r24
    44ce:	0d c0       	rjmp	.+26     	; 0x44ea <__unpack_f+0x80>
    44d0:	22 0f       	add	r18, r18
    44d2:	33 1f       	adc	r19, r19
    44d4:	44 1f       	adc	r20, r20
    44d6:	55 1f       	adc	r21, r21
    44d8:	12 96       	adiw	r26, 0x02	; 2
    44da:	8d 91       	ld	r24, X+
    44dc:	9c 91       	ld	r25, X
    44de:	13 97       	sbiw	r26, 0x03	; 3
    44e0:	01 97       	sbiw	r24, 0x01	; 1
    44e2:	13 96       	adiw	r26, 0x03	; 3
    44e4:	9c 93       	st	X, r25
    44e6:	8e 93       	st	-X, r24
    44e8:	12 97       	sbiw	r26, 0x02	; 2
    44ea:	20 30       	cpi	r18, 0x00	; 0
    44ec:	80 e0       	ldi	r24, 0x00	; 0
    44ee:	38 07       	cpc	r19, r24
    44f0:	80 e0       	ldi	r24, 0x00	; 0
    44f2:	48 07       	cpc	r20, r24
    44f4:	80 e4       	ldi	r24, 0x40	; 64
    44f6:	58 07       	cpc	r21, r24
    44f8:	58 f3       	brcs	.-42     	; 0x44d0 <__unpack_f+0x66>
    44fa:	14 96       	adiw	r26, 0x04	; 4
    44fc:	2d 93       	st	X+, r18
    44fe:	3d 93       	st	X+, r19
    4500:	4d 93       	st	X+, r20
    4502:	5c 93       	st	X, r21
    4504:	17 97       	sbiw	r26, 0x07	; 7
    4506:	08 95       	ret
    4508:	2f 3f       	cpi	r18, 0xFF	; 255
    450a:	31 05       	cpc	r19, r1
    450c:	79 f4       	brne	.+30     	; 0x452c <__unpack_f+0xc2>
    450e:	41 15       	cp	r20, r1
    4510:	51 05       	cpc	r21, r1
    4512:	61 05       	cpc	r22, r1
    4514:	71 05       	cpc	r23, r1
    4516:	19 f4       	brne	.+6      	; 0x451e <__unpack_f+0xb4>
    4518:	84 e0       	ldi	r24, 0x04	; 4
    451a:	8c 93       	st	X, r24
    451c:	08 95       	ret
    451e:	64 ff       	sbrs	r22, 4
    4520:	03 c0       	rjmp	.+6      	; 0x4528 <__unpack_f+0xbe>
    4522:	81 e0       	ldi	r24, 0x01	; 1
    4524:	8c 93       	st	X, r24
    4526:	12 c0       	rjmp	.+36     	; 0x454c <__unpack_f+0xe2>
    4528:	1c 92       	st	X, r1
    452a:	10 c0       	rjmp	.+32     	; 0x454c <__unpack_f+0xe2>
    452c:	2f 57       	subi	r18, 0x7F	; 127
    452e:	30 40       	sbci	r19, 0x00	; 0
    4530:	13 96       	adiw	r26, 0x03	; 3
    4532:	3c 93       	st	X, r19
    4534:	2e 93       	st	-X, r18
    4536:	12 97       	sbiw	r26, 0x02	; 2
    4538:	83 e0       	ldi	r24, 0x03	; 3
    453a:	8c 93       	st	X, r24
    453c:	87 e0       	ldi	r24, 0x07	; 7
    453e:	44 0f       	add	r20, r20
    4540:	55 1f       	adc	r21, r21
    4542:	66 1f       	adc	r22, r22
    4544:	77 1f       	adc	r23, r23
    4546:	8a 95       	dec	r24
    4548:	d1 f7       	brne	.-12     	; 0x453e <__unpack_f+0xd4>
    454a:	70 64       	ori	r23, 0x40	; 64
    454c:	14 96       	adiw	r26, 0x04	; 4
    454e:	4d 93       	st	X+, r20
    4550:	5d 93       	st	X+, r21
    4552:	6d 93       	st	X+, r22
    4554:	7c 93       	st	X, r23
    4556:	17 97       	sbiw	r26, 0x07	; 7
    4558:	08 95       	ret

0000455a <__fpcmp_parts_f>:
    455a:	1f 93       	push	r17
    455c:	dc 01       	movw	r26, r24
    455e:	fb 01       	movw	r30, r22
    4560:	9c 91       	ld	r25, X
    4562:	92 30       	cpi	r25, 0x02	; 2
    4564:	08 f4       	brcc	.+2      	; 0x4568 <__fpcmp_parts_f+0xe>
    4566:	47 c0       	rjmp	.+142    	; 0x45f6 <__fpcmp_parts_f+0x9c>
    4568:	80 81       	ld	r24, Z
    456a:	82 30       	cpi	r24, 0x02	; 2
    456c:	08 f4       	brcc	.+2      	; 0x4570 <__fpcmp_parts_f+0x16>
    456e:	43 c0       	rjmp	.+134    	; 0x45f6 <__fpcmp_parts_f+0x9c>
    4570:	94 30       	cpi	r25, 0x04	; 4
    4572:	51 f4       	brne	.+20     	; 0x4588 <__fpcmp_parts_f+0x2e>
    4574:	11 96       	adiw	r26, 0x01	; 1
    4576:	1c 91       	ld	r17, X
    4578:	84 30       	cpi	r24, 0x04	; 4
    457a:	99 f5       	brne	.+102    	; 0x45e2 <__fpcmp_parts_f+0x88>
    457c:	81 81       	ldd	r24, Z+1	; 0x01
    457e:	68 2f       	mov	r22, r24
    4580:	70 e0       	ldi	r23, 0x00	; 0
    4582:	61 1b       	sub	r22, r17
    4584:	71 09       	sbc	r23, r1
    4586:	3f c0       	rjmp	.+126    	; 0x4606 <__fpcmp_parts_f+0xac>
    4588:	84 30       	cpi	r24, 0x04	; 4
    458a:	21 f0       	breq	.+8      	; 0x4594 <__fpcmp_parts_f+0x3a>
    458c:	92 30       	cpi	r25, 0x02	; 2
    458e:	31 f4       	brne	.+12     	; 0x459c <__fpcmp_parts_f+0x42>
    4590:	82 30       	cpi	r24, 0x02	; 2
    4592:	b9 f1       	breq	.+110    	; 0x4602 <__fpcmp_parts_f+0xa8>
    4594:	81 81       	ldd	r24, Z+1	; 0x01
    4596:	88 23       	and	r24, r24
    4598:	89 f1       	breq	.+98     	; 0x45fc <__fpcmp_parts_f+0xa2>
    459a:	2d c0       	rjmp	.+90     	; 0x45f6 <__fpcmp_parts_f+0x9c>
    459c:	11 96       	adiw	r26, 0x01	; 1
    459e:	1c 91       	ld	r17, X
    45a0:	11 97       	sbiw	r26, 0x01	; 1
    45a2:	82 30       	cpi	r24, 0x02	; 2
    45a4:	f1 f0       	breq	.+60     	; 0x45e2 <__fpcmp_parts_f+0x88>
    45a6:	81 81       	ldd	r24, Z+1	; 0x01
    45a8:	18 17       	cp	r17, r24
    45aa:	d9 f4       	brne	.+54     	; 0x45e2 <__fpcmp_parts_f+0x88>
    45ac:	12 96       	adiw	r26, 0x02	; 2
    45ae:	2d 91       	ld	r18, X+
    45b0:	3c 91       	ld	r19, X
    45b2:	13 97       	sbiw	r26, 0x03	; 3
    45b4:	82 81       	ldd	r24, Z+2	; 0x02
    45b6:	93 81       	ldd	r25, Z+3	; 0x03
    45b8:	82 17       	cp	r24, r18
    45ba:	93 07       	cpc	r25, r19
    45bc:	94 f0       	brlt	.+36     	; 0x45e2 <__fpcmp_parts_f+0x88>
    45be:	28 17       	cp	r18, r24
    45c0:	39 07       	cpc	r19, r25
    45c2:	bc f0       	brlt	.+46     	; 0x45f2 <__fpcmp_parts_f+0x98>
    45c4:	14 96       	adiw	r26, 0x04	; 4
    45c6:	8d 91       	ld	r24, X+
    45c8:	9d 91       	ld	r25, X+
    45ca:	0d 90       	ld	r0, X+
    45cc:	bc 91       	ld	r27, X
    45ce:	a0 2d       	mov	r26, r0
    45d0:	24 81       	ldd	r18, Z+4	; 0x04
    45d2:	35 81       	ldd	r19, Z+5	; 0x05
    45d4:	46 81       	ldd	r20, Z+6	; 0x06
    45d6:	57 81       	ldd	r21, Z+7	; 0x07
    45d8:	28 17       	cp	r18, r24
    45da:	39 07       	cpc	r19, r25
    45dc:	4a 07       	cpc	r20, r26
    45de:	5b 07       	cpc	r21, r27
    45e0:	18 f4       	brcc	.+6      	; 0x45e8 <__fpcmp_parts_f+0x8e>
    45e2:	11 23       	and	r17, r17
    45e4:	41 f0       	breq	.+16     	; 0x45f6 <__fpcmp_parts_f+0x9c>
    45e6:	0a c0       	rjmp	.+20     	; 0x45fc <__fpcmp_parts_f+0xa2>
    45e8:	82 17       	cp	r24, r18
    45ea:	93 07       	cpc	r25, r19
    45ec:	a4 07       	cpc	r26, r20
    45ee:	b5 07       	cpc	r27, r21
    45f0:	40 f4       	brcc	.+16     	; 0x4602 <__fpcmp_parts_f+0xa8>
    45f2:	11 23       	and	r17, r17
    45f4:	19 f0       	breq	.+6      	; 0x45fc <__fpcmp_parts_f+0xa2>
    45f6:	61 e0       	ldi	r22, 0x01	; 1
    45f8:	70 e0       	ldi	r23, 0x00	; 0
    45fa:	05 c0       	rjmp	.+10     	; 0x4606 <__fpcmp_parts_f+0xac>
    45fc:	6f ef       	ldi	r22, 0xFF	; 255
    45fe:	7f ef       	ldi	r23, 0xFF	; 255
    4600:	02 c0       	rjmp	.+4      	; 0x4606 <__fpcmp_parts_f+0xac>
    4602:	60 e0       	ldi	r22, 0x00	; 0
    4604:	70 e0       	ldi	r23, 0x00	; 0
    4606:	cb 01       	movw	r24, r22
    4608:	1f 91       	pop	r17
    460a:	08 95       	ret

0000460c <__udivmodhi4>:
    460c:	aa 1b       	sub	r26, r26
    460e:	bb 1b       	sub	r27, r27
    4610:	51 e1       	ldi	r21, 0x11	; 17
    4612:	07 c0       	rjmp	.+14     	; 0x4622 <__udivmodhi4_ep>

00004614 <__udivmodhi4_loop>:
    4614:	aa 1f       	adc	r26, r26
    4616:	bb 1f       	adc	r27, r27
    4618:	a6 17       	cp	r26, r22
    461a:	b7 07       	cpc	r27, r23
    461c:	10 f0       	brcs	.+4      	; 0x4622 <__udivmodhi4_ep>
    461e:	a6 1b       	sub	r26, r22
    4620:	b7 0b       	sbc	r27, r23

00004622 <__udivmodhi4_ep>:
    4622:	88 1f       	adc	r24, r24
    4624:	99 1f       	adc	r25, r25
    4626:	5a 95       	dec	r21
    4628:	a9 f7       	brne	.-22     	; 0x4614 <__udivmodhi4_loop>
    462a:	80 95       	com	r24
    462c:	90 95       	com	r25
    462e:	bc 01       	movw	r22, r24
    4630:	cd 01       	movw	r24, r26
    4632:	08 95       	ret

00004634 <__prologue_saves__>:
    4634:	2f 92       	push	r2
    4636:	3f 92       	push	r3
    4638:	4f 92       	push	r4
    463a:	5f 92       	push	r5
    463c:	6f 92       	push	r6
    463e:	7f 92       	push	r7
    4640:	8f 92       	push	r8
    4642:	9f 92       	push	r9
    4644:	af 92       	push	r10
    4646:	bf 92       	push	r11
    4648:	cf 92       	push	r12
    464a:	df 92       	push	r13
    464c:	ef 92       	push	r14
    464e:	ff 92       	push	r15
    4650:	0f 93       	push	r16
    4652:	1f 93       	push	r17
    4654:	cf 93       	push	r28
    4656:	df 93       	push	r29
    4658:	cd b7       	in	r28, 0x3d	; 61
    465a:	de b7       	in	r29, 0x3e	; 62
    465c:	ca 1b       	sub	r28, r26
    465e:	db 0b       	sbc	r29, r27
    4660:	0f b6       	in	r0, 0x3f	; 63
    4662:	f8 94       	cli
    4664:	de bf       	out	0x3e, r29	; 62
    4666:	0f be       	out	0x3f, r0	; 63
    4668:	cd bf       	out	0x3d, r28	; 61
    466a:	19 94       	eijmp

0000466c <__epilogue_restores__>:
    466c:	2a 88       	ldd	r2, Y+18	; 0x12
    466e:	39 88       	ldd	r3, Y+17	; 0x11
    4670:	48 88       	ldd	r4, Y+16	; 0x10
    4672:	5f 84       	ldd	r5, Y+15	; 0x0f
    4674:	6e 84       	ldd	r6, Y+14	; 0x0e
    4676:	7d 84       	ldd	r7, Y+13	; 0x0d
    4678:	8c 84       	ldd	r8, Y+12	; 0x0c
    467a:	9b 84       	ldd	r9, Y+11	; 0x0b
    467c:	aa 84       	ldd	r10, Y+10	; 0x0a
    467e:	b9 84       	ldd	r11, Y+9	; 0x09
    4680:	c8 84       	ldd	r12, Y+8	; 0x08
    4682:	df 80       	ldd	r13, Y+7	; 0x07
    4684:	ee 80       	ldd	r14, Y+6	; 0x06
    4686:	fd 80       	ldd	r15, Y+5	; 0x05
    4688:	0c 81       	ldd	r16, Y+4	; 0x04
    468a:	1b 81       	ldd	r17, Y+3	; 0x03
    468c:	aa 81       	ldd	r26, Y+2	; 0x02
    468e:	b9 81       	ldd	r27, Y+1	; 0x01
    4690:	ce 0f       	add	r28, r30
    4692:	d1 1d       	adc	r29, r1
    4694:	0f b6       	in	r0, 0x3f	; 63
    4696:	f8 94       	cli
    4698:	de bf       	out	0x3e, r29	; 62
    469a:	0f be       	out	0x3f, r0	; 63
    469c:	cd bf       	out	0x3d, r28	; 61
    469e:	ed 01       	movw	r28, r26
    46a0:	08 95       	ret

000046a2 <pow>:
    46a2:	fa 01       	movw	r30, r20
    46a4:	ee 0f       	add	r30, r30
    46a6:	ff 1f       	adc	r31, r31
    46a8:	30 96       	adiw	r30, 0x00	; 0
    46aa:	21 05       	cpc	r18, r1
    46ac:	31 05       	cpc	r19, r1
    46ae:	99 f1       	breq	.+102    	; 0x4716 <pow+0x74>
    46b0:	61 15       	cp	r22, r1
    46b2:	71 05       	cpc	r23, r1
    46b4:	61 f4       	brne	.+24     	; 0x46ce <pow+0x2c>
    46b6:	80 38       	cpi	r24, 0x80	; 128
    46b8:	bf e3       	ldi	r27, 0x3F	; 63
    46ba:	9b 07       	cpc	r25, r27
    46bc:	49 f1       	breq	.+82     	; 0x4710 <pow+0x6e>
    46be:	68 94       	set
    46c0:	90 38       	cpi	r25, 0x80	; 128
    46c2:	81 05       	cpc	r24, r1
    46c4:	61 f0       	breq	.+24     	; 0x46de <pow+0x3c>
    46c6:	80 38       	cpi	r24, 0x80	; 128
    46c8:	bf ef       	ldi	r27, 0xFF	; 255
    46ca:	9b 07       	cpc	r25, r27
    46cc:	41 f0       	breq	.+16     	; 0x46de <pow+0x3c>
    46ce:	99 23       	and	r25, r25
    46d0:	42 f5       	brpl	.+80     	; 0x4722 <pow+0x80>
    46d2:	ff 3f       	cpi	r31, 0xFF	; 255
    46d4:	e1 05       	cpc	r30, r1
    46d6:	31 05       	cpc	r19, r1
    46d8:	21 05       	cpc	r18, r1
    46da:	11 f1       	breq	.+68     	; 0x4720 <pow+0x7e>
    46dc:	e8 94       	clt
    46de:	08 94       	sec
    46e0:	e7 95       	ror	r30
    46e2:	d9 01       	movw	r26, r18
    46e4:	aa 23       	and	r26, r26
    46e6:	29 f4       	brne	.+10     	; 0x46f2 <pow+0x50>
    46e8:	ab 2f       	mov	r26, r27
    46ea:	be 2f       	mov	r27, r30
    46ec:	f8 5f       	subi	r31, 0xF8	; 248
    46ee:	d0 f3       	brcs	.-12     	; 0x46e4 <pow+0x42>
    46f0:	10 c0       	rjmp	.+32     	; 0x4712 <pow+0x70>
    46f2:	ff 5f       	subi	r31, 0xFF	; 255
    46f4:	70 f4       	brcc	.+28     	; 0x4712 <pow+0x70>
    46f6:	a6 95       	lsr	r26
    46f8:	e0 f7       	brcc	.-8      	; 0x46f2 <pow+0x50>
    46fa:	f7 39       	cpi	r31, 0x97	; 151
    46fc:	50 f0       	brcs	.+20     	; 0x4712 <pow+0x70>
    46fe:	19 f0       	breq	.+6      	; 0x4706 <pow+0x64>
    4700:	ff 3a       	cpi	r31, 0xAF	; 175
    4702:	38 f4       	brcc	.+14     	; 0x4712 <pow+0x70>
    4704:	9f 77       	andi	r25, 0x7F	; 127
    4706:	9f 93       	push	r25
    4708:	0c d0       	rcall	.+24     	; 0x4722 <pow+0x80>
    470a:	0f 90       	pop	r0
    470c:	07 fc       	sbrc	r0, 7
    470e:	90 58       	subi	r25, 0x80	; 128
    4710:	08 95       	ret
    4712:	3e f0       	brts	.+14     	; 0x4722 <pow+0x80>
    4714:	49 c0       	rjmp	.+146    	; 0x47a8 <__fp_nan>
    4716:	60 e0       	ldi	r22, 0x00	; 0
    4718:	70 e0       	ldi	r23, 0x00	; 0
    471a:	80 e8       	ldi	r24, 0x80	; 128
    471c:	9f e3       	ldi	r25, 0x3F	; 63
    471e:	08 95       	ret
    4720:	4f e7       	ldi	r20, 0x7F	; 127
    4722:	9f 77       	andi	r25, 0x7F	; 127
    4724:	5f 93       	push	r21
    4726:	4f 93       	push	r20
    4728:	3f 93       	push	r19
    472a:	2f 93       	push	r18
    472c:	d0 d0       	rcall	.+416    	; 0x48ce <log>
    472e:	2f 91       	pop	r18
    4730:	3f 91       	pop	r19
    4732:	4f 91       	pop	r20
    4734:	5f 91       	pop	r21
    4736:	14 da       	rcall	.-3032   	; 0x3b60 <__mulsf3>
    4738:	05 c0       	rjmp	.+10     	; 0x4744 <exp>
    473a:	19 f4       	brne	.+6      	; 0x4742 <pow+0xa0>
    473c:	0e f0       	brts	.+2      	; 0x4740 <pow+0x9e>
    473e:	2e c0       	rjmp	.+92     	; 0x479c <__fp_inf>
    4740:	7d c0       	rjmp	.+250    	; 0x483c <__fp_zero>
    4742:	32 c0       	rjmp	.+100    	; 0x47a8 <__fp_nan>

00004744 <exp>:
    4744:	61 d0       	rcall	.+194    	; 0x4808 <__fp_splitA>
    4746:	c8 f3       	brcs	.-14     	; 0x473a <pow+0x98>
    4748:	96 38       	cpi	r25, 0x86	; 134
    474a:	c0 f7       	brcc	.-16     	; 0x473c <pow+0x9a>
    474c:	07 f8       	bld	r0, 7
    474e:	0f 92       	push	r0
    4750:	e8 94       	clt
    4752:	2b e3       	ldi	r18, 0x3B	; 59
    4754:	3a ea       	ldi	r19, 0xAA	; 170
    4756:	48 eb       	ldi	r20, 0xB8	; 184
    4758:	5f e7       	ldi	r21, 0x7F	; 127
    475a:	38 d1       	rcall	.+624    	; 0x49cc <__mulsf3_pse>
    475c:	0f 92       	push	r0
    475e:	0f 92       	push	r0
    4760:	0f 92       	push	r0
    4762:	4d b7       	in	r20, 0x3d	; 61
    4764:	5e b7       	in	r21, 0x3e	; 62
    4766:	0f 92       	push	r0
    4768:	f2 d0       	rcall	.+484    	; 0x494e <modf>
    476a:	e4 ee       	ldi	r30, 0xE4	; 228
    476c:	f0 e0       	ldi	r31, 0x00	; 0
    476e:	1f d0       	rcall	.+62     	; 0x47ae <__fp_powser>
    4770:	4f 91       	pop	r20
    4772:	5f 91       	pop	r21
    4774:	ef 91       	pop	r30
    4776:	ff 91       	pop	r31
    4778:	e5 95       	asr	r30
    477a:	ee 1f       	adc	r30, r30
    477c:	ff 1f       	adc	r31, r31
    477e:	49 f0       	breq	.+18     	; 0x4792 <exp+0x4e>
    4780:	fe 57       	subi	r31, 0x7E	; 126
    4782:	e0 68       	ori	r30, 0x80	; 128
    4784:	44 27       	eor	r20, r20
    4786:	ee 0f       	add	r30, r30
    4788:	44 1f       	adc	r20, r20
    478a:	fa 95       	dec	r31
    478c:	e1 f7       	brne	.-8      	; 0x4786 <exp+0x42>
    478e:	41 95       	neg	r20
    4790:	55 0b       	sbc	r21, r21
    4792:	64 d0       	rcall	.+200    	; 0x485c <ldexp>
    4794:	0f 90       	pop	r0
    4796:	07 fe       	sbrs	r0, 7
    4798:	58 c0       	rjmp	.+176    	; 0x484a <inverse>
    479a:	08 95       	ret

0000479c <__fp_inf>:
    479c:	97 f9       	bld	r25, 7
    479e:	9f 67       	ori	r25, 0x7F	; 127
    47a0:	80 e8       	ldi	r24, 0x80	; 128
    47a2:	70 e0       	ldi	r23, 0x00	; 0
    47a4:	60 e0       	ldi	r22, 0x00	; 0
    47a6:	08 95       	ret

000047a8 <__fp_nan>:
    47a8:	9f ef       	ldi	r25, 0xFF	; 255
    47aa:	80 ec       	ldi	r24, 0xC0	; 192
    47ac:	08 95       	ret

000047ae <__fp_powser>:
    47ae:	df 93       	push	r29
    47b0:	cf 93       	push	r28
    47b2:	1f 93       	push	r17
    47b4:	0f 93       	push	r16
    47b6:	ff 92       	push	r15
    47b8:	ef 92       	push	r14
    47ba:	df 92       	push	r13
    47bc:	7b 01       	movw	r14, r22
    47be:	8c 01       	movw	r16, r24
    47c0:	68 94       	set
    47c2:	05 c0       	rjmp	.+10     	; 0x47ce <__fp_powser+0x20>
    47c4:	da 2e       	mov	r13, r26
    47c6:	ef 01       	movw	r28, r30
    47c8:	ff d0       	rcall	.+510    	; 0x49c8 <__mulsf3x>
    47ca:	fe 01       	movw	r30, r28
    47cc:	e8 94       	clt
    47ce:	a5 91       	lpm	r26, Z+
    47d0:	25 91       	lpm	r18, Z+
    47d2:	35 91       	lpm	r19, Z+
    47d4:	45 91       	lpm	r20, Z+
    47d6:	55 91       	lpm	r21, Z+
    47d8:	ae f3       	brts	.-22     	; 0x47c4 <__fp_powser+0x16>
    47da:	ef 01       	movw	r28, r30
    47dc:	59 d1       	rcall	.+690    	; 0x4a90 <__addsf3x>
    47de:	fe 01       	movw	r30, r28
    47e0:	97 01       	movw	r18, r14
    47e2:	a8 01       	movw	r20, r16
    47e4:	da 94       	dec	r13
    47e6:	79 f7       	brne	.-34     	; 0x47c6 <__fp_powser+0x18>
    47e8:	df 90       	pop	r13
    47ea:	ef 90       	pop	r14
    47ec:	ff 90       	pop	r15
    47ee:	0f 91       	pop	r16
    47f0:	1f 91       	pop	r17
    47f2:	cf 91       	pop	r28
    47f4:	df 91       	pop	r29
    47f6:	08 95       	ret

000047f8 <__fp_split3>:
    47f8:	57 fd       	sbrc	r21, 7
    47fa:	90 58       	subi	r25, 0x80	; 128
    47fc:	44 0f       	add	r20, r20
    47fe:	55 1f       	adc	r21, r21
    4800:	59 f0       	breq	.+22     	; 0x4818 <__fp_splitA+0x10>
    4802:	5f 3f       	cpi	r21, 0xFF	; 255
    4804:	71 f0       	breq	.+28     	; 0x4822 <__fp_splitA+0x1a>
    4806:	47 95       	ror	r20

00004808 <__fp_splitA>:
    4808:	88 0f       	add	r24, r24
    480a:	97 fb       	bst	r25, 7
    480c:	99 1f       	adc	r25, r25
    480e:	61 f0       	breq	.+24     	; 0x4828 <__fp_splitA+0x20>
    4810:	9f 3f       	cpi	r25, 0xFF	; 255
    4812:	79 f0       	breq	.+30     	; 0x4832 <__fp_splitA+0x2a>
    4814:	87 95       	ror	r24
    4816:	08 95       	ret
    4818:	12 16       	cp	r1, r18
    481a:	13 06       	cpc	r1, r19
    481c:	14 06       	cpc	r1, r20
    481e:	55 1f       	adc	r21, r21
    4820:	f2 cf       	rjmp	.-28     	; 0x4806 <__fp_split3+0xe>
    4822:	46 95       	lsr	r20
    4824:	f1 df       	rcall	.-30     	; 0x4808 <__fp_splitA>
    4826:	08 c0       	rjmp	.+16     	; 0x4838 <__fp_splitA+0x30>
    4828:	16 16       	cp	r1, r22
    482a:	17 06       	cpc	r1, r23
    482c:	18 06       	cpc	r1, r24
    482e:	99 1f       	adc	r25, r25
    4830:	f1 cf       	rjmp	.-30     	; 0x4814 <__fp_splitA+0xc>
    4832:	86 95       	lsr	r24
    4834:	71 05       	cpc	r23, r1
    4836:	61 05       	cpc	r22, r1
    4838:	08 94       	sec
    483a:	08 95       	ret

0000483c <__fp_zero>:
    483c:	e8 94       	clt

0000483e <__fp_szero>:
    483e:	bb 27       	eor	r27, r27
    4840:	66 27       	eor	r22, r22
    4842:	77 27       	eor	r23, r23
    4844:	cb 01       	movw	r24, r22
    4846:	97 f9       	bld	r25, 7
    4848:	08 95       	ret

0000484a <inverse>:
    484a:	9b 01       	movw	r18, r22
    484c:	ac 01       	movw	r20, r24
    484e:	60 e0       	ldi	r22, 0x00	; 0
    4850:	70 e0       	ldi	r23, 0x00	; 0
    4852:	80 e8       	ldi	r24, 0x80	; 128
    4854:	9f e3       	ldi	r25, 0x3F	; 63
    4856:	7e ca       	rjmp	.-2820   	; 0x3d54 <__divsf3>
    4858:	a1 cf       	rjmp	.-190    	; 0x479c <__fp_inf>
    485a:	6d c1       	rjmp	.+730    	; 0x4b36 <__fp_mpack>

0000485c <ldexp>:
    485c:	d5 df       	rcall	.-86     	; 0x4808 <__fp_splitA>
    485e:	e8 f3       	brcs	.-6      	; 0x485a <inverse+0x10>
    4860:	99 23       	and	r25, r25
    4862:	d9 f3       	breq	.-10     	; 0x485a <inverse+0x10>
    4864:	94 0f       	add	r25, r20
    4866:	51 1d       	adc	r21, r1
    4868:	bb f3       	brvs	.-18     	; 0x4858 <inverse+0xe>
    486a:	91 50       	subi	r25, 0x01	; 1
    486c:	50 40       	sbci	r21, 0x00	; 0
    486e:	94 f0       	brlt	.+36     	; 0x4894 <ldexp+0x38>
    4870:	59 f0       	breq	.+22     	; 0x4888 <ldexp+0x2c>
    4872:	88 23       	and	r24, r24
    4874:	32 f0       	brmi	.+12     	; 0x4882 <ldexp+0x26>
    4876:	66 0f       	add	r22, r22
    4878:	77 1f       	adc	r23, r23
    487a:	88 1f       	adc	r24, r24
    487c:	91 50       	subi	r25, 0x01	; 1
    487e:	50 40       	sbci	r21, 0x00	; 0
    4880:	c1 f7       	brne	.-16     	; 0x4872 <ldexp+0x16>
    4882:	9e 3f       	cpi	r25, 0xFE	; 254
    4884:	51 05       	cpc	r21, r1
    4886:	44 f7       	brge	.-48     	; 0x4858 <inverse+0xe>
    4888:	88 0f       	add	r24, r24
    488a:	91 1d       	adc	r25, r1
    488c:	96 95       	lsr	r25
    488e:	87 95       	ror	r24
    4890:	97 f9       	bld	r25, 7
    4892:	08 95       	ret
    4894:	5f 3f       	cpi	r21, 0xFF	; 255
    4896:	ac f0       	brlt	.+42     	; 0x48c2 <ldexp+0x66>
    4898:	98 3e       	cpi	r25, 0xE8	; 232
    489a:	9c f0       	brlt	.+38     	; 0x48c2 <ldexp+0x66>
    489c:	bb 27       	eor	r27, r27
    489e:	86 95       	lsr	r24
    48a0:	77 95       	ror	r23
    48a2:	67 95       	ror	r22
    48a4:	b7 95       	ror	r27
    48a6:	08 f4       	brcc	.+2      	; 0x48aa <ldexp+0x4e>
    48a8:	b1 60       	ori	r27, 0x01	; 1
    48aa:	93 95       	inc	r25
    48ac:	c1 f7       	brne	.-16     	; 0x489e <ldexp+0x42>
    48ae:	bb 0f       	add	r27, r27
    48b0:	58 f7       	brcc	.-42     	; 0x4888 <ldexp+0x2c>
    48b2:	11 f4       	brne	.+4      	; 0x48b8 <ldexp+0x5c>
    48b4:	60 ff       	sbrs	r22, 0
    48b6:	e8 cf       	rjmp	.-48     	; 0x4888 <ldexp+0x2c>
    48b8:	6f 5f       	subi	r22, 0xFF	; 255
    48ba:	7f 4f       	sbci	r23, 0xFF	; 255
    48bc:	8f 4f       	sbci	r24, 0xFF	; 255
    48be:	9f 4f       	sbci	r25, 0xFF	; 255
    48c0:	e3 cf       	rjmp	.-58     	; 0x4888 <ldexp+0x2c>
    48c2:	bd cf       	rjmp	.-134    	; 0x483e <__fp_szero>
    48c4:	0e f0       	brts	.+2      	; 0x48c8 <ldexp+0x6c>
    48c6:	37 c1       	rjmp	.+622    	; 0x4b36 <__fp_mpack>
    48c8:	6f cf       	rjmp	.-290    	; 0x47a8 <__fp_nan>
    48ca:	68 94       	set
    48cc:	67 cf       	rjmp	.-306    	; 0x479c <__fp_inf>

000048ce <log>:
    48ce:	9c df       	rcall	.-200    	; 0x4808 <__fp_splitA>
    48d0:	c8 f3       	brcs	.-14     	; 0x48c4 <ldexp+0x68>
    48d2:	99 23       	and	r25, r25
    48d4:	d1 f3       	breq	.-12     	; 0x48ca <ldexp+0x6e>
    48d6:	c6 f3       	brts	.-16     	; 0x48c8 <ldexp+0x6c>
    48d8:	df 93       	push	r29
    48da:	cf 93       	push	r28
    48dc:	1f 93       	push	r17
    48de:	0f 93       	push	r16
    48e0:	ff 92       	push	r15
    48e2:	c9 2f       	mov	r28, r25
    48e4:	dd 27       	eor	r29, r29
    48e6:	88 23       	and	r24, r24
    48e8:	2a f0       	brmi	.+10     	; 0x48f4 <log+0x26>
    48ea:	21 97       	sbiw	r28, 0x01	; 1
    48ec:	66 0f       	add	r22, r22
    48ee:	77 1f       	adc	r23, r23
    48f0:	88 1f       	adc	r24, r24
    48f2:	da f7       	brpl	.-10     	; 0x48ea <log+0x1c>
    48f4:	20 e0       	ldi	r18, 0x00	; 0
    48f6:	30 e0       	ldi	r19, 0x00	; 0
    48f8:	40 e8       	ldi	r20, 0x80	; 128
    48fa:	5f eb       	ldi	r21, 0xBF	; 191
    48fc:	9f e3       	ldi	r25, 0x3F	; 63
    48fe:	88 39       	cpi	r24, 0x98	; 152
    4900:	20 f0       	brcs	.+8      	; 0x490a <log+0x3c>
    4902:	80 3e       	cpi	r24, 0xE0	; 224
    4904:	30 f0       	brcs	.+12     	; 0x4912 <log+0x44>
    4906:	21 96       	adiw	r28, 0x01	; 1
    4908:	8f 77       	andi	r24, 0x7F	; 127
    490a:	fd d8       	rcall	.-3590   	; 0x3b06 <__addsf3>
    490c:	ec e0       	ldi	r30, 0x0C	; 12
    490e:	f1 e0       	ldi	r31, 0x01	; 1
    4910:	03 c0       	rjmp	.+6      	; 0x4918 <log+0x4a>
    4912:	f9 d8       	rcall	.-3598   	; 0x3b06 <__addsf3>
    4914:	e9 e3       	ldi	r30, 0x39	; 57
    4916:	f1 e0       	ldi	r31, 0x01	; 1
    4918:	4a df       	rcall	.-364    	; 0x47ae <__fp_powser>
    491a:	8b 01       	movw	r16, r22
    491c:	be 01       	movw	r22, r28
    491e:	ec 01       	movw	r28, r24
    4920:	fb 2e       	mov	r15, r27
    4922:	6f 57       	subi	r22, 0x7F	; 127
    4924:	71 09       	sbc	r23, r1
    4926:	75 95       	asr	r23
    4928:	77 1f       	adc	r23, r23
    492a:	88 0b       	sbc	r24, r24
    492c:	99 0b       	sbc	r25, r25
    492e:	4e db       	rcall	.-2404   	; 0x3fcc <__floatsisf>
    4930:	28 e1       	ldi	r18, 0x18	; 24
    4932:	32 e7       	ldi	r19, 0x72	; 114
    4934:	41 e3       	ldi	r20, 0x31	; 49
    4936:	5f e3       	ldi	r21, 0x3F	; 63
    4938:	47 d0       	rcall	.+142    	; 0x49c8 <__mulsf3x>
    493a:	af 2d       	mov	r26, r15
    493c:	98 01       	movw	r18, r16
    493e:	ae 01       	movw	r20, r28
    4940:	ff 90       	pop	r15
    4942:	0f 91       	pop	r16
    4944:	1f 91       	pop	r17
    4946:	cf 91       	pop	r28
    4948:	df 91       	pop	r29
    494a:	a2 d0       	rcall	.+324    	; 0x4a90 <__addsf3x>
    494c:	10 c1       	rjmp	.+544    	; 0x4b6e <__fp_round>

0000494e <modf>:
    494e:	fa 01       	movw	r30, r20
    4950:	dc 01       	movw	r26, r24
    4952:	aa 0f       	add	r26, r26
    4954:	bb 1f       	adc	r27, r27
    4956:	9b 01       	movw	r18, r22
    4958:	ac 01       	movw	r20, r24
    495a:	bf 57       	subi	r27, 0x7F	; 127
    495c:	28 f4       	brcc	.+10     	; 0x4968 <modf+0x1a>
    495e:	22 27       	eor	r18, r18
    4960:	33 27       	eor	r19, r19
    4962:	44 27       	eor	r20, r20
    4964:	50 78       	andi	r21, 0x80	; 128
    4966:	1f c0       	rjmp	.+62     	; 0x49a6 <modf+0x58>
    4968:	b7 51       	subi	r27, 0x17	; 23
    496a:	88 f4       	brcc	.+34     	; 0x498e <modf+0x40>
    496c:	ab 2f       	mov	r26, r27
    496e:	00 24       	eor	r0, r0
    4970:	46 95       	lsr	r20
    4972:	37 95       	ror	r19
    4974:	27 95       	ror	r18
    4976:	01 1c       	adc	r0, r1
    4978:	a3 95       	inc	r26
    497a:	d2 f3       	brmi	.-12     	; 0x4970 <modf+0x22>
    497c:	00 20       	and	r0, r0
    497e:	69 f0       	breq	.+26     	; 0x499a <modf+0x4c>
    4980:	22 0f       	add	r18, r18
    4982:	33 1f       	adc	r19, r19
    4984:	44 1f       	adc	r20, r20
    4986:	b3 95       	inc	r27
    4988:	da f3       	brmi	.-10     	; 0x4980 <modf+0x32>
    498a:	0d d0       	rcall	.+26     	; 0x49a6 <modf+0x58>
    498c:	8b c8       	rjmp	.-3818   	; 0x3aa4 <__subsf3>
    498e:	61 30       	cpi	r22, 0x01	; 1
    4990:	71 05       	cpc	r23, r1
    4992:	a0 e8       	ldi	r26, 0x80	; 128
    4994:	8a 07       	cpc	r24, r26
    4996:	b9 46       	sbci	r27, 0x69	; 105
    4998:	30 f4       	brcc	.+12     	; 0x49a6 <modf+0x58>
    499a:	9b 01       	movw	r18, r22
    499c:	ac 01       	movw	r20, r24
    499e:	66 27       	eor	r22, r22
    49a0:	77 27       	eor	r23, r23
    49a2:	88 27       	eor	r24, r24
    49a4:	90 78       	andi	r25, 0x80	; 128
    49a6:	30 96       	adiw	r30, 0x00	; 0
    49a8:	21 f0       	breq	.+8      	; 0x49b2 <modf+0x64>
    49aa:	20 83       	st	Z, r18
    49ac:	31 83       	std	Z+1, r19	; 0x01
    49ae:	42 83       	std	Z+2, r20	; 0x02
    49b0:	53 83       	std	Z+3, r21	; 0x03
    49b2:	08 95       	ret
    49b4:	ce d0       	rcall	.+412    	; 0x4b52 <__fp_pscA>
    49b6:	28 f0       	brcs	.+10     	; 0x49c2 <modf+0x74>
    49b8:	d3 d0       	rcall	.+422    	; 0x4b60 <__fp_pscB>
    49ba:	18 f0       	brcs	.+6      	; 0x49c2 <modf+0x74>
    49bc:	95 23       	and	r25, r21
    49be:	09 f0       	breq	.+2      	; 0x49c2 <modf+0x74>
    49c0:	ed ce       	rjmp	.-550    	; 0x479c <__fp_inf>
    49c2:	f2 ce       	rjmp	.-540    	; 0x47a8 <__fp_nan>
    49c4:	11 24       	eor	r1, r1
    49c6:	3b cf       	rjmp	.-394    	; 0x483e <__fp_szero>

000049c8 <__mulsf3x>:
    49c8:	17 df       	rcall	.-466    	; 0x47f8 <__fp_split3>
    49ca:	a0 f3       	brcs	.-24     	; 0x49b4 <modf+0x66>

000049cc <__mulsf3_pse>:
    49cc:	95 9f       	mul	r25, r21
    49ce:	d1 f3       	breq	.-12     	; 0x49c4 <modf+0x76>
    49d0:	95 0f       	add	r25, r21
    49d2:	50 e0       	ldi	r21, 0x00	; 0
    49d4:	55 1f       	adc	r21, r21
    49d6:	62 9f       	mul	r22, r18
    49d8:	f0 01       	movw	r30, r0
    49da:	72 9f       	mul	r23, r18
    49dc:	bb 27       	eor	r27, r27
    49de:	f0 0d       	add	r31, r0
    49e0:	b1 1d       	adc	r27, r1
    49e2:	63 9f       	mul	r22, r19
    49e4:	aa 27       	eor	r26, r26
    49e6:	f0 0d       	add	r31, r0
    49e8:	b1 1d       	adc	r27, r1
    49ea:	aa 1f       	adc	r26, r26
    49ec:	64 9f       	mul	r22, r20
    49ee:	66 27       	eor	r22, r22
    49f0:	b0 0d       	add	r27, r0
    49f2:	a1 1d       	adc	r26, r1
    49f4:	66 1f       	adc	r22, r22
    49f6:	82 9f       	mul	r24, r18
    49f8:	22 27       	eor	r18, r18
    49fa:	b0 0d       	add	r27, r0
    49fc:	a1 1d       	adc	r26, r1
    49fe:	62 1f       	adc	r22, r18
    4a00:	73 9f       	mul	r23, r19
    4a02:	b0 0d       	add	r27, r0
    4a04:	a1 1d       	adc	r26, r1
    4a06:	62 1f       	adc	r22, r18
    4a08:	83 9f       	mul	r24, r19
    4a0a:	a0 0d       	add	r26, r0
    4a0c:	61 1d       	adc	r22, r1
    4a0e:	22 1f       	adc	r18, r18
    4a10:	74 9f       	mul	r23, r20
    4a12:	33 27       	eor	r19, r19
    4a14:	a0 0d       	add	r26, r0
    4a16:	61 1d       	adc	r22, r1
    4a18:	23 1f       	adc	r18, r19
    4a1a:	84 9f       	mul	r24, r20
    4a1c:	60 0d       	add	r22, r0
    4a1e:	21 1d       	adc	r18, r1
    4a20:	82 2f       	mov	r24, r18
    4a22:	76 2f       	mov	r23, r22
    4a24:	6a 2f       	mov	r22, r26
    4a26:	11 24       	eor	r1, r1
    4a28:	9f 57       	subi	r25, 0x7F	; 127
    4a2a:	50 40       	sbci	r21, 0x00	; 0
    4a2c:	8a f0       	brmi	.+34     	; 0x4a50 <__mulsf3_pse+0x84>
    4a2e:	e1 f0       	breq	.+56     	; 0x4a68 <__mulsf3_pse+0x9c>
    4a30:	88 23       	and	r24, r24
    4a32:	4a f0       	brmi	.+18     	; 0x4a46 <__mulsf3_pse+0x7a>
    4a34:	ee 0f       	add	r30, r30
    4a36:	ff 1f       	adc	r31, r31
    4a38:	bb 1f       	adc	r27, r27
    4a3a:	66 1f       	adc	r22, r22
    4a3c:	77 1f       	adc	r23, r23
    4a3e:	88 1f       	adc	r24, r24
    4a40:	91 50       	subi	r25, 0x01	; 1
    4a42:	50 40       	sbci	r21, 0x00	; 0
    4a44:	a9 f7       	brne	.-22     	; 0x4a30 <__mulsf3_pse+0x64>
    4a46:	9e 3f       	cpi	r25, 0xFE	; 254
    4a48:	51 05       	cpc	r21, r1
    4a4a:	70 f0       	brcs	.+28     	; 0x4a68 <__mulsf3_pse+0x9c>
    4a4c:	a7 ce       	rjmp	.-690    	; 0x479c <__fp_inf>
    4a4e:	f7 ce       	rjmp	.-530    	; 0x483e <__fp_szero>
    4a50:	5f 3f       	cpi	r21, 0xFF	; 255
    4a52:	ec f3       	brlt	.-6      	; 0x4a4e <__mulsf3_pse+0x82>
    4a54:	98 3e       	cpi	r25, 0xE8	; 232
    4a56:	dc f3       	brlt	.-10     	; 0x4a4e <__mulsf3_pse+0x82>
    4a58:	86 95       	lsr	r24
    4a5a:	77 95       	ror	r23
    4a5c:	67 95       	ror	r22
    4a5e:	b7 95       	ror	r27
    4a60:	f7 95       	ror	r31
    4a62:	e7 95       	ror	r30
    4a64:	9f 5f       	subi	r25, 0xFF	; 255
    4a66:	c1 f7       	brne	.-16     	; 0x4a58 <__mulsf3_pse+0x8c>
    4a68:	fe 2b       	or	r31, r30
    4a6a:	88 0f       	add	r24, r24
    4a6c:	91 1d       	adc	r25, r1
    4a6e:	96 95       	lsr	r25
    4a70:	87 95       	ror	r24
    4a72:	97 f9       	bld	r25, 7
    4a74:	08 95       	ret
    4a76:	6d d0       	rcall	.+218    	; 0x4b52 <__fp_pscA>
    4a78:	30 f0       	brcs	.+12     	; 0x4a86 <__mulsf3_pse+0xba>
    4a7a:	72 d0       	rcall	.+228    	; 0x4b60 <__fp_pscB>
    4a7c:	20 f0       	brcs	.+8      	; 0x4a86 <__mulsf3_pse+0xba>
    4a7e:	31 f4       	brne	.+12     	; 0x4a8c <__mulsf3_pse+0xc0>
    4a80:	9f 3f       	cpi	r25, 0xFF	; 255
    4a82:	11 f4       	brne	.+4      	; 0x4a88 <__mulsf3_pse+0xbc>
    4a84:	1e f4       	brtc	.+6      	; 0x4a8c <__mulsf3_pse+0xc0>
    4a86:	90 ce       	rjmp	.-736    	; 0x47a8 <__fp_nan>
    4a88:	0e f4       	brtc	.+2      	; 0x4a8c <__mulsf3_pse+0xc0>
    4a8a:	e0 95       	com	r30
    4a8c:	e7 fb       	bst	r30, 7
    4a8e:	86 ce       	rjmp	.-756    	; 0x479c <__fp_inf>

00004a90 <__addsf3x>:
    4a90:	e9 2f       	mov	r30, r25
    4a92:	b2 de       	rcall	.-668    	; 0x47f8 <__fp_split3>
    4a94:	80 f3       	brcs	.-32     	; 0x4a76 <__mulsf3_pse+0xaa>
    4a96:	ba 17       	cp	r27, r26
    4a98:	62 07       	cpc	r22, r18
    4a9a:	73 07       	cpc	r23, r19
    4a9c:	84 07       	cpc	r24, r20
    4a9e:	95 07       	cpc	r25, r21
    4aa0:	18 f0       	brcs	.+6      	; 0x4aa8 <__addsf3x+0x18>
    4aa2:	71 f4       	brne	.+28     	; 0x4ac0 <__addsf3x+0x30>
    4aa4:	9e f5       	brtc	.+102    	; 0x4b0c <__addsf3x+0x7c>
    4aa6:	ca ce       	rjmp	.-620    	; 0x483c <__fp_zero>
    4aa8:	0e f4       	brtc	.+2      	; 0x4aac <__addsf3x+0x1c>
    4aaa:	e0 95       	com	r30
    4aac:	0b 2e       	mov	r0, r27
    4aae:	ba 2f       	mov	r27, r26
    4ab0:	a0 2d       	mov	r26, r0
    4ab2:	0b 01       	movw	r0, r22
    4ab4:	b9 01       	movw	r22, r18
    4ab6:	90 01       	movw	r18, r0
    4ab8:	0c 01       	movw	r0, r24
    4aba:	ca 01       	movw	r24, r20
    4abc:	a0 01       	movw	r20, r0
    4abe:	11 24       	eor	r1, r1
    4ac0:	ff 27       	eor	r31, r31
    4ac2:	59 1b       	sub	r21, r25
    4ac4:	99 f0       	breq	.+38     	; 0x4aec <__addsf3x+0x5c>
    4ac6:	59 3f       	cpi	r21, 0xF9	; 249
    4ac8:	50 f4       	brcc	.+20     	; 0x4ade <__addsf3x+0x4e>
    4aca:	50 3e       	cpi	r21, 0xE0	; 224
    4acc:	68 f1       	brcs	.+90     	; 0x4b28 <__addsf3x+0x98>
    4ace:	1a 16       	cp	r1, r26
    4ad0:	f0 40       	sbci	r31, 0x00	; 0
    4ad2:	a2 2f       	mov	r26, r18
    4ad4:	23 2f       	mov	r18, r19
    4ad6:	34 2f       	mov	r19, r20
    4ad8:	44 27       	eor	r20, r20
    4ada:	58 5f       	subi	r21, 0xF8	; 248
    4adc:	f3 cf       	rjmp	.-26     	; 0x4ac4 <__addsf3x+0x34>
    4ade:	46 95       	lsr	r20
    4ae0:	37 95       	ror	r19
    4ae2:	27 95       	ror	r18
    4ae4:	a7 95       	ror	r26
    4ae6:	f0 40       	sbci	r31, 0x00	; 0
    4ae8:	53 95       	inc	r21
    4aea:	c9 f7       	brne	.-14     	; 0x4ade <__addsf3x+0x4e>
    4aec:	7e f4       	brtc	.+30     	; 0x4b0c <__addsf3x+0x7c>
    4aee:	1f 16       	cp	r1, r31
    4af0:	ba 0b       	sbc	r27, r26
    4af2:	62 0b       	sbc	r22, r18
    4af4:	73 0b       	sbc	r23, r19
    4af6:	84 0b       	sbc	r24, r20
    4af8:	ba f0       	brmi	.+46     	; 0x4b28 <__addsf3x+0x98>
    4afa:	91 50       	subi	r25, 0x01	; 1
    4afc:	a1 f0       	breq	.+40     	; 0x4b26 <__addsf3x+0x96>
    4afe:	ff 0f       	add	r31, r31
    4b00:	bb 1f       	adc	r27, r27
    4b02:	66 1f       	adc	r22, r22
    4b04:	77 1f       	adc	r23, r23
    4b06:	88 1f       	adc	r24, r24
    4b08:	c2 f7       	brpl	.-16     	; 0x4afa <__addsf3x+0x6a>
    4b0a:	0e c0       	rjmp	.+28     	; 0x4b28 <__addsf3x+0x98>
    4b0c:	ba 0f       	add	r27, r26
    4b0e:	62 1f       	adc	r22, r18
    4b10:	73 1f       	adc	r23, r19
    4b12:	84 1f       	adc	r24, r20
    4b14:	48 f4       	brcc	.+18     	; 0x4b28 <__addsf3x+0x98>
    4b16:	87 95       	ror	r24
    4b18:	77 95       	ror	r23
    4b1a:	67 95       	ror	r22
    4b1c:	b7 95       	ror	r27
    4b1e:	f7 95       	ror	r31
    4b20:	9e 3f       	cpi	r25, 0xFE	; 254
    4b22:	08 f0       	brcs	.+2      	; 0x4b26 <__addsf3x+0x96>
    4b24:	b3 cf       	rjmp	.-154    	; 0x4a8c <__mulsf3_pse+0xc0>
    4b26:	93 95       	inc	r25
    4b28:	88 0f       	add	r24, r24
    4b2a:	08 f0       	brcs	.+2      	; 0x4b2e <__addsf3x+0x9e>
    4b2c:	99 27       	eor	r25, r25
    4b2e:	ee 0f       	add	r30, r30
    4b30:	97 95       	ror	r25
    4b32:	87 95       	ror	r24
    4b34:	08 95       	ret

00004b36 <__fp_mpack>:
    4b36:	9f 3f       	cpi	r25, 0xFF	; 255
    4b38:	31 f0       	breq	.+12     	; 0x4b46 <__fp_mpack_finite+0xc>

00004b3a <__fp_mpack_finite>:
    4b3a:	91 50       	subi	r25, 0x01	; 1
    4b3c:	20 f4       	brcc	.+8      	; 0x4b46 <__fp_mpack_finite+0xc>
    4b3e:	87 95       	ror	r24
    4b40:	77 95       	ror	r23
    4b42:	67 95       	ror	r22
    4b44:	b7 95       	ror	r27
    4b46:	88 0f       	add	r24, r24
    4b48:	91 1d       	adc	r25, r1
    4b4a:	96 95       	lsr	r25
    4b4c:	87 95       	ror	r24
    4b4e:	97 f9       	bld	r25, 7
    4b50:	08 95       	ret

00004b52 <__fp_pscA>:
    4b52:	00 24       	eor	r0, r0
    4b54:	0a 94       	dec	r0
    4b56:	16 16       	cp	r1, r22
    4b58:	17 06       	cpc	r1, r23
    4b5a:	18 06       	cpc	r1, r24
    4b5c:	09 06       	cpc	r0, r25
    4b5e:	08 95       	ret

00004b60 <__fp_pscB>:
    4b60:	00 24       	eor	r0, r0
    4b62:	0a 94       	dec	r0
    4b64:	12 16       	cp	r1, r18
    4b66:	13 06       	cpc	r1, r19
    4b68:	14 06       	cpc	r1, r20
    4b6a:	05 06       	cpc	r0, r21
    4b6c:	08 95       	ret

00004b6e <__fp_round>:
    4b6e:	09 2e       	mov	r0, r25
    4b70:	03 94       	inc	r0
    4b72:	00 0c       	add	r0, r0
    4b74:	11 f4       	brne	.+4      	; 0x4b7a <__fp_round+0xc>
    4b76:	88 23       	and	r24, r24
    4b78:	52 f0       	brmi	.+20     	; 0x4b8e <__fp_round+0x20>
    4b7a:	bb 0f       	add	r27, r27
    4b7c:	40 f4       	brcc	.+16     	; 0x4b8e <__fp_round+0x20>
    4b7e:	bf 2b       	or	r27, r31
    4b80:	11 f4       	brne	.+4      	; 0x4b86 <__fp_round+0x18>
    4b82:	60 ff       	sbrs	r22, 0
    4b84:	04 c0       	rjmp	.+8      	; 0x4b8e <__fp_round+0x20>
    4b86:	6f 5f       	subi	r22, 0xFF	; 255
    4b88:	7f 4f       	sbci	r23, 0xFF	; 255
    4b8a:	8f 4f       	sbci	r24, 0xFF	; 255
    4b8c:	9f 4f       	sbci	r25, 0xFF	; 255
    4b8e:	08 95       	ret

00004b90 <_exit>:
    4b90:	f8 94       	cli

00004b92 <__stop_program>:
    4b92:	ff cf       	rjmp	.-2      	; 0x4b92 <__stop_program>
